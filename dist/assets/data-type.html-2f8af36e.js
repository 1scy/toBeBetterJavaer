import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c as l,a,d as t,b as e,e as n}from"./app-f5953329.js";const T={},c=a("h1",{id:"mysql数据类型",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#mysql数据类型","aria-hidden":"true"},"#"),t(" MySQL数据类型")],-1),d={href:"https://javabetter.cn/mysql/table.html",target:"_blank",rel:"noopener noreferrer"},r={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},Q=n('<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240201164851.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>目前用到了 bigint、tinyint、varchar、int、timestamp 等数据类型，这些数据类型到底该如何选择呢？就需要我们提前先了解清楚，MySQL 到底支持哪些数据类型，以及每种数据类型的特点是什么。</p><h2 id="整数类型" tabindex="-1"><a class="header-anchor" href="#整数类型" aria-hidden="true">#</a> 整数类型</h2><p>上面提到的 bigint、tinyint、int 都是整数类型，MySQL 支持的整数类型如下：</p><table><thead><tr><th style="text-align:left;">类型名称</th><th style="text-align:left;">存储空间</th><th style="text-align:left;">范围</th></tr></thead><tbody><tr><td style="text-align:left;">tinyint</td><td style="text-align:left;">1 字节</td><td style="text-align:left;">-128 到 127 或者 0 到 255</td></tr><tr><td style="text-align:left;">smallint</td><td style="text-align:left;">2 字节</td><td style="text-align:left;">-32768 到 32767 或者 0 到 65535</td></tr><tr><td style="text-align:left;">mediuint</td><td style="text-align:left;">3 字节</td><td style="text-align:left;">-8388608 到 8388607 或者 0 到 16777215</td></tr><tr><td style="text-align:left;">int</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">-2147483648 到 2147483647 或者 0 到 4294967295</td></tr><tr><td style="text-align:left;">bigint</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">-9223372036854775808 到 9223372036854775807 或者 0 到 18446744073709551615</td></tr></tbody></table><p>smallint 和 mediuint 这两种类型很少用到，一般我们用的是 tinyint、int、bigint 这三种类型。</p><p>比如说技术派中 article 表的文章类型字段 article_type，就是用 tinyint 类型定义的，因为文章类型只有 1（博文）、2（问答）种，所以用 tinyint 就足够了。</p><p>再比如说状态 status 字段，也是用 tinyint 类型定义的，因为状态我们只有 0（未发布）、1（发布）两种。</p><p>以及 deleted 字段，也是用 tinyint 类型定义的，因为删除状态一般只有 0（未删除）、1（已删除）两种。</p><p>那像 int 一般用于用户的年龄啊、库存数量啊、评论数量啊、点赞数量啊等等。</p><p>技术派中 article 表的 offical_stat（官方推荐状态）、topping_stat（置顶状态）、cream_stat（加精状态）用了 int 类型，其实不太合理，应该用 tinyint 类型就足够了。暂时也就懒得改了。</p><p>bigint 我们用到了表的主键上，这也是一种比较常见的做法，尤其是当预计数量超过 int 的最大值（21 亿）时，但是就技术派目前的数量来看，用 int 就足够了。</p><p>我之前在做大宗期货交易的订单时，一开始用的是 int 类型，后来还真的出现了超出 int 范围的情况，所以后来改成了 bigint 类型。</p><p>bigint 的最大值是 9223372036854775807，也就是 922 亿亿，这个数字非常非常大，往往到这个数量级的都要做分库分表了。</p>',14),m={href:"https://zhuanlan.zhihu.com/p/85837641",target:"_blank",rel:"noopener noreferrer"},u=a("code",null,"CHAR(36)",-1),g=a("code",null,"VARCHAR(36)",-1),h={href:"https://javabetter.cn/mysql/suoyin.html",target:"_blank",rel:"noopener noreferrer"},k=a("h3",{id:"有符号和无符号",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#有符号和无符号","aria-hidden":"true"},"#"),t(" 有符号和无符号")],-1),f=a("p",null,"整型数据类型还可以选择有符号和无符号，有符号就是可以存储正数和负数，无符号就是只能存储正数。默认为有符号，也就是不用指定。",-1),b=a("p",null,"比如说 int 类型，如果是有符号的，那么范围是 -2147483648 到 2147483647，如果是无符号的，那么范围是 0 到 4294967295。",-1),y=a("figure",null,[a("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202084103.png",alt:"from MySQL 官网",tabindex:"0",loading:"lazy"}),a("figcaption",null,"from MySQL 官网")],-1),L=a("p",null,[a("strong",null,"无符号的情况下，要特别注意和 Java 数据类型的对应关系"),t("。")],-1),x={href:"https://javabetter.cn/basic-grammar/basic-data-type.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://javabetter.cn/basic-extra-meal/box.html",target:"_blank",rel:"noopener noreferrer"},v=n('<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202081618.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>像自增 ID，肯定是无符号的，所以我们会在定义的时候将其设置为 <code>unsigned</code>，比如说技术派项目中的 article 表。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202082214.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="int-10-和-int" tabindex="-1"><a class="header-anchor" href="#int-10-和-int" aria-hidden="true">#</a> int(10) 和 int</h3><p>注意，上图中我们在定义 id 的时候，设置的数据类型是 <code>int(10)</code>，和 int 有什么区别呢？</p><p>这其实是一道不错的面试题，比如说面试官可能会问你，<code>int(10)</code> 和 <code>int(11)</code> 有什么区别？</p><p>如果之前没有了解过的话，可能一下子就懵了。其实这个和存储空间没有关系，只是用来规定显示宽度的。</p><p>我们来创建这样一张测试表，包含四个字段，一个是主键 ID，一个是 <code>int(10)</code>，一个是 <code>int(11)</code>，另外一个是 int。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>int10<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>int11<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>int<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里的反引号 ` 是为了避免关键字冲突。</p></blockquote><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202083135.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后我们插入一条数据，看看结果。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>int10<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>int11<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>int<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">,</span> <span class="token number">1234567890</span><span class="token punctuation">,</span> <span class="token number">1234567890</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',13),V={href:"https://javabetter.cn/mysql/simple-select.html",target:"_blank",rel:"noopener noreferrer"},w=n('<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202083253.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们来看一下 MySQL 官方对 <code>int(M)</code> 的解释。</p><blockquote><p>M indicates the maximum display width for integer types.</p></blockquote><p>也就是说，<code>int(M)</code> 只是规定了显示宽度，对于存储空间和范围没有影响。通常与 ZEROFILL 一起使用，这样会在数字前面补 0，直到达到 M 位数。</p><blockquote><p>If ZEROFILL is specified, the column will be zero-filled to the specified width for numeric types.</p></blockquote><p>我们来修改一下之前的表结构，将 <code>int(10)</code> 和 <code>int(11)</code> 改成 <code>int(10) ZEROFILL</code> 和 <code>int(11) ZEROFILL</code>。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>int10<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> ZEROFILL <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>int11<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> ZEROFILL <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>int<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再插入一条同样的数据（10 位），看看结果。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>int10<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>int11<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>int<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">,</span> <span class="token number">1234567890</span><span class="token punctuation">,</span> <span class="token number">1234567890</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果如下所示：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202084838.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看到，<code>int(10) ZEROFILL</code> 和 int 都是正常显示，而 <code>int(11) ZEROFILL</code> 在数字前面补了 0，这是因为 1234567890 不足我们规定的 11 位，所以前面补了 0。</p><p>也就是说，没有指定 ZEROFILL 的话，<code>int(M)</code> 和 int 是一样的；指定了 ZEROFILL 的话，就会在数字前面补 0，直到达到 M 位数。</p><h2 id="浮点数类型" tabindex="-1"><a class="header-anchor" href="#浮点数类型" aria-hidden="true">#</a> 浮点数类型</h2><p>浮点数类型包括 float 和 double，它们的取值范围我从来没有记住过（😂），太难记了。</p><p>它们之间的区别是存储空间不同，float 是 4 字节，double 是 8 字节。既然存储空间不同，肯定表示的范围也就不同，double 占用的空间大，所以精度上也更加准确。</p>',16),M={href:"https://javabetter.cn/basic-grammar/basic-data-type.html#_03%E3%80%81%E5%8D%95%E7%B2%BE%E5%BA%A6%E5%92%8C%E5%8F%8C%E7%B2%BE%E5%BA%A6",target:"_blank",rel:"noopener noreferrer"},H=n('<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202091551.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="定点数类型" tabindex="-1"><a class="header-anchor" href="#定点数类型" aria-hidden="true">#</a> 定点数类型</h2><p>实际工作当中，浮点数其实并不常用，因为很容易出现精度丢失的问题，尤其是一些涉及到货币值时，所以我们一般会选择定点数类型。</p><p>记得之前在对接微信支付的时候，微信支付的金额是用 <code>int</code> 类型表示的，单位是分，也就是说 1 元是 100 分。这样做的好处是，避免了浮点数精度丢失的问题。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202093128.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>定点数类型包括 decimal 和 numeric，<s>网上有说 decimal 的存储空间是定长的，而 numeric 的存储空间是变长的</s>，但是我在 MySQL 官方文档上并没有找到相关的信息。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202093648.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>换句话说，在 MySQL 中，decimal 和 numeric 是等价的，没有区别。</p><p>例如，我们可以这样定义一个定点数类型的字段。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>price<span class="token punctuation">`</span></span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明 <code>decimal(10, 2)</code> 意味着 price 最多有 10 位数，包括小数点后的 2 位。</p><p>也就是说，<code>decimal(M, D)</code> 中的 M 表示总的位数，D 表示小数点后的位数。</p><p>定点数之所以比浮点数精确，是因为定点数会按照小数点把数字分成两部分，整数部分和小数部分，而浮点数是按照科学计数法来存储的。</p>',13),Z={class:"MathJax",jax:"SVG",style:{position:"relative"}},j={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"12.803ex",height:"2.005ex",role:"img",focusable:"false",viewBox:"0 -864 5659 886","aria-hidden":"true"},E=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1278,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(2278,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(2778,0)"></path></g><g data-mml-node="mo" transform="translate(3500.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(4222.4,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g>',1),N=[E],R=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("mn",null,"1.23456"),a("mo",null,"∗"),a("msup",null,[a("mn",null,"10"),a("mn",null,"2")])])],-1),O=a("p",null,"大家都知道，计算机存储的是二进制，遇到小数的时候就容易表示不精确，比如说 0.1 在二进制中是无限循环的。",-1),C={href:"https://www.binaryconvert.com/",target:"_blank",rel:"noopener noreferrer"},S=n('<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202100059.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>但存储整数就完全没问题，0 的二进制表示就是 00，1 的二进制表示就是 01，2 的二进制表示就是 10，3 的二进制表示就是 11，4 的二进制表示就是 0100，以此类推（逢二进一）。</p><p>回到定点数上，对于定点数 <code>decimal(M, D)</code>，M 的取值范围是 1 到 255，D 的取值范围是 0 到 30；且 M 必须大于等于 D。</p><p>那 MySQL 是如何存储 <code>decimal(16, 4)</code> 这个定点数的呢？</p><p>可以选择字符串的存储方式，每个数字占用一个字符的位置，比如说数值 123.4567，直接存储为字符串 &quot;123.4567&quot;。</p><p>但这种方式对于计算机来说，并不高效，毕竟计算机的底层仍然是通过二进制来实现存储的。那怎么办呢？</p><p>对于 <code>decimal(16, 4)</code>，MySQL 会将其拆解为两部分，整数部分和小数部分，然后采用二进制压缩存储的方式来存储。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202102322.png" alt="图片来源于小孩子的 MySQL 是怎样使用的" tabindex="0" loading="lazy"><figcaption>图片来源于小孩子的 MySQL 是怎样使用的</figcaption></figure>',8),I=a("strong",null,"整数部分",-1),A={class:"MathJax",jax:"SVG",style:{position:"relative"}},D={style:{"vertical-align":"-0.09ex"},xmlns:"http://www.w3.org/2000/svg",width:"9.517ex",height:"2.045ex",role:"img",focusable:"false",viewBox:"0 -864 4206.7 904","aria-hidden":"true"},q=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path></g></g><g data-mml-node="mo" transform="translate(1714.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="msup" transform="translate(2770.1,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mn" transform="translate(3706.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g>',1),B=[q],U=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msup",null,[a("mn",null,"10"),a("mn",null,"9")]),a("mo",null,"<"),a("msup",null,[a("mn",null,"2"),a("mn",null,"3")]),a("mn",null,"2")])],-1),z=a("figure",null,[a("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202102419.png",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),J=a("strong",null,"小数部分",-1),G={class:"MathJax",jax:"SVG",style:{position:"relative"}},F={style:{"vertical-align":"-0.09ex"},xmlns:"http://www.w3.org/2000/svg",width:"9.517ex",height:"2.063ex",role:"img",focusable:"false",viewBox:"0 -871.8 4206.7 911.8","aria-hidden":"true"},P=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mn" transform="translate(1033,393.1) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mo" transform="translate(1714.3,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="msup" transform="translate(2770.1,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(533,363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mn" transform="translate(3706.7,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g>',1),X=[P],Y=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msup",null,[a("mn",null,"10"),a("mn",null,"4")]),a("mo",null,"<"),a("msup",null,[a("mn",null,"2"),a("mn",null,"1")]),a("mn",null,"6")])],-1),K=n('<p>每组中包含的十进制数字位数不同，所需的存储空间也不同，具体见下表：</p><table><thead><tr><th style="text-align:left;">位数</th><th style="text-align:left;">存储空间</th></tr></thead><tbody><tr><td style="text-align:left;">1-2</td><td style="text-align:left;">1 字节</td></tr><tr><td style="text-align:left;">3-4</td><td style="text-align:left;">2 字节</td></tr><tr><td style="text-align:left;">5-6</td><td style="text-align:left;">3 字节</td></tr><tr><td style="text-align:left;">7-9</td><td style="text-align:left;">4 字节</td></tr></tbody></table><p>所以 <code>decimal(16, 4)</code> 共需要占用 8 个字节的存储空间：</p><ul><li>第 1 组包含 3 个十进制，需要 2 个字节；</li><li>第 2 组包含 9 个十进制，需要 4 个字节；</li><li>第 3 组包含 4 个十进制，需要 2 个字节。</li></ul><p>我们拿 1234567890.1234 举例：</p><p>①、整数部分 1234567890，可以分组为 1 和 234567890，分别占用 1 个字节和 4 个字节。</p><p>②、小数部分 1234，可以分组为 1234，占用 2 个字节。</p><p>Java 与 decimal 对应的数据类型是 BigDecimal，常用在金融领域。</p><h2 id="日期和时间类型" tabindex="-1"><a class="header-anchor" href="#日期和时间类型" aria-hidden="true">#</a> 日期和时间类型</h2><p>日期和时间类型包括 year、date、time、datetime、timestamp。</p><ul><li>year 类型用于存储年份，范围是 1901 到 2155，占用 1 个字节。</li><li>date 类型用于存储日期，范围是 1000-01-01 到 9999-12-31，占用 3 个字节。</li><li>time 类型用于存储时间，范围是 <code>-838:59:59[.000000]</code> 到 <code>838:59:59[.000000]</code>，占用 3 字节 + 小数秒的存储空间</li><li>datetime 类型用于存储日期和时间，范围是 <code>1000-01-01 00:00:00[.000000]</code> 到 <code>9999-12-31 23:59:59[.999999]</code>，占用 5字节+小数秒的存储空间。</li><li>timestamp 类型用于存储时间戳，范围是 <code>1970-01-01 00:00:01[.000000]</code> 到 <code>2038-01-19 03:14:07[.999999]</code>，占用 4 字节 + 小数秒的存储空间。</li></ul><p>datetime 和 timestamp 是最常用的两个类型，新手经常会搞混，不知道到底该使用哪一个。</p><ul><li>datetime 是存储的是实际的时间，不会受到时区的影响。适用于需要存储较宽时间范围的日期和时间数据，或者数据不需要考虑时区变化的场景，如出生日期。</li><li>timestamp 是存储的是 UTC（Coordinated Universal Time，一个时间标准）时间，可以根据时区进行转换。特别适合记录数据的创建时间和修改时间等需要考虑时区的场景。</li></ul><p>举例来说，我们把 <code>2024-02-02 11:12:13</code> 存储到 datetime 类型的字段中，那么无论在哪个时区，都是 <code>2024-02-02 11:12:13</code>。</p><p>而 timestamp 要求存储的是时间戳，存储之前，要先计算从 <code>1970-01-01 00:00:00</code> 起到某个时间节点的秒数，比如说 <code>2024-02-02 11:12:13</code> 对应的时间戳是 1706843533000。</p><p>那这个时间戳在 UTC+8（北京时间）时区下，就是 <code>2024-02-02 11:12:13</code>，在 UTC-5（纽约）时区下，就是 <code>2024-02-01 20:12:13</code>，在 UTC+1（伦敦）时区下，就是 <code>2024-02-02 03:12:13</code>。</p><p>在技术派项目中，article 表的 create_time 和 update_time 字段就是 timestamp 类型的。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202114320.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意到 timestamp 类型的字段，还有一个属性 <code>DEFAULT CURRENT_TIMESTAMP</code>，这是设置默认值的，也就是说，如果插入数据的时候没有指定 create_time 和 update_time 的值，那么就会自动填充当前时间。这是 MySQL 5.6 之后的新特性。</p><p><code>ON UPDATE CURRENT_TIMESTAMP</code> 是设置更新时间的，也就是说，如果更新数据的时候没有指定 update_time 的值，那么就会自动填充当前时间。</p><p>通过 <code>select CURRENT_TIMESTAMP</code> 可以查看当前时间。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202115835.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>也就是说，我们在插入数据和更新数据的时候，不需要手动填充 create_time 和 update_time 的值，MySQL 会自动帮我们填充。</p><p>对应的 Java 数据类型是 java.util.Date。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202114424.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>技术派实战项目中用 MyBatis-Plus 作为持久层框架，它扩展了 MyBatis，而 MyBatis 会自动将 timestamp 类型的字段映射为 java.util.Date 类型，由 DateTypeHandler 实现。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202121438.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h2><p>字符串类型包括 char、varchar、tinytext、text、mediumtext、longtext。</p><p>①、char(M)，固定 M 个字符长度，最多 255 个字符，如果省略掉 M，默认为 1。</p>',30),W={href:"https://javabetter.cn/mysql/charset.html",target:"_blank",rel:"noopener noreferrer"},$={href:"https://javabetter.cn/mysql/InnoDB.html",target:"_blank",rel:"noopener noreferrer"},a1=n('<p>下表展示了 <code>char(4)</code> 和 <code>varchar(4)</code> 在单字节字符集（latin1）下的不同。</p><blockquote><p>latin1 是单字节字符集，一个字符占用 1 个字节。</p></blockquote><table><thead><tr><th style="text-align:left;">值</th><th style="text-align:left;">char(4)</th><th style="text-align:left;">存储空间</th><th style="text-align:left;">varchar(4)</th><th style="text-align:left;">存储空间</th></tr></thead><tbody><tr><td style="text-align:left;">&#39;&#39;</td><td style="text-align:left;">&#39; &#39;</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">&#39;&#39;</td><td style="text-align:left;">1 字节</td></tr><tr><td style="text-align:left;">&#39;ab&#39;</td><td style="text-align:left;">&#39;ab &#39;</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">&#39;ab&#39;</td><td style="text-align:left;">3 字节</td></tr><tr><td style="text-align:left;">&#39;abcd&#39;</td><td style="text-align:left;">&#39;abcd&#39;</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">&#39;abcd&#39;</td><td style="text-align:left;">5 字节</td></tr><tr><td style="text-align:left;">&#39;abcde&#39;</td><td style="text-align:left;">&#39;abcd&#39;</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">&#39;abcd&#39;</td><td style="text-align:left;">5 字节</td></tr></tbody></table><p>由此可以看出，char 类型是固定长度的，不足的地方会用空格填充，而 varchar 类型是可变长度的；当超过指定长度时，都会截断。</p><p>也就是说，当我们不确定字段的长度时，应该使用 varchar 类型。这样可以节省一定的存储空间。</p>',5),t1={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},n1=a("figure",null,[a("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202142924.png",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),s1=a("p",null,"③、文本类型，最常用的就是 longtext类型，比如说技术派项目中 article 表的 content 字段就是 longtext 类型的。",-1),e1=a("figure",null,[a("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202123538.png",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),o1=a("p",null,"内容是 markdown 格式的字符，所以 longtext 足够用了，来看一下它们的存储空间：",-1),l1={class:"MathJax",jax:"SVG",style:{position:"relative"}},p1={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.616ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3366.1 915.9","aria-hidden":"true"},i1=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1000,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2866.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1),T1=[i1],c1=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msup",null,[a("mn",null,"2"),a("mrow",{"data-mjx-texclass":"ORD"},[a("mn",null,"8"),a("mo",null,"∗"),a("mn",null,"1")])]),a("mo",null,"−"),a("mn",null,"1")])],-1),d1={class:"MathJax",jax:"SVG",style:{position:"relative"}},r1={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.616ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3366.1 915.9","aria-hidden":"true"},Q1=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1000,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2866.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1),m1=[Q1],u1=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msup",null,[a("mn",null,"2"),a("mrow",{"data-mjx-texclass":"ORD"},[a("mn",null,"8"),a("mo",null,"∗"),a("mn",null,"2")])]),a("mo",null,"−"),a("mn",null,"1")])],-1),g1={class:"MathJax",jax:"SVG",style:{position:"relative"}},h1={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.616ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3366.1 915.9","aria-hidden":"true"},k1=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1000,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2866.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1),f1=[k1],b1=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msup",null,[a("mn",null,"2"),a("mrow",{"data-mjx-texclass":"ORD"},[a("mn",null,"8"),a("mo",null,"∗"),a("mn",null,"3")])]),a("mo",null,"−"),a("mn",null,"1")])],-1),y1={class:"MathJax",jax:"SVG",style:{position:"relative"}},L1={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.616ex",height:"2.09ex",role:"img",focusable:"false",viewBox:"0 -841.7 3366.1 923.7","aria-hidden":"true"},x1=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1000,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2866.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1),_1=[x1],v1=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msup",null,[a("mn",null,"2"),a("mrow",{"data-mjx-texclass":"ORD"},[a("mn",null,"8"),a("mo",null,"∗"),a("mn",null,"4")])]),a("mo",null,"−"),a("mn",null,"1")])],-1),V1=n('<p>那其实除了上面提到的这几种字符类型，还有 enum 和 set 类型。</p><ul><li>enum 类型，用于存储枚举类型，比如说性别字段，只有男和女两种，就可以用 enum 类型。</li><li>set 类型，用于存储集合类型，比如说文章标签字段，可以有多个标签，就可以用 set 类型。</li></ul><p>通过下面这个例子，我们可以看到 enum 和 set 类型的定义方式。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>gender<span class="token punctuation">`</span></span> <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>tags<span class="token punctuation">`</span></span> <span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">&#39;Java&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C++&#39;</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入两条数据，看看结果。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gender<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>tags<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Java,Python&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>test<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gender<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>tags<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Go,C++&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202143308.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',7),w1={href:"https://javabetter.cn/basic-extra-meal/enum.html",target:"_blank",rel:"noopener noreferrer"},M1=n('<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202143728.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样会更加灵活，枚举中的 code 和表中的字段值对应，枚举中的 desc 就可以定义为枚举的描述。</p><p>至于 set，同样可以通过一对多的关系来实现，比如说文章和标签的关系，可以通过一张文章表和一张标签表来实现。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202144024.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这样修改起来会更加容易，比如说哪天 Go 标签想更改为 Golang 标签，我只需要改一下 tag 表就可以了，文章表不需要做任何修改。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202144101.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二进制类型" tabindex="-1"><a class="header-anchor" href="#二进制类型" aria-hidden="true">#</a> 二进制类型</h2><p>二进制类型通常用来存储图片、音频、视频等二进制文件，MySQL 提供了多种二进制类型来满足不同的存储要求，包括 binary、varbinary、tinyblob、blob、mediumblob、longblob。</p><p>binary 和 varbinary 类型适合存储需要精确字节长度的二进制数据，比如说 MD5 值等。</p><ul><li>binary：固定长度的二进制，最多 255 个字节。</li><li>varbinary：可变长度的二进制，最多 65535 个字节。</li></ul><p>blob（Binary Large OBject）类型适合存储大型二进制数据，比如说图片、音频、视频等。</p>',11),H1={class:"MathJax",jax:"SVG",style:{position:"relative"}},Z1={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.616ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3366.1 915.9","aria-hidden":"true"},j1=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1000,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2866.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1),E1=[j1],N1=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msup",null,[a("mn",null,"2"),a("mrow",{"data-mjx-texclass":"ORD"},[a("mn",null,"8"),a("mo",null,"∗"),a("mn",null,"1")])]),a("mo",null,"−"),a("mn",null,"1")])],-1),R1={class:"MathJax",jax:"SVG",style:{position:"relative"}},O1={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.616ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3366.1 915.9","aria-hidden":"true"},C1=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1000,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2866.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1),S1=[C1],I1=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msup",null,[a("mn",null,"2"),a("mrow",{"data-mjx-texclass":"ORD"},[a("mn",null,"8"),a("mo",null,"∗"),a("mn",null,"2")])]),a("mo",null,"−"),a("mn",null,"1")])],-1),A1={class:"MathJax",jax:"SVG",style:{position:"relative"}},D1={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.616ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3366.1 915.9","aria-hidden":"true"},q1=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1000,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2866.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1),B1=[q1],U1=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msup",null,[a("mn",null,"2"),a("mrow",{"data-mjx-texclass":"ORD"},[a("mn",null,"8"),a("mo",null,"∗"),a("mn",null,"3")])]),a("mo",null,"−"),a("mn",null,"1")])],-1),z1={class:"MathJax",jax:"SVG",style:{position:"relative"}},J1={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"7.616ex",height:"2.09ex",role:"img",focusable:"false",viewBox:"0 -841.7 3366.1 923.7","aria-hidden":"true"},G1=n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1000,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2866.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g>',1),F1=[G1],P1=a("mjx-assistive-mml",{unselectable:"on",display:"inline"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("msup",null,[a("mn",null,"2"),a("mrow",{"data-mjx-texclass":"ORD"},[a("mn",null,"8"),a("mo",null,"∗"),a("mn",null,"4")])]),a("mo",null,"−"),a("mn",null,"1")])],-1),X1=a("p",null,"不过在实际工作中，我们很少直接存储二进制文件，而是存储文件的路径，然后通过路径来访问文件。",-1),Y1=a("p",null,"文件本身通过 OSS（Object Storage Service）等对象存储服务来存储，数据库只存储文件的元数据，比如说文件名、文件大小、文件类型等。",-1),K1=a("p",null,"这样做的好处是，可以减少数据库的存储压力，提高数据库的性能，而且还可以实现文件的分布式存储。",-1),W1=a("p",null,"像技术派中的 article 表，就有一个 picture 字段，用来存储文章的封面图片，这个字段是 varchar 类型的，存储的就图片的路径。",-1),$1=a("figure",null,[a("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202151217.png",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1),a3=a("p",null,"关于图片如何上传至 OSS，教程我放到技术派实战教程中，大家可以通过下面的链接获取。",-1),t3={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},n3=n('<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/data-type-20240202151027.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><p>关于 MySQL 的数据类型，这一节我们就先讲到这里，总结一下：</p><ul><li>整数类型包括 tinyint、smallint、mediuint、int、bigint，可以选择有符号和无符号。</li><li>浮点数类型包括 float 和 double，double 的精度更高。</li><li>定点数类型包括 decimal 和 numeric，用于存储货币值等精度要求高的数据。</li><li>日期和时间类型包括 year、date、time、datetime、timestamp，datetime 适用于不需要考虑时区变化的场景，timestamp 适用于需要考虑时区变化的场景。</li><li>字符串类型包括 char、varchar、tinytext、text、mediumtext、longtext，char 是固定长度的，varchar 是可变长度的，文本类型适合存储大型文本数据。</li><li>二进制类型包括 binary、varbinary、tinyblob、blob、mediumblob、longblob，适合存储图片、音频、视频等二进制文件。</li></ul><p>在实际工作中，我们要根据业务需求，选择合适的数据类型，避免浪费存储空间，提高数据库性能。</p><p>另外，还要注意数据库和 Java 数据类型的对应关系，避免出现不兼容的情况。</p><hr>',7),s3={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},e3={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},o3=a("p",null,[t("微信搜 "),a("strong",null,"沉默王二"),t(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),a("strong",null,"222"),t(" 即可免费领取。")],-1),l3=a("figure",null,[a("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),a("figcaption")],-1);function p3(i3,T3){const s=i("ExternalLinkIcon");return o(),l("div",null,[c,a("p",null,[t("上一节，我们学了 "),a("a",d,[t("MySQL 表的基本操作"),e(s)]),t("，知道了表是由不同数据类型的列组成的，然后填充了一行一行的数据。")]),a("p",null,[t("当我们要创建表的时候，就要根据业务需求，选择合适的数据类型。比如说在"),a("a",r,[t("技术派实战项目"),e(s)]),t("当中，文章表就是由下面这些不同数据类型的字段定义的。")]),Q,a("p",null,[t("另外，对于主键的数据类型选择，不同的业务场景有不同的需求，如果需要确保跨多个数据库或者系统唯一性，那么 UUID 或者"),a("a",m,[t("雪花算法"),e(s)]),t("生成的 ID 会更合适。")]),a("p",null,[t("UUID 不依赖于数据库的自增特性，非常适合分布式系统，但是 UUID 会占用更多的存储空间（"),u,t(" 或 "),g,t("），而且不是递增的，会导致"),a("a",h,[t("索引"),e(s)]),t("的性能下降。")]),k,f,b,y,L,a("p",null,[t("我们都知道，Java 中的 "),a("a",x,[t("int 范围"),e(s)]),t("是 -2147483648 到 2147483647。那如果 MySQL 选择的 int 类型是无符号的，范围就超出了 Java 的 int 类型范围了。")]),a("p",null,[t("这时候，为了避免出现不兼容的情况，Java 的数据类型要选择 long 类型。当然了，在数据库实体（POJO）中，要用"),a("a",_,[t("包装类型"),e(s)]),t(" Long。")]),v,a("p",null,[a("a",V,[t("查询一下"),e(s)]),t("，似乎没有什么区别。")]),w,a("blockquote",null,[a("p",null,[t("关于精度，我在《"),a("a",M,[t("二哥的 Java 进阶之路"),e(s)]),t("》上也有讲过。")])]),H,a("p",null,[t("比方说对于十进制小数 123.456，定点数会把它存储为 123 和 456 两部分，而浮点数会把它存储为 "),a("mjx-container",Z,[(o(),l("svg",j,N)),R]),t("。")]),O,a("blockquote",null,[a("p",null,[t("使用 "),a("a",C,[t("binaryconvert"),e(s)]),t(" 可以查看 0.1 在二进制中的表示。")])]),S,a("p",null,[t("①、"),I,t("：有 12 位数字（16-4=12），每组 9 位十进制数字可以被压缩存储在 4 个字节的二进制格式中（因为 "),a("mjx-container",A,[(o(),l("svg",D,B)),U]),t("）。如果整数部分少于 9 位数字，它将占用足够存储该数值的最小字节数。")]),z,a("p",null,[t("②、"),J,t("：有 4 位数字，同样可以通过压缩的二进制格式存储。4 位十进制数字可以压缩到 2 字节内（因为 "),a("mjx-container",G,[(o(),l("svg",F,X)),Y]),t("）。")]),K,a("p",null,[t("②、varchar(M)，可变 M 个字符长度，最多 65535 个字符，但实际上存不了这么多，因为需要额外两个字节来存储长度（字符数小于 255 时使用一个字节），除此之外，还和"),a("a",W,[t("字符集"),e(s)]),t("、"),a("a",$,[t("存储引擎"),e(s)]),t("有关。")]),a1,a("p",null,[t("实际工作中，char 确定也非常少用，"),a("a",t1,[t("技术派实战项目"),e(s)]),t("中基本上用的都是 varchar 类型。")]),n1,s1,e1,o1,a("ul",null,[a("li",null,[t("tinytext，最多 "),a("mjx-container",l1,[(o(),l("svg",p1,T1)),c1]),t(" 个字节。")]),a("li",null,[t("text，最多 "),a("mjx-container",d1,[(o(),l("svg",r1,m1)),u1]),t(" 个字节，相当于 64KB。")]),a("li",null,[t("mediumtext，最多 "),a("mjx-container",g1,[(o(),l("svg",h1,f1)),b1]),t(" 个字节，相当于 16MB。")]),a("li",null,[t("longtext，最多 "),a("mjx-container",y1,[(o(),l("svg",L1,_1)),v1]),t(" 个字节，相当于 4GB。")])]),V1,a("p",null,[t("当然了，这两个类型在实际工作中并不常用，比如说 enum 类型，可以通过 tinyint 配合 Java 中的"),a("a",w1,[t("枚举"),e(s)]),t("类型来实现。")]),M1,a("ul",null,[a("li",null,[t("tinyblob：最多 "),a("mjx-container",H1,[(o(),l("svg",Z1,E1)),N1]),t(" 个字节。")]),a("li",null,[t("blob：最多 "),a("mjx-container",R1,[(o(),l("svg",O1,S1)),I1]),t(" 个字节，相当于 64KB。")]),a("li",null,[t("mediumblob：最多 "),a("mjx-container",A1,[(o(),l("svg",D1,B1)),U1]),t(" 个字节，相当于 16MB。")]),a("li",null,[t("longblob：最多 "),a("mjx-container",z1,[(o(),l("svg",J1,F1)),P1]),t(" 个字节，相当于 4GB。")])]),X1,Y1,K1,W1,$1,a3,a("p",null,[a("a",t3,[t("技术派实战教程"),e(s)])]),n3,a("p",null,[t("GitHub 上标星 10000+ 的开源知识库《"),a("a",s3,[t("二哥的 Java 进阶之路"),e(s)]),t("》第一版 PDF 终于来了！包括Java基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),a("a",e3,[t("太赞了，GitHub 上标星 10000+ 的 Java 教程"),e(s)])]),o3,l3])}const r3=p(T,[["render",p3],["__file","data-type.html.vue"]]);export{r3 as default};
