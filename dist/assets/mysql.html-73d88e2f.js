import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as l,a as e,d as a,b as s,e as t}from"./app-b644cb9d.js";const p={},d={href:"https://mp.weixin.qq.com/s/JFjFs_7xduCmHOegbJ-Gbg",target:"_blank",rel:"noopener noreferrer"},c={href:"https://mp.weixin.qq.com/s/zSTyZ-8CFalwAYSB0PN6wA",target:"_blank",rel:"noopener noreferrer"},u=t('<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-1992b6dd-1c1d-4b8b-b98a-8407e8c51ff9.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>作为 SQL Boy，基础部分不会有人不会吧？面试也不怎么问，基础掌握不错的小伙伴可以<strong>跳过</strong>这一部分。当然，可能会现场写一些 SQL 语句，SQ 语句可以通过牛客、LeetCode、LintCode 之类的网站来练习。</p><h3 id="_1-什么是内连接、外连接、交叉连接、笛卡尔积呢" tabindex="-1"><a class="header-anchor" href="#_1-什么是内连接、外连接、交叉连接、笛卡尔积呢" aria-hidden="true">#</a> 1. 什么是内连接、外连接、交叉连接、笛卡尔积呢？</h3><ul><li>内连接（inner join）：取得两张表中满足存在连接匹配关系的记录。</li><li>外连接（outer join）：不只取得两张表中满足存在连接匹配关系的记录，还包括某张表（或两张表）中不满足匹配关系的记录。</li><li>交叉连接（cross join）：显示两张表所有记录一一对应，没有匹配关系进行筛选，它是笛卡尔积在 SQL 中的实现，如果 A 表有 m 行，B 表有 n 行，那么 A 和 B 交叉连接的结果就有 m*n 行。</li><li>笛卡尔积：是数学中的一个概念，例如集合 A={a,b}，集合 B={0,1,2}，那么 A✖️B=<code>{&lt;a,o&gt;,&lt;a,1&gt;,&lt;a,2&gt;,&lt;b,0&gt;,&lt;b,1&gt;,&lt;b,2&gt;,}</code>。</li></ul><h3 id="_2-mysql-的内连接、左连接、右连接有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-mysql-的内连接、左连接、右连接有什么区别" aria-hidden="true">#</a> 2. MySQL 的内连接、左连接、右连接有什么区别？</h3><p>MySQL 的连接主要分为内连接和外连接，外连接又可以分为左连接和右连接。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-fcdaad5f-c50e-4834-9f9a-0b676cc6be83.jpg" alt="MySQL-joins-来源菜鸟教程" tabindex="0" loading="lazy"><figcaption>MySQL-joins-来源菜鸟教程</figcaption></figure><p>①、<code>inner join</code> 内连接，在两张表进行连接查询时，只保留两张表中完全匹配的结果集。</p><blockquote><p>只有当两个表中都有匹配的记录时，这些记录才会出现在查询结果中。如果某一方没有匹配的记录，则该记录不会出现在结果集中。</p></blockquote><p>内联可以用来找出两个表中共同的记录，相当于两个数据集的交集。</p><p>②、<code>left join</code> 返回左表（FROM 子句中指定的表）的所有记录，以及右表中匹配记录的记录。如果右表中没有匹配的记录，则结果中右表的部分会以 NULL 填充。</p><p>③、<code>right join</code> 刚好与左联相反，返回右表（FROM 子句中指定的表）的所有记录，以及左表中匹配记录的记录。如果左表中没有匹配的记录，则结果中左表的部分会以 NULL 填充。</p>',13),g={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},b=t(`<blockquote><p>我现在有三张表，一张文章表 article（主要存文章标题 title） 一张文章详情表 article_detail （主要存文章的内容 content），一张文章评论表 comment（主要存储评论 content） ，可以通过文章 id 关联。</p></blockquote><p>先来看内联：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ArticleTitle<span class="token punctuation">,</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> CommentContent
<span class="token keyword">FROM</span> article a
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token keyword">comment</span> c <span class="token keyword">ON</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>article_id
<span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240308184454.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个查询返回了至少有一条评论的文章标题和评论内容的前 20 个字符，限制结果为前 2 条记录。</p><p>再来看左联：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ArticleTitle<span class="token punctuation">,</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> CommentContent
<span class="token keyword">FROM</span> article a
<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token keyword">comment</span> c <span class="token keyword">ON</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>article_id
<span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240308184901.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个查询返回所有文章的标题和文章评论的前 20 个字符，即使某些文章没有评论（这些情况下 CommentContent 为 NULL），限制结果为前 2 条记录。</p><p>最后来看右联：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>title<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> ArticleTitle<span class="token punctuation">,</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> CommentContent
<span class="token keyword">FROM</span> <span class="token keyword">comment</span> c
<span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> article a <span class="token keyword">ON</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>article_id
<span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240308185525.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>右联在这种情况下，其实比较别扭，因为可以直接使用左联来实现。</p>`,13),h={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},m=t(`<h3 id="_3-说一下数据库的三大范式" tabindex="-1"><a class="header-anchor" href="#_3-说一下数据库的三大范式" aria-hidden="true">#</a> 3.说一下数据库的三大范式？</h3><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-16e74a6b-a42a-464e-9b10-0252ee7ecc6e.jpg" alt="数据库三范式" tabindex="0" loading="lazy"><figcaption>数据库三范式</figcaption></figure><ul><li>第一范式：数据表中的每一列（每个字段）都不可以再拆分。例如用户表，用户地址还可以拆分成国家、省份、市，这样才是符合第一范式的。</li><li>第二范式：在第一范式的基础上，非主键列完全依赖于主键，而不能是依赖于主键的一部分。例如订单表里，存储了商品信息（商品价格、商品类型），那就需要把商品 ID 和订单 ID 作为联合主键，才满足第二范式。</li><li>第三范式：在满足第二范式的基础上，表中的非主键只依赖于主键，而不依赖于其他非主键。例如订单表，就不能存储用户信息（姓名、地址）。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-5351d57d-1cea-49c8-b6bb-b7d49abb4427.jpg" alt="你设计遵守范式吗？" tabindex="0" loading="lazy"><figcaption>你设计遵守范式吗？</figcaption></figure><p>三大范式的作用是为了控制数据库的冗余，是对空间的节省，实际上，一般互联网公司的设计都是反范式的，通过冗余一些数据，避免跨表跨库，利用空间换时间，提高性能。</p><h3 id="_4-varchar-与-char-的区别" tabindex="-1"><a class="header-anchor" href="#_4-varchar-与-char-的区别" aria-hidden="true">#</a> 4.varchar 与 char 的区别？</h3><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-40f42d59-a295-4543-8a03-43925da4d6d9.jpg" alt="varchar" tabindex="0" loading="lazy"><figcaption>varchar</figcaption></figure><p><strong>char</strong>：</p><ul><li>char 表示定长字符串，长度是固定的；</li><li>如果插入数据的长度小于 char 的固定长度时，则用空格填充；</li><li>因为长度固定，所以存取速度要比 varchar 快很多，甚至能快 50%，但正因为其长度固定，所以会占据多余的空间，是空间换时间的做法；</li><li>对于 char 来说，最多能存放的字符个数为 255，和编码无关</li></ul><p><strong>varchar</strong>：</p><ul><li>varchar 表示可变长字符串，长度是可变的；</li><li>插入的数据是多长，就按照多长来存储；</li><li>varchar 在存取方面与 char 相反，它存取慢，因为长度不固定，但正因如此，不占据多余的空间，是时间换空间的做法；</li><li>对于 varchar 来说，最多能存放的字符个数为 65532</li></ul><p>日常的设计，对于长度相对固定的字符串，可以使用 char，对于长度不确定的，使用 varchar 更合适一些。</p><h3 id="_5-blob-和-text-有什么区别" tabindex="-1"><a class="header-anchor" href="#_5-blob-和-text-有什么区别" aria-hidden="true">#</a> 5.blob 和 text 有什么区别？</h3><ul><li>blob 用于存储二进制数据，而 text 用于存储大字符串。</li><li>blob 没有字符集，text 有一个字符集，并且根据字符集的校对规则对值进行排序和比较</li></ul><h3 id="_6-datetime-和-timestamp-的异同" tabindex="-1"><a class="header-anchor" href="#_6-datetime-和-timestamp-的异同" aria-hidden="true">#</a> 6.DATETIME 和 TIMESTAMP 的异同？</h3><p><strong>相同点</strong>：</p><ol><li>两个数据类型存储时间的表现格式一致。均为 <code>YYYY-MM-DD HH:MM:SS</code></li><li>两个数据类型都包含「日期」和「时间」部分。</li><li>两个数据类型都可以存储微秒的小数秒（秒后 6 位小数秒）</li></ol><p><strong>区别</strong>：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-d94e5e1c-2614-4b8b-acdb-efb333032854.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>DATETIME 和 TIMESTAMP 的区别</p><ol><li><strong>日期范围</strong>：DATETIME 的日期范围是 <code>1000-01-01 00:00:00.000000</code> 到 <code>9999-12-31 23:59:59.999999</code>；TIMESTAMP 的时间范围是<code>1970-01-01 00:00:01.000000</code> UTC <code>到 \`\`2038-01-09 03:14:07.999999</code> UTC</li><li><strong>存储空间</strong>：DATETIME 的存储空间为 8 字节；TIMESTAMP 的存储空间为 4 字节</li><li><strong>时区相关</strong>：DATETIME 存储时间与时区无关；TIMESTAMP 存储时间与时区有关，显示的值也依赖于时区</li><li><strong>默认值</strong>：DATETIME 的默认值为 null；TIMESTAMP 的字段默认不为空(not null)，默认值为当前时间(CURRENT_TIMESTAMP)</li></ol><h3 id="_7-mysql-中-in-和-exists-的区别" tabindex="-1"><a class="header-anchor" href="#_7-mysql-中-in-和-exists-的区别" aria-hidden="true">#</a> 7.MySQL 中 in 和 exists 的区别？</h3><p>MySQL 中的 in 语句是把外表和内表作 hash 连接，而 exists 语句是对外表作 loop 循环，每次 loop 循环再对内表进行查询。我们可能认为 exists 比 in 语句的效率要高，这种说法其实是不准确的，要区分情景：</p><ol><li>如果查询的两个表大小相当，那么用 in 和 exists 差别不大。</li><li>如果两个表中一个较小，一个是大表，则子查询表大的用 exists，子查询表小的用 in。</li><li>not in 和 not exists：如果查询语句使用了 not in，那么内外表都进行全表扫描，没有用到索引；而 not extsts 的子查询依然能用到表上的索引。所以无论那个表大，用 not exists 都比 not in 要快。</li></ol><h3 id="_8-mysql-里记录货币用什么字段类型比较好" tabindex="-1"><a class="header-anchor" href="#_8-mysql-里记录货币用什么字段类型比较好" aria-hidden="true">#</a> 8.MySQL 里记录货币用什么字段类型比较好？</h3><p>货币在数据库中 MySQL 常用 Decimal 和 Numric 类型表示，这两种类型被 MySQL 实现为同样的类型。他们被用于保存与货币有关的数据。</p><p>例如 salary DECIMAL(9,2)，9(precision)代表将被用于存储值的总的小数位数，而 2(scale)代表将被用于存储小数点后的位数。存储在 salary 列中的值的范围是从-9999999.99 到 9999999.99。</p><p>DECIMAL 和 NUMERIC 值作为字符串存储，而不是作为二进制浮点数，以便保存那些值的小数精度。</p><p>之所以不使用 float 或者 double 的原因：因为 float 和 double 是以二进制存储的，所以有一定的误差。</p><h3 id="_9-mysql-怎么存储-emoji😊" tabindex="-1"><a class="header-anchor" href="#_9-mysql-怎么存储-emoji😊" aria-hidden="true">#</a> 9.MySQL 怎么存储 emoji😊?</h3><p>MySQL 可以直接使用字符串存储 emoji。</p><p>但是需要注意的，utf8 编码是不行的，MySQL 中的 utf8 是阉割版的 utf8，它最多只用 3 个字节存储字符，所以存储不了表情。那该怎么办？</p><p>需要使用 utf8mb4 编码。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>alter table blogs modify content text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci not null;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_10-drop、delete-与-truncate-的区别" tabindex="-1"><a class="header-anchor" href="#_10-drop、delete-与-truncate-的区别" aria-hidden="true">#</a> 10.drop、delete 与 truncate 的区别？</h3><p>三者都表示删除，但是三者有一些差别：</p><p>| delete | truncate | drop |<br> | -------- | ---------------------------------------- | ------------------------------ | -------------------------------------------------- |<br> | 类型 | 属于 DML | 属于 DDL | 属于 DDL |<br> | 回滚 | 可回滚 | 不可回滚 | 不可回滚 |<br> | 删除内容 | 表结构还在，删除表的全部或者一部分数据行 | 表结构还在，删除表中的所有数据 | 从数据库中删除表，所有数据行，索引和权限也会被删除 |<br> | 删除速度 | 删除速度慢，需要逐行删除 | 删除速度快 | 删除速度最快 |</p><p>因此，在不再需要一张表的时候，用 drop；在想删除部分数据行时候，用 delete；在保留表而删除所有数据的时候用 truncate。</p><h3 id="_11-union-与-union-all-的区别" tabindex="-1"><a class="header-anchor" href="#_11-union-与-union-all-的区别" aria-hidden="true">#</a> 11.UNION 与 UNION ALL 的区别？</h3><ul><li>如果使用 UNION，会在表链接后筛选掉重复的记录行</li><li>如果使用 UNION ALL，不会合并重复的记录行</li><li>从效率上说，UNION ALL 要比 UNION 快很多，如果合并没有刻意要删除重复行，那么就使用 UNION All</li></ul><h3 id="_12-count-1-、count-与-count-列名-的区别" tabindex="-1"><a class="header-anchor" href="#_12-count-1-、count-与-count-列名-的区别" aria-hidden="true">#</a> 12.count(1)、count(*) 与 count(列名) 的区别？</h3><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-2c754ee2-20c4-4c03-9db0-22c7c9eb7f01.jpg" alt="三种计数方式" tabindex="0" loading="lazy"><figcaption>三种计数方式</figcaption></figure><p><strong>执行效果</strong>：</p><ul><li>count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为 NULL</li><li>count(1)包括了忽略所有列，用 1 代表代码行，在统计结果的时候，不会忽略列值为 NULL</li><li>count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者 0，而是表示 null）的计数，即某个字段值为 NULL 时，不统计。</li></ul><p><strong>执行速度</strong>：</p><ul><li>列名为主键，count(列名)会比 count(1)快</li><li>列名不为主键，count(1)会比 count(列名)快</li><li>如果表多个列并且没有主键，则 count（1） 的执行效率优于 count（*）</li><li>如果有主键，则 select count（主键）的执行效率是最优的</li><li>如果表只有一个字段，则 select count（*）最优。</li></ul><h3 id="_13-一条-sql-查询语句的执行顺序" tabindex="-1"><a class="header-anchor" href="#_13-一条-sql-查询语句的执行顺序" aria-hidden="true">#</a> 13.一条 SQL 查询语句的执行顺序？</h3><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-47ddea92-cf8f-49c4-ab2e-69a829ff1be2.jpg" alt="查询语句执行顺序" tabindex="0" loading="lazy"><figcaption>查询语句执行顺序</figcaption></figure><ol><li><strong>FROM</strong>：对 FROM 子句中的左表&lt;left_table&gt;和右表&lt;right_table&gt;执行笛卡儿积（Cartesianproduct），产生虚拟表 VT1</li><li><strong>ON</strong>：对虚拟表 VT1 应用 ON 筛选，只有那些符合&lt;join_condition&gt;的行才被插入虚拟表 VT2 中</li><li><strong>JOIN</strong>：如果指定了 OUTER JOIN（如 LEFT OUTER JOIN、RIGHT OUTER JOIN），那么保留表中未匹配的行作为外部行添加到虚拟表 VT2 中，产生虚拟表 VT3。如果 FROM 子句包含两个以上表，则对上一个连接生成的结果表 VT3 和下一个表重复执行步骤 1）～步骤 3），直到处理完所有的表为止</li><li><strong>WHERE</strong>：对虚拟表 VT3 应用 WHERE 过滤条件，只有符合&lt;where_condition&gt;的记录才被插入虚拟表 VT4 中</li><li><strong>GROUP BY</strong>：根据 GROUP BY 子句中的列，对 VT4 中的记录进行分组操作，产生 VT5</li><li><strong>CUBE|ROLLUP</strong>：对表 VT5 进行 CUBE 或 ROLLUP 操作，产生表 VT6</li><li><strong>HAVING</strong>：对虚拟表 VT6 应用 HAVING 过滤器，只有符合&lt;having_condition&gt;的记录才被插入虚拟表 VT7 中。</li><li><strong>SELECT</strong>：第二次执行 SELECT 操作，选择指定的列，插入到虚拟表 VT8 中</li><li><strong>DISTINCT</strong>：去除重复数据，产生虚拟表 VT9</li><li><strong>ORDER BY</strong>：将虚拟表 VT9 中的记录按照&lt;order_by_list&gt;进行排序操作，产生虚拟表 VT10。11）</li><li><strong>LIMIT</strong>：取出指定行的记录，产生虚拟表 VT11，并返回给查询用户</li></ol><h3 id="_67-介绍一下-mysql-的常用命令" tabindex="-1"><a class="header-anchor" href="#_67-介绍一下-mysql-的常用命令" aria-hidden="true">#</a> 67.介绍一下 MySQL 的常用命令</h3><blockquote><p>2024 年 03 月 13 日增补，说实话这个问题问的就不是很有水准，可以先向面试官确认一下，“您提到的常用命令是指数据库、表、数据这些增删改查的 SQL 命令吗？”</p></blockquote><p>得到确认答复后可以根据下面这张思维导图作答：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240313093551.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="数据库操作命令" tabindex="-1"><a class="header-anchor" href="#数据库操作命令" aria-hidden="true">#</a> 数据库操作命令</h4><p>①、<strong>创建数据库</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> database_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②、<strong>删除数据库</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> database_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③、<strong>选择数据库</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> database_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="表操作命令" tabindex="-1"><a class="header-anchor" href="#表操作命令" aria-hidden="true">#</a> 表操作命令</h4><p>①、<strong>创建表</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">(</span>
    column1 datatype<span class="token punctuation">,</span>
    column2 datatype<span class="token punctuation">,</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②、<strong>删除表</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③、<strong>显示所有表</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④、<strong>查看表结构</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DESCRIBE</span> table_name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>⑤、<strong>修改表</strong>（添加列）:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> column_name datatype<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="数据操作命令" tabindex="-1"><a class="header-anchor" href="#数据操作命令" aria-hidden="true">#</a> 数据操作命令</h4><p>①、<strong>插入数据</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> table_name <span class="token punctuation">(</span>column1<span class="token punctuation">,</span> column2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②、<strong>查询数据</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> column_names <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③、<strong>更新数据</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> table_name <span class="token keyword">SET</span> column1 <span class="token operator">=</span> value1<span class="token punctuation">,</span> column2 <span class="token operator">=</span> value2 <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④、<strong>删除数据</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="索引和约束" tabindex="-1"><a class="header-anchor" href="#索引和约束" aria-hidden="true">#</a> 索引和约束</h4><p>①、<strong>创建索引</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name <span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②、<strong>添加主键约束</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③、<strong>添加外键约束</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> fk_name <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> parent_table <span class="token punctuation">(</span>parent_column_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="用户和权限管理" tabindex="-1"><a class="header-anchor" href="#用户和权限管理" aria-hidden="true">#</a> 用户和权限管理</h4><p>①、<strong>创建用户</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;username&#39;</span><span class="token variable">@&#39;host&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②、<strong>授予权限</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> database_name<span class="token punctuation">.</span>table_name <span class="token keyword">TO</span> <span class="token string">&#39;username&#39;</span><span class="token variable">@&#39;host&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③、<strong>撤销权限</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> database_name<span class="token punctuation">.</span>table_name <span class="token keyword">FROM</span> <span class="token string">&#39;username&#39;</span><span class="token variable">@&#39;host&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>④、<strong>删除用户</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">&#39;username&#39;</span><span class="token variable">@&#39;host&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="事务控制" tabindex="-1"><a class="header-anchor" href="#事务控制" aria-hidden="true">#</a> 事务控制</h4><p>①、<strong>开始事务</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>②、<strong>提交事务</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>③、<strong>回滚事务</strong>:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,103),f={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},k=e("h3",{id:"_68-介绍一下-mysql-bin-目录下的可执行文件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_68-介绍一下-mysql-bin-目录下的可执行文件","aria-hidden":"true"},"#"),a(" 68.介绍一下 MySQL bin 目录下的可执行文件")],-1),v=e("blockquote",null,[e("p",null,"2024 年 03 月 13 日增补")],-1),y={href:"https://javabetter.cn/mysql/bin.html",target:"_blank",rel:"noopener noreferrer"},_=t('<ul><li>mysql：客户端程序，用于连接 MySQL 服务器</li><li>mysqldump：一个非常实用的 MySQL 数据库备份工具，用于创建一个或多个 MySQL 数据库级别的 SQL 转储文件，包括数据库的表结构和数据。对数据备份、迁移或恢复非常重要。</li><li>mysqladmin：mysql 后面加上 admin 就表明这是一个 MySQL 的管理工具，它可以用来执行一些管理操作，比如说创建数据库、删除数据库、查看 MySQL 服务器的状态等。</li><li>mysqlcheck：mysqlcheck 是 MySQL 提供的一个命令行工具，用于检查、修复、分析和优化数据库表，对数据库的维护和性能优化非常有用。</li><li>mysqlimport：用于从文本文件中导入数据到数据库表中，非常适合用于批量导入数据。</li><li>mysqlshow：用于显示 MySQL 数据库服务器中的数据库、表、列等信息。</li><li>mysqlbinlog：用于查看 MySQL 二进制日志文件的内容，可以用于恢复数据、查看数据变更等。</li></ul><h2 id="数据库架构" tabindex="-1"><a class="header-anchor" href="#数据库架构" aria-hidden="true">#</a> 数据库架构</h2><h3 id="_14-说说-mysql-的基础架构" tabindex="-1"><a class="header-anchor" href="#_14-说说-mysql-的基础架构" aria-hidden="true">#</a> 14.说说 MySQL 的基础架构?</h3><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-77626fdb-d2b0-4256-a483-d1c60e68d8ec.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>MySQL 逻辑架构图主要分三层：</p><ul><li>客户端：最上层的服务并不是 MySQL 所独有的，大多数基于网络的客户端/服务器的工具或者服务都有类似的架构。比如连接处理、授权认证、安全等等。</li><li>Server 层：大多数 MySQL 的核心服务功能都在这一层，包括查询解析、分析、优化、缓存以及所有的内置函数（例如，日期、时间、数学和加密函数），所有跨存储引擎的功能都在这一层实现：存储过程、触发器、视图等。</li><li>存储引擎层：第三层包含了存储引擎。存储引擎负责 MySQL 中数据的存储和提取。Server 层通过 API 与存储引擎进行通信。这些接口屏蔽了不同存储引擎之间的差异，使得这些差异对上层的查询过程透明。</li></ul><h3 id="_15-一条-sql-查询语句在-mysql-中如何执行的" tabindex="-1"><a class="header-anchor" href="#_15-一条-sql-查询语句在-mysql-中如何执行的" aria-hidden="true">#</a> 15.一条 SQL 查询语句在 MySQL 中如何执行的？</h3><ul><li>先检查该语句<code>是否有权限</code>，如果没有权限，直接返回错误信息，如果有权限会先查询缓存 (MySQL8.0 版本以前)。</li><li>如果没有缓存，分析器进行<code>语法分析</code>，提取 sql 语句中 select 等关键元素，然后判断 sql 语句是否有语法错误，比如关键词是否正确等等。</li><li>语法解析之后，MySQL 的服务器会对查询的语句进行优化，确定执行的方案。</li><li>完成查询优化后，按照生成的执行计划<code>调用数据库引擎接口</code>，返回执行结果。</li></ul>',8),x={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},q={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},w=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="存储引擎" tabindex="-1"><a class="header-anchor" href="#存储引擎" aria-hidden="true">#</a> 存储引擎</h2><h3 id="_16-mysql-有哪些常见存储引擎" tabindex="-1"><a class="header-anchor" href="#_16-mysql-有哪些常见存储引擎" aria-hidden="true">#</a> 16.MySQL 有哪些常见存储引擎？</h3><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-db586190-6d1f-49ef-a5b5-496c13e7050d.jpg" alt="主要存储引擎" tabindex="0" loading="lazy"><figcaption>主要存储引擎</figcaption></figure><p>主要存储引擎以及功能如下：</p><table><thead><tr><th>功能</th><th>MylSAM</th><th>MEMORY</th><th>InnoDB</th></tr></thead><tbody><tr><td>存储限制</td><td>256TB</td><td>RAM</td><td>64TB</td></tr><tr><td>支持事务</td><td>No</td><td>No</td><td>Yes</td></tr><tr><td>支持全文索引</td><td>Yes</td><td>No</td><td>Yes</td></tr><tr><td>支持树索引</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>支持哈希索引</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>支持数据缓存</td><td>No</td><td>N/A</td><td>Yes</td></tr><tr><td>支持外键</td><td>No</td><td>No</td><td>Yes</td></tr></tbody></table><p>MySQL5.5 之前，默认存储引擎是 MylSAM，5.5 之后变成了 InnoDB。</p><blockquote><p>InnoDB 支持的哈希索引是自适应的，InnoDB 会根据表的使用情况自动为表生成哈希索引，不能人为干预是否在一张表中生成哈希索引。</p></blockquote><blockquote><p>MySQL 5.6 开始 InnoDB 支持全文索引。</p></blockquote><h3 id="_17-那存储引擎应该怎么选择" tabindex="-1"><a class="header-anchor" href="#_17-那存储引擎应该怎么选择" aria-hidden="true">#</a> 17.那存储引擎应该怎么选择？</h3><p>大致上可以这么选择：</p><ul><li>大多数情况下，使用默认的 InnoDB 就够了。如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 就是比较靠前的选择了。</li><li>如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。</li><li>如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。</li></ul><p>使用哪一种引擎可以根据需要灵活选择，因为存储引擎是基于表的，所以一个数据库中多个表可以使用不同的引擎以满足各种性能和实际需求。使用合适的存储引擎将会提高整个数据库的性能。</p><h3 id="_18-innodb-和-mylsam-主要有什么区别" tabindex="-1"><a class="header-anchor" href="#_18-innodb-和-mylsam-主要有什么区别" aria-hidden="true">#</a> 18.InnoDB 和 MylSAM 主要有什么区别？</h3><p>PS:MySQL8.0 都开始慢慢流行了，如果不是面试，MylSAM 其实可以不用怎么了解。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-b7aa040e-a3a7-4133-8c43-baccc3c8d012.jpg" alt="InnoDB 和 MylSAM 主要有什么区别" tabindex="0" loading="lazy"><figcaption>InnoDB 和 MylSAM 主要有什么区别</figcaption></figure><p><strong>1.   存储结构</strong>：每个 MyISAM 在磁盘上存储成三个文件；InnoDB 所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB。</p><p><strong>2. 事务支持</strong>：MyISAM 不提供事务支持；InnoDB 提供事务支持事务，具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全特性。</p><p><strong>3   最小锁粒度</strong>：MyISAM 只支持表级锁，更新时会锁住整张表，导致其它查询和更新都会被阻塞 InnoDB 支持行级锁。</p><p><strong>4. 索引类型</strong>：MyISAM 的索引为非聚簇索引，数据结构是 B 树；InnoDB 的索引是聚簇索引，数据结构是 B+树。</p><p><strong>5.   主键必需</strong>：MyISAM 允许没有任何索引和主键的表存在；InnoDB 如果没有设定主键或者非空唯一索引，**就会自动生成一个 6 字节的主键(用户不可见)**，数据是主索引的一部分，附加索引保存的是主索引的值。</p><p><strong>6. 表的具体行数</strong>：MyISAM 保存了表的总行数，如果 select count(*) from table;会直接取出出该值; InnoDB 没有保存表的总行数，如果使用 select count(*) from table；就会遍历整个表;但是在加了 wehre 条件后，MyISAM 和 InnoDB 处理的方式都一样。</p><p><strong>7.   外键支持</strong>：MyISAM 不支持外键；InnoDB 支持外键。</p>',24),L={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},j={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},I=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="日志" tabindex="-1"><a class="header-anchor" href="#日志" aria-hidden="true">#</a> 日志</h2><h3 id="_19-mysql-日志文件有哪些-分别介绍下作用" tabindex="-1"><a class="header-anchor" href="#_19-mysql-日志文件有哪些-分别介绍下作用" aria-hidden="true">#</a> 19.MySQL 日志文件有哪些？分别介绍下作用？</h3><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-c0ef6e68-bb33-48fc-b3a2-b9cdadd8e403.jpg" alt="MySQL 主要日志" tabindex="0" loading="lazy"><figcaption>MySQL 主要日志</figcaption></figure><p>MySQL 日志文件有很多，包括 ：</p><ul><li><strong>错误日志</strong>（error log）：错误日志文件对 MySQL 的启动、运行、关闭过程进行了记录，能帮助定位 MySQL 问题。</li><li><strong>慢查询日志</strong>（slow query log）：慢查询日志是用来记录执行时间超过 long_query_time 这个变量定义的时长的查询语句。通过慢查询日志，可以查找出哪些查询语句的执行效率很低，以便进行优化。</li><li><strong>一般查询日志</strong>（general log）：一般查询日志记录了所有对 MySQL 数据库请求的信息，无论请求是否正确执行。</li><li><strong>二进制日志</strong>（bin log）：关于二进制日志，它记录了数据库所有执行的 DDL 和 DML 语句（除了数据查询语句 select、show 等），以事件形式记录并保存在二进制文件中。</li></ul><p>还有两个 InnoDB 存储引擎特有的日志文件：</p><ul><li><strong>重做日志</strong>（redo log）：重做日志至关重要，因为它们记录了对于 InnoDB 存储引擎的事务日志。</li><li><strong>回滚日志</strong>（undo log）：回滚日志同样也是 InnoDB 引擎提供的日志，顾名思义，回滚日志的作用就是对数据进行回滚。当事务对数据库进行修改，InnoDB 引擎不仅会记录 redo log，还会生成对应的 undo log 日志；如果事务执行失败或调用了 rollback，导致事务需要回滚，就可以利用 undo log 中的信息将数据回滚到修改之前的样子。</li></ul><h3 id="_20-binlog-和-redo-log-有什么区别" tabindex="-1"><a class="header-anchor" href="#_20-binlog-和-redo-log-有什么区别" aria-hidden="true">#</a> 20.binlog 和 redo log 有什么区别？</h3><ul><li>bin log 会记录所有与数据库有关的日志记录，包括 InnoDB、MyISAM 等存储引擎的日志，而 redo log 只记 InnoDB 存储引擎的日志。</li><li>记录的内容不同，bin log 记录的是关于一个事务的具体操作内容，即该日志是逻辑日志。而 redo log 记录的是关于每个页（Page）的更改的物理情况。</li><li>写入的时间不同，bin log 仅在事务提交前进行提交，也就是只写磁盘一次。而在事务进行的过程中，却不断有 redo ertry 被写入 redo log 中。</li><li>写入的方式也不相同，redo log 是循环写入和擦除，bin log 是追加写入，不会覆盖已经写的文件。</li></ul><h3 id="_21-一条更新语句怎么执行的了解吗" tabindex="-1"><a class="header-anchor" href="#_21-一条更新语句怎么执行的了解吗" aria-hidden="true">#</a> 21.一条更新语句怎么执行的了解吗？</h3><p>更新语句的执行是 Server 层和引擎层配合完成，数据除了要写入表中，还要记录相应的日志。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-812fb038-39de-4204-ac9f-93d8b7448a18.jpg" alt="update 执行" tabindex="0" loading="lazy"><figcaption>update 执行</figcaption></figure><ol><li>执行器先找引擎获取 ID=2 这一行。ID 是主键，存储引擎检索数据，找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</li></ol><p>从上图可以看出，MySQL 在执行更新语句的时候，在服务层进行语句的解析和执行，在引擎层进行数据的提取和存储；同时在服务层对 binlog 进行写入，在 InnoDB 内进行 redo log 的写入。</p><p>不仅如此，在对 redo log 写入时有两个阶段的提交，一是 binlog 写入之前<code>prepare</code>状态的写入，二是 binlog 写入之后<code>commit</code>状态的写入。</p><h3 id="_22-那为什么要两阶段提交呢" tabindex="-1"><a class="header-anchor" href="#_22-那为什么要两阶段提交呢" aria-hidden="true">#</a> 22.那为什么要两阶段提交呢？</h3><p>为什么要两阶段提交呢？直接提交不行吗？</p><p>我们可以假设不采用两阶段提交的方式，而是采用“单阶段”进行提交，即要么先写入 redo log，后写入 binlog；要么先写入 binlog，后写入 redo log。这两种方式的提交都会导致原先数据库的状态和被恢复后的数据库的状态不一致。</p><p><strong>先写入 redo log，后写入 binlog：</strong></p><p>在写完 redo log 之后，数据此时具有<code>crash-safe</code>能力，因此系统崩溃，数据会恢复成事务开始之前的状态。但是，若在 redo log 写完时候，binlog 写入之前，系统发生了宕机。此时 binlog 没有对上面的更新语句进行保存，导致当使用 binlog 进行数据库的备份或者恢复时，就少了上述的更新语句。从而使得<code>id=2</code>这一行的数据没有被更新。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-75d5226b-cab9-461a-89a9-befcb2dfb996.jpg" alt="先写 redo log，后写 bin log 的问题" tabindex="0" loading="lazy"><figcaption>先写 redo log，后写 bin log 的问题</figcaption></figure><p><strong>先写入 binlog，后写入 redo log：</strong></p><p>写完 binlog 之后，所有的语句都被保存，所以通过 binlog 复制或恢复出来的数据库中 id=2 这一行的数据会被更新为 a=1。但是如果在 redo log 写入之前，系统崩溃，那么 redo log 中记录的这个事务会无效，导致实际数据库中<code>id=2</code>这一行的数据并没有更新。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-869c309b-9b93-46e1-8414-b35128e287a5.jpg" alt="先写 bin log，后写 redo log 的问题" tabindex="0" loading="lazy"><figcaption>先写 bin log，后写 redo log 的问题</figcaption></figure><p>简单说，redo log 和 binlog 都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</p><h3 id="_23-redo-log-怎么刷入磁盘的知道吗" tabindex="-1"><a class="header-anchor" href="#_23-redo-log-怎么刷入磁盘的知道吗" aria-hidden="true">#</a> 23.redo log 怎么刷入磁盘的知道吗？</h3><p>redo log 的写入不是直接落到磁盘，而是在内存中设置了一片称之为<code>redo log buffer</code>的连续内存空间，也就是<code>redo 日志缓冲区</code>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-e1f59341-0695-45db-b759-30db73314e39.jpg" alt="redo log 缓冲" tabindex="0" loading="lazy"><figcaption>redo log 缓冲</figcaption></figure><blockquote><p><strong>什么时候会刷入磁盘？</strong></p></blockquote><p>在如下的一些情况中，log buffer 的数据会刷入磁盘：</p><ul><li>log buffer 空间不足时</li></ul><p>log buffer 的大小是有限的，如果不停的往这个有限大小的 log buffer 里塞入日志，很快它就会被填满。如果当前写入 log buffer 的 redo 日志量已经占满了 log buffer 总容量的大约<strong>一半</strong>左右，就需要把这些日志刷新到磁盘上。</p><ul><li>事务提交时</li></ul><p>在事务提交时，为了保证持久性，会把 log buffer 中的日志全部刷到磁盘。注意，这时候，除了本事务的，可能还会刷入其它事务的日志。</p><ul><li>后台线程输入</li></ul><p>有一个后台线程，大约每秒都会刷新一次<code>log buffer</code>中的<code>redo log</code>到磁盘。</p><ul><li>正常关闭服务器时</li><li><strong>触发 checkpoint 规则</strong></li></ul><p>重做日志缓存、重做日志文件都是以<strong>块（block）<strong>的方式进行保存的，称之为</strong>重做日志块（redo log block）</strong>,块的大小是固定的 512 字节。我们的 redo log 它是固定大小的，可以看作是一个逻辑上的 <strong>log group</strong>，由一定数量的<strong>log block</strong> 组成。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-8d944e76-89ba-4fa6-9066-64ff4f55b532.jpg" alt="redo log 分块和写入" tabindex="0" loading="lazy"><figcaption>redo log 分块和写入</figcaption></figure><p>它的写入方式是从头到尾开始写，写到末尾又回到开头循环写。</p><p>其中有两个标记位置：</p><p><code>write pos</code>是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。<code>checkpoint</code>是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到磁盘。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-31a14149-b261-45d9-bd3b-6afaec16e136.jpg" alt="write pos 和 checkpoint" tabindex="0" loading="lazy"><figcaption>write pos 和 checkpoint</figcaption></figure><p>当<code>write_pos</code>追上<code>checkpoint</code>时，表示 redo log 日志已经写满。这时候就不能接着往里写数据了，需要执行<code>checkpoint</code>规则腾出可写空间。</p><p>所谓的<strong>checkpoint 规则</strong>，就是 checkpoint 触发后，将 buffer 中日志页都刷到磁盘。</p>',47),E={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},M={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="sql-优化" tabindex="-1"><a class="header-anchor" href="#sql-优化" aria-hidden="true">#</a> SQL 优化</h2><h3 id="_24-慢-sql-如何定位呢" tabindex="-1"><a class="header-anchor" href="#_24-慢-sql-如何定位呢" aria-hidden="true">#</a> 24.慢 SQL 如何定位呢？</h3><p>慢 SQL 的监控主要通过两个途径：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-c0c43f82-3930-44f0-9abc-b33b08c02d2d.jpg" alt="发现慢 SQL" tabindex="0" loading="lazy"><figcaption>发现慢 SQL</figcaption></figure><ul><li><strong>慢查询日志</strong>：开启 MySQL 的慢查询日志，再通过一些工具比如 mysqldumpslow 去分析对应的慢查询日志，当然现在一般的云厂商都提供了可视化的平台。</li><li><strong>服务监控</strong>：可以在业务的基建中加入对慢 SQL 的监控，常见的方案有字节码插桩、连接池扩展、ORM 框架过程，对服务运行中的慢 SQL 进行监控和告警。</li></ul><h3 id="_25-有哪些方式优化慢-sql" tabindex="-1"><a class="header-anchor" href="#_25-有哪些方式优化慢-sql" aria-hidden="true">#</a> 25.有哪些方式优化慢 SQL？</h3><p>慢 SQL 的优化，主要从两个方面考虑，SQL 语句本身的优化，以及数据库设计的优化。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-e65e2428-a8f7-4381-9e15-c3e18b4c4d9c.jpg" alt="SQL 优化" tabindex="0" loading="lazy"><figcaption>SQL 优化</figcaption></figure><h4 id="避免不必要的列" tabindex="-1"><a class="header-anchor" href="#避免不必要的列" aria-hidden="true">#</a> 避免不必要的列</h4><p>这个是老生常谈，但还是经常会出的情况，SQL 查询的时候，应该只查询需要的列，而不要包含额外的列，像<code>slect *</code> 这种写法应该尽量避免。</p><h4 id="分页优化" tabindex="-1"><a class="header-anchor" href="#分页优化" aria-hidden="true">#</a> 分页优化</h4><p>在数据量比较大，分页比较深的情况下，需要考虑分页的优化。</p><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from table where type = 2 and level = 9 order by id asc limit 190289,10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>优化方案：</p><ul><li><strong>延迟关联</strong></li></ul><p>先通过 where 条件提取出主键，在将该表与原数据表关联，通过主键 id 提取数据行，而不是通过原来的二级索引提取数据行</p><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select a.* from table a, 
 (select id from table where type = 2 and level = 9 order by id asc limit 190289,10 ) b
 where a.id = b.id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>书签方式</strong></li></ul><p>书签方式就是找到 limit 第一个参数对应的主键值，根据这个主键值再去过滤并 limit</p><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  select * from table where id &gt;
  (select * from table where type = 2 and level = 9 order by id asc limit 190
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="索引优化" tabindex="-1"><a class="header-anchor" href="#索引优化" aria-hidden="true">#</a> 索引优化</h4><p>合理地设计和使用索引，是优化慢 SQL 的利器。</p><p><strong>利用覆盖索引</strong></p><p>InnoDB 使用非主键索引查询数据时会回表，但是如果索引的叶节点中已经包含要查询的字段，那它没有必要再回表查询了，这就叫覆盖索引</p><p>例如对于如下查询：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select name from test where city=&#39;上海&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们将被查询的字段建立到联合索引中，这样查询结果就可以直接从索引中获取</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>alter table test add index idx_city_name (city, name);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>低版本避免使用 or 查询</strong></p><p>在 MySQL 5.0 之前的版本要尽量避免使用 or 查询，可以使用 union 或者子查询来替代，因为早期的 MySQL 版本使用 or 查询可能会导致索引失效，高版本引入了索引合并，解决了这个问题。</p><p><strong>避免使用 != 或者 &lt;&gt; 操作符</strong></p><p>SQL 中，不等于操作符会导致查询引擎放弃查询索引，引起全表扫描，即使比较的字段上有索引</p><p>解决方法：通过把不等于操作符改成 or，可以使用索引，避免全表扫描</p><p>例如，把<code>column&lt;&gt;’aaa’，改成column&gt;’aaa’ or column&lt;’aaa’</code>，就可以使用索引了</p><p><strong>适当使用前缀索引</strong></p><p>适当地使用前缀所云，可以降低索引的空间占用，提高索引的查询效率。</p><p>比如，邮箱的后缀都是固定的“<code>@xxx.com</code>”，那么类似这种后面几位为固定值的字段就非常适合定义为前缀索引</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>alter table test add index index2(email(6));
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>PS:需要注意的是，前缀索引也存在缺点，MySQL 无法利用前缀索引做 order by 和 group by 操作，也无法作为覆盖索引</p><p><strong>避免列上函数运算</strong></p><p>要避免在列字段上进行算术运算或其他表达式运算，否则可能会导致存储引擎无法正确使用索引，从而影响了查询的效率</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select * from test where id + 1 = 50;
select * from test where month(updateTime) = 7;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>正确使用联合索引</strong></p><p>使用联合索引的时候，注意最左匹配原则。</p><h4 id="join-优化" tabindex="-1"><a class="header-anchor" href="#join-优化" aria-hidden="true">#</a> JOIN 优化</h4><p><strong>优化子查询</strong></p><p>尽量使用 Join 语句来替代子查询，因为子查询是嵌套查询，而嵌套查询会新创建一张临时表，而临时表的创建与销毁会占用一定的系统资源以及花费一定的时间，同时对于返回结果集比较大的子查询，其对查询性能的影响更大</p><p><strong>小表驱动大表</strong></p><p>关联查询的时候要拿小表去驱动大表，因为关联的时候，MySQL 内部会遍历驱动表，再去连接被驱动表。</p><p>比如 left join，左表就是驱动表，A 表小于 B 表，建立连接的次数就少，查询速度就被加快了。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> select name from A left join B ;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>适当增加冗余字段</strong></p><p>增加冗余字段可以减少大量的连表查询，因为多张表的连表查询性能很低，所有可以适当的增加冗余字段，以减少多张表的关联查询，这是以空间换时间的优化策略</p><p><strong>避免使用 JOIN 关联太多的表</strong></p><p>《阿里巴巴 Java 开发手册》规定不要 join 超过三张表，第一 join 太多降低查询的速度，第二 join 的 buffer 会占用更多的内存。</p><p>如果不可避免要 join 多张表，可以考虑使用数据异构的方式异构到 ES 中查询。</p><h4 id="排序优化" tabindex="-1"><a class="header-anchor" href="#排序优化" aria-hidden="true">#</a> 排序优化</h4><p><strong>利用索引扫描做排序</strong></p><p>MySQL 有两种方式生成有序结果：其一是对结果集进行排序的操作，其二是按照索引顺序扫描得出的结果自然是有序的</p><p>但是如果索引不能覆盖查询所需列，就不得不每扫描一条记录回表查询一次，这个读操作是随机 IO，通常会比顺序全表扫描还慢</p><p>因此，在设计索引时，尽可能使用同一个索引既满足排序又用于查找行</p><p>例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>--建立索引（date,staff_id,customer_id）
select staff_id, customer_id from test where date = &#39;2010-01-01&#39; order by staff_id,customer_id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>只有当索引的列顺序和 ORDER BY 子句的顺序完全一致，并且所有列的排序方向都一样时，才能够使用索引来对结果做排序</p><h4 id="union-优化" tabindex="-1"><a class="header-anchor" href="#union-优化" aria-hidden="true">#</a> UNION 优化</h4><p><strong>条件下推</strong></p><p>MySQL 处理 union 的策略是先创建临时表，然后将各个查询结果填充到临时表中最后再来做查询，很多优化策略在 union 查询中都会失效，因为它无法利用索引</p><p>最好手工将 where、limit 等子句下推到 union 的各个子查询中，以便优化器可以充分利用这些条件进行优化</p><p>此外，除非确实需要服务器去重，一定要使用 union all，如果不加 all 关键字，MySQL 会给临时表加上 distinct 选项，这会导致对整个临时表做唯一性检查，代价很高。</p><h3 id="_26-怎么看执行计划-explain-如何理解其中各个字段的含义" tabindex="-1"><a class="header-anchor" href="#_26-怎么看执行计划-explain-如何理解其中各个字段的含义" aria-hidden="true">#</a> 26.怎么看执行计划（explain），如何理解其中各个字段的含义？</h3><p>explain 是 sql 优化的利器，除了优化慢 sql，平时的 sql 编写，也应该先 explain，查看一下执行计划，看看是否还有优化的空间。</p><p>直接在 select 语句之前增加<code>explain</code> 关键字，就会返回执行计划的信息。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-77711553-bb7b-4580-968a-4a973e3a31ca.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-e234658f-5672-4a8d-9a75-872b305a171d.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><strong>id</strong> 列：MySQL 会为每个 select 语句分配一个唯一的 id 值</li><li><strong>select_type</strong> 列，查询的类型，根据关联、union、子查询等等分类，常见的查询类型有 SIMPLE、PRIMARY。</li><li><strong>table</strong> 列：表示 explain 的一行正在访问哪个表。</li><li><strong>type</strong> 列：最重要的列之一。表示关联类型或访问类型，即 MySQL 决定如何查找表中的行。</li></ol><p>性能从最优到最差分别为：system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</p><ul><li>system</li></ul><p><code>system</code>：当表仅有一行记录时(系统表)，数据量很少，往往不需要进行磁盘 IO，速度非常快</p><ul><li>const</li></ul><p><code>const</code>：表示查询时命中 <code>primary key</code> 主键或者 <code>unique</code> 唯一索引，或者被连接的部分是一个常量(<code>const</code>)值。这类扫描效率极高，返回数据量少，速度非常快。</p><ul><li>eq_ref</li></ul><p><code>eq_ref</code>：查询时命中主键<code>primary key</code> 或者 <code>unique key</code>索引， <code>type</code> 就是 <code>eq_ref</code>。</p><ul><li>ref_or_null</li></ul><p><code>ref_or_null</code>：这种连接类型类似于 ref，区别在于 <code>MySQL</code>会额外搜索包含<code>NULL</code>值的行。</p><ul><li>index_merge</li></ul><p><code>index_merge</code>：使用了索引合并优化方法，查询使用了两个以上的索引。</p><ul><li>unique_subquery</li></ul><p><code>unique_subquery</code>：替换下面的 <code>IN</code>子查询，子查询返回不重复的集合。</p><ul><li>index_subquery</li></ul><p><code>index_subquery</code>：区别于<code>unique_subquery</code>，用于非唯一索引，可以返回重复值。</p><ul><li>range</li></ul><p><code>range</code>：使用索引选择行，仅检索给定范围内的行。简单点说就是针对一个有索引的字段，给定范围检索数据。在<code>where</code>语句中使用 <code>bettween...and</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>in</code> 等条件查询 <code>type</code> 都是 <code>range</code>。</p><ul><li>index</li></ul><p><code>index</code>：<code>Index</code> 与<code>ALL</code> 其实都是读全表，区别在于<code>index</code>是遍历索引树读取，而<code>ALL</code>是从硬盘中读取。</p><ul><li>ALL</li></ul><p>就不用多说了，全表扫描。</p><ol start="6"><li><strong>possible_keys</strong> 列：显示查询可能使用哪些索引来查找，使用索引优化 sql 的时候比较重要。</li><li><strong>key</strong> 列：这一列显示 mysql 实际采用哪个索引来优化对该表的访问，判断索引是否失效的时候常用。</li><li><strong>key_len</strong> 列：显示了 MySQL 使用</li><li><strong>ref</strong> 列：ref 列展示的就是与索引列作等值匹配的值，常见的有：const（常量），func，NULL，字段名。</li><li><strong>rows</strong> 列：这也是一个重要的字段，MySQL 查询优化器根据统计信息，估算 SQL 要查到结果集需要扫描读取的数据行数，这个值非常直观显示 SQL 的效率好坏，原则上 rows 越少越好。</li><li><strong>Extra</strong> 列：显示不适合在其它列的额外信息，虽然叫额外，但是也有一些重要的信息：</li></ol><ul><li>Using index：表示 MySQL 将使用覆盖索引，以避免回表</li><li>Using where：表示会在存储引擎检索之后再进行过滤</li><li>Using temporary ：表示对查询结果排序时会使用一个临时表。</li></ul>`,103),B={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},A={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h2><p>索引可以说是 MySQL 面试中的重中之重，务必要拿下啊，兄弟姐妹们。</p><h3 id="_27-能简单说一下索引的分类吗" tabindex="-1"><a class="header-anchor" href="#_27-能简单说一下索引的分类吗" aria-hidden="true">#</a> 27.能简单说一下索引的分类吗？</h3><p>好的，可以从三个不同的维度对索引进行分类：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240311225809.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="比如说从功能上分类" tabindex="-1"><a class="header-anchor" href="#比如说从功能上分类" aria-hidden="true">#</a> 比如说从功能上分类：</h4><p>①、<strong>主键索引</strong>: 表中每行数据唯一标识的索引，强调列值的唯一性和非空性。</p><p>当创建表的时候，可以直接指定主键索引：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    username <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>id 列被指定为主键索引，同时，MySQL 会自动为这个列创建一个聚簇索引（主键索引一定是聚簇索引）。</p>`,12),R={href:"https://mp.weixin.qq.com/s/F0cEzIqecF4sWg7ZRmHKRQ",target:"_blank",rel:"noopener noreferrer"},D=t('<p>可以通过 <code>show index from table_name</code> 查看索引信息，比如前面创建的 users 表：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240312090221.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>Non_unique</code> 如果索引不能包含重复词，则为 0；如果可以，则为 1。这可以帮助我们区分是唯一索引还是普通索引。</li><li><code>Key_name</code> 索引的名称。如果索引是主键，那么这个值是 PRIMARY。</li><li><code>Column_name</code> 索引所包含的字段名。</li><li><code>Index_type</code> 索引的类型，比如 BTREE、HASH 等。</li></ul><p>②、<strong>唯一索引</strong>: 保证数据列中每行数据的唯一性，但允许有空值。</p><p>可以通过下面的语句创建唯一索引：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> idx_username <span class="token keyword">ON</span> users<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样可以通过 <code>show index from table_name</code> 确认索引信息：</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240312091008.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>Non_unique</code> 为 0，表示这是一个唯一索引。</p><p>③、<strong>普通索引</strong>: 基本的索引类型，用于加速查询。</p><p>可以通过下面的语句创建普通索引：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_email <span class="token keyword">ON</span> users<span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这次我们通过下面的语句一起把三个索引的关键信息查出来：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token identifier"><span class="token punctuation">`</span>TABLE_NAME<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>Table<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>NON_UNIQUE<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>INDEX_NAME<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>Key_name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>COLUMN_NAME<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>Column_name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>INDEX_TYPE<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>Index_type<span class="token punctuation">`</span></span>\n<span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span><span class="token keyword">statistics</span>\n<span class="token keyword">WHERE</span> <span class="token identifier"><span class="token punctuation">`</span>TABLE_NAME<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token string">&#39;users&#39;</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>TABLE_SCHEMA<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240312091632.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以确定 idx_email 是一个普通索引，因为 <code>Non_unique</code> 为 1。</p><p>④、<strong>全文索引</strong>：特定于文本数据的索引，用于提高文本搜索的效率。</p><p>假设有一个名为 articles 的表，下面这条语句在 content 列上创建了一个全文索引。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> FULLTEXT <span class="token keyword">INDEX</span> idx_article_content <span class="token keyword">ON</span> articles<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="比如说从数据结构上分类" tabindex="-1"><a class="header-anchor" href="#比如说从数据结构上分类" aria-hidden="true">#</a> 比如说从数据结构上分类：</h4><p>①、B+树索引：最常见的索引类型，一种将索引值按照一定的算法，存入一个树形的数据结构中（二叉树），每次查询都从树的根节点开始，一次遍历叶子节点，找到对应的值。查询效率是 O(logN)。</p><p>也是 <strong>InnoDB 存储引擎的默认索引类型</strong>。</p><p>B+ 树是 B 树的升级版，B+ 树中的非叶子节点都不存储数据，只存储索引。叶子节点中存储了所有的数据，并且构成了一个从小到大的有序双向链表，使得在完成一次树的遍历定位到范围查询的起点后，可以直接通过叶子节点间的指针顺序访问整个查询范围内的所有记录，而无需对树进行多次遍历。这在处理大范围的查询时特别高效。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240312092745.png" alt="一颗剽悍的种子：B+树的结构" tabindex="0" loading="lazy"><figcaption>一颗剽悍的种子：B+树的结构</figcaption></figure><p>因为 B+ 树是 InnoDB 的默认索引类型，所以创建 B+ 树的时候不需要指定索引类型。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> example_btree <span class="token punctuation">(</span>\n    id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>\n    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token keyword">INDEX</span> name_index <span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要了解 B 树和 B+树的更多区别，推荐阅读：</p>',27),N={href:"https://github.com/wardseptember/notes/blob/master/docs/B%E6%A0%91%E5%92%8CB+%E6%A0%91%E8%AF%A6%E8%A7%A3.md",target:"_blank",rel:"noopener noreferrer"},O={href:"https://segmentfault.com/a/1190000020416577",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://time.geekbang.org/column/article/112298",target:"_blank",rel:"noopener noreferrer"},C={href:"https://mp.weixin.qq.com/s/muOwXKNTvPjXjrLsFRveIw",target:"_blank",rel:"noopener noreferrer"},z=e("p",null,"②、Hash 索引：基于哈希表的索引，查询效率可以达到 O(1)，但是只适合 = 和 in 查询，不适合范围查询。",-1),J={href:"https://javabetter.cn/collection/hashmap.html",target:"_blank",rel:"noopener noreferrer"},V=t(`<figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240312094537.png" alt="业余码农：哈希索引" tabindex="0" loading="lazy"><figcaption>业余码农：哈希索引</figcaption></figure><p>可以通过下面的语句创建哈希索引：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> example_hash <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">UNIQUE</span> <span class="token keyword">HASH</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>MEMORY<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，我们这里创建的是 MEMORY 存储引擎，InnoDB 并不提供直接创建哈希索引的选项，因为 B+ 树索引能够很好地支持范围查询和等值查询，满足了大多数数据库操作的需要。</p><p>不过，InnoDB 存储引擎内部使用了一种名为“自适应哈希索引”（Adaptive Hash Index, AHI）的技术。</p><p>自适应哈希索引并不是由用户显式创建的，而是 InnoDB 根据数据访问的模式自动建立和管理的。当 InnoDB 发现某个索引被频繁访问时，会在内存中创建一个哈希索引，以加速对这个索引的访问。</p><p>可以通过下面的语句查看自适应哈希索引的状态：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;innodb_adaptive_hash_index&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果返回的值是 ON，说明自适应哈希索引是开启的。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240312095811.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="比如说从存储位置上分类" tabindex="-1"><a class="header-anchor" href="#比如说从存储位置上分类" aria-hidden="true">#</a> 比如说从存储位置上分类：</h4><p>①、聚簇索引：聚簇索引的叶子节点保存了一行记录的所有列信息。也就是说，聚簇索引的叶子节点中，包含了一个完整的记录行。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240311231652.png" alt="代码敲上天.：聚簇索引" tabindex="0" loading="lazy"><figcaption>代码敲上天.：聚簇索引</figcaption></figure><p>②、非聚簇索引：它的叶子节点只包含一个主键值，通过非聚簇索引查找记录要先找到主键，然后通过主键再到聚簇索引中找到对应的记录行，这个过程被称为回表。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240311231611.png" alt="代码敲上天.非聚簇索引，以 age 为索引" tabindex="0" loading="lazy"><figcaption>代码敲上天.非聚簇索引，以 age 为索引</figcaption></figure><p>InnoDB 存储引擎的主键使用的是聚簇索引，MyISAM 存储引擎不管是主键索引，还是二级索引使用的都是非聚簇索引。推荐阅读：</p>`,16),P={href:"https://www.cnblogs.com/vipstone/p/16370305.html",target:"_blank",rel:"noopener noreferrer"},H={href:"https://learnku.com/articles/50096",target:"_blank",rel:"noopener noreferrer"},U={href:"https://blog.csdn.net/m0_52226803/article/details/135494499",target:"_blank",rel:"noopener noreferrer"},F={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},G=t('<h3 id="_28-为什么使用索引会加快查询" tabindex="-1"><a class="header-anchor" href="#_28-为什么使用索引会加快查询" aria-hidden="true">#</a> 28.为什么使用索引会加快查询？</h3><p>数据库存储在磁盘上，磁盘 I/O 是数据库操作中最耗时的部分之一。没有索引时，数据库会进行全表扫描（Sequential Scan），这意味着它必须读取表中的每一行数据来查找匹配的行（时间效率为 O(n)）。当表的数据量非常大时，就会导致大量的磁盘 I/O 操作。</p><p>有了索引，就可以直接跳到索引指示的数据位置，而不必扫描整张表，从而大大减少了磁盘 I/O 操作的次数。</p><p>MySQL 的 InnoDB 存储引擎默认使用 B+ 树来作为索引的数据结构，而 B+ 树的查询效率非常高，时间复杂度为 O(logN)。</p><p>索引文件相较于数据库文件，体积小得多，查到索引之后再映射到数据库记录，查询效率就会高很多。</p><p>就好像我们通过书的目录，去查找对应的章节内容一样。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-6b9c9901-9bf3-46ed-a5c4-c1b781965c1e.jpg" alt="三分恶面渣逆袭：索引加快查询远离" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：索引加快查询远离</figcaption></figure><h3 id="_29-创建索引有哪些注意点" tabindex="-1"><a class="header-anchor" href="#_29-创建索引有哪些注意点" aria-hidden="true">#</a> 29.创建索引有哪些注意点？</h3><p>尽管索引能提高查询性能，但不当的使用也会带来一系列问题。在加索引时需要注意以下几点：</p><p>①、选择合适的列作为索引</p><ul><li>经常作为查询条件（WHERE 子句）、排序条件（ORDER BY 子句）、分组条件（GROUP BY 子句）的列是建立索引的好候选。</li><li>区分度低的字段，例如性别，不要建索引</li><li>频繁更新的字段，不要作为主键或者索引</li><li>不建议用无序的值(例如身份证、UUID )作为索引，当主键具有不确定性，会造成叶子节点频繁分裂，出现磁盘存储的碎片化</li></ul><p>②、避免过多的索引</p><ul><li>每个索引都需要占用额外的磁盘空间。</li><li>更新表（INSERT、UPDATE、DELETE 操作）时，所有的索引都需要被更新。</li><li>维护索引文件需要成本；还会导致页分裂，IO 次数增多。</li></ul><p>③、利用前缀索引和索引列的顺序</p><ul><li>对于字符串类型的列，可以考虑使用前缀索引来减少索引大小。</li><li>在创建复合索引时，应该根据查询条件将最常用作过滤条件的列放在前面。</li></ul>',15),Y={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},X={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},K={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},W=t(`<h3 id="_30-索引哪些情况下会失效呢" tabindex="-1"><a class="header-anchor" href="#_30-索引哪些情况下会失效呢" aria-hidden="true">#</a> 30.索引哪些情况下会失效呢？</h3><ul><li>查询条件包含 or，可能会导致索引失效</li><li>如果字段类型是字符串，where 时一定要用引号括起来，否则会因为隐式类型转换，索引失效</li><li>like 通配符可能会导致索引失效。</li><li>联合索引，查询时的条件列不是联合索引中的第一个列，索引失效。</li><li>在索引列上使用 mysql 的内置函数，索引失效。</li><li>对索引列运算（如，+、-、*、/），索引失效。</li><li>索引字段上使用（!= 或者 &lt; &gt;，not in）时，可能会导致索引失效。</li><li>索引字段上使用 is null， is not null，可能导致索引失效。</li><li>左连接查询或者右连接查询关联的字段编码格式不一样，可能导致索引失效。</li><li>MySQL 优化器估计使用全表扫描要比使用索引快，则不使用索引。</li></ul><p>(A,B,C) 联合索引 <code>select * from tbn where a=? and b in (?,?) and c&gt;?</code> 会走索引吗？</p><blockquote><p>2024 年 03 月 15 日增补。</p></blockquote><p>这个查询会使用到联合索引 <code>(A,B,C)</code>，因为条件是按照索引列 <code>A</code>、<code>B</code>、<code>C</code> 的顺序来的，这是理想的使用场景。</p><ol><li><p>对于 <code>A=?</code>：这个条件是一个精确匹配，MySQL 会使用索引来定位到满足条件 <code>A=?</code> 的记录。</p></li><li><p>对于 <code>B IN (?, ?)</code>：这个条件指定了 <code>B</code> 列可以取两个可能的值。MySQL 会利用索引来查找所有匹配 <code>A=?</code> 且 <code>B</code> 列为这两个值中任意一个的记录。</p></li><li><p>对于 <code>C&gt;?</code>：这个条件是一个范围查询。在已经根据 <code>A</code> 和 <code>B</code> 筛选的基础上，MySQL 会继续利用索引来查找 <code>C</code> 列值大于指定值的记录。</p></li></ol><p>来验证一下。</p><p>第一步，建表。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tbn <span class="token punctuation">(</span>A <span class="token keyword">INT</span><span class="token punctuation">,</span> B <span class="token keyword">INT</span><span class="token punctuation">,</span> C <span class="token keyword">INT</span><span class="token punctuation">,</span> D <span class="token keyword">TEXT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二步，创建索引。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_abc <span class="token keyword">ON</span> tbn <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三步，插入数据。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbn <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;First&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbn <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;Second&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbn <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;Third&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbn <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;Fourth&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbn <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;Fifth&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第四步，执行查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tbn <span class="token keyword">WHERE</span> A<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> B <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">AND</span> C<span class="token operator">&gt;</span><span class="token number">3</span>\\G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240315140807.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从 <code>EXPLAIN</code> 输出结果来看，我们可以得到 MySQL 是如何执行查询的一些关键信息：</p><ul><li><strong>id</strong>: 查询标识符，这里是 <code>1</code>。</li><li><strong>select_type</strong>: 查询的类型，这里是 <code>SIMPLE</code>，表示这是一个简单的查询，没有使用子查询或复杂的联合查询。</li><li><strong>table</strong>: 正在查询的表名，这里是 <code>tbn</code>。</li><li><strong>type</strong>: 查询类型，这里是 <code>range</code>，表示 MySQL 使用了范围查找。这是因为查询条件包含了 <code>&gt;</code> 操作符，使得 MySQL 需要在索引中查找满足范围条件的记录。</li><li><strong>possible_keys</strong>: 可能被用来执行查询的索引，这里是 <code>idx_abc</code>，表示 MySQL 认为 <code>idx_abc</code> 索引可能会用于优化查询。</li><li><strong>key</strong>: 实际用来执行查询的索引，也是 <code>idx_abc</code>，这意味着 MySQL 实际上使用了 <code>idx_abc</code> 联合索引来优化查询。</li><li><strong>key_len</strong>: 使用索引的长度，这里是 <code>15</code> 字节，这提供了关于索引使用情况的一些信息，比如哪些列被用在了索引中。</li><li><strong>ref</strong>: 显示哪些列或常量被用作索引查找的参考。</li><li><strong>rows</strong>: MySQL 估计为了找到结果需要检查的行数，这里是 <code>2</code>。</li><li><strong>filtered</strong>: 表示根据表的条件过滤后，剩余多少百分比的结果，这里是 <code>100.00</code>%，意味着所有扫描的行都会被返回。</li><li><strong>Extra</strong>: 提供了关于查询执行的额外信息。<code>Using index condition</code> 表示 MySQL 使用了索引条件推送（Index Condition Pushdown，ICP），这是 MySQL 的一个优化方式，它允许在索引层面过滤数据，减少访问表数据的需要。</li></ul><p>联合索引 abc，a=1,c=1/b=1,c=1/a=1,c=1,b=1 走不走索引？</p><blockquote><p>2024 年 03 月 19 日增补</p></blockquote><p>我们通过实际的 SQL 来验证一下。</p><p>示例 1（a=1,c=1）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tbn <span class="token keyword">WHERE</span> A<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> C<span class="token operator">=</span><span class="token number">1</span>\\G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240319131120.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>key 是 idx_abc，表明 a=1,c=1 会使用联合索引。但因为缺少了 B 字段的条件，所以 MySQL 可能无法利用索引来直接定位到精确的行，而是使用索引来缩小搜索范围。</p><p>最终，MySQL 需要检查更多的行（rows: 3）来找到满足所有条件的结果集，但总体来说，使用索引明显比全表扫描要高效得多。</p><p>示例 2（b=1,c=1）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tbn <span class="token keyword">WHERE</span> B<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> C<span class="token operator">=</span><span class="token number">1</span>\\G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240319131245.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>key 是 NULL，表明 b=1,c=1 不会使用联合索引。这是因为查询条件中涉及的字段 B 和 C 没有遵循之前定义的联合索引 idx_abc（A、B、C 顺序）的最左前缀原则。</p><p>在 idx_abc 索引中，A 是最左边的列，但是查询没有包含 A，因此 MySQL 无法利用这个索引。</p><p>示例 3（a=1,c=1,b=1）：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tbn <span class="token keyword">WHERE</span> A<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> C<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> B<span class="token operator">=</span><span class="token number">1</span>\\G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240319131306.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>key 是 idx_abc，表明 a=1,c=1,b=1 会使用联合索引。</p><p>并且 rows=1，因为查询条件包含了联合索引 idx_abc 中所有列的等值条件，并且条件的顺序与索引列的顺序相匹配，使得查询能够准确、快速地定位到目标数据。</p>`,36),Z={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},$=e("code",null,"select * from tbn where a=? and b in (?,?) and c>?",-1),ee={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},ae=t('<h3 id="_31-索引不适合哪些场景呢" tabindex="-1"><a class="header-anchor" href="#_31-索引不适合哪些场景呢" aria-hidden="true">#</a> 31.索引不适合哪些场景呢？</h3><ul><li>数据量比较少的表不适合加索引</li><li>更新比较频繁的字段也不适合加索引</li><li>离散低的字段不适合加索引（如性别）</li></ul><h3 id="_32-索引是不是建的越多越好呢" tabindex="-1"><a class="header-anchor" href="#_32-索引是不是建的越多越好呢" aria-hidden="true">#</a> 32.索引是不是建的越多越好呢？</h3><p>当然不是。</p><ul><li><strong>索引会占据磁盘空间</strong></li><li><strong>索引虽然会提高查询效率，但是会降低更新表的效率</strong>。比如每次对表进行增删改操作，MySQL 不仅要保存数据，还有保存或者更新对应的索引文件。</li></ul><h3 id="_33-mysql-索引用的什么数据结构了解吗" tabindex="-1"><a class="header-anchor" href="#_33-mysql-索引用的什么数据结构了解吗" aria-hidden="true">#</a> 33.MySQL 索引用的什么数据结构了解吗？</h3>',6),ne={href:"https://www.bilibili.com/video/BV1mY4y1W7pS",target:"_blank",rel:"noopener noreferrer"},se={href:"https://cloud.tencent.com/developer/article/1543335",target:"_blank",rel:"noopener noreferrer"},te=t('<p>MySQL 的默认存储引擎是 InnoDB，它采用的是 B+树索引，换句话说，InnoDB 的索引是基于 B+树实现的。</p><p>那在说 B+树之前，我先说一下 B 树（B-tree）。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240322114522.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>B 树是一种自平衡的多路查找树，和红黑树、二叉平衡树不同，B 树的每个节点可以有 m 个子节点，而红黑树和二叉平衡树都只有 2 个。</p><p>换句话说，红黑树、二叉平衡树是细高个，而 B 树是矮胖子。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240322132606.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>好，继续。内存和磁盘在进行 IO 读写的时候，有一个最小的逻辑单元，叫做页（Page），页的大小一般是 4KB。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240322133650.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那为了提高读写效率，从磁盘往内存中读数据的时候，一次会读取至少一页的数据，比如说读取 2KB 的数据，实际上会读取 4KB 的数据；读取 5KB 的数据，实际上会读取 8KB 的数据。<strong>我们要尽量减少读写的次数</strong>。</p><p>因为读的次数越多，效率就越低。就好比我们在工地上搬砖，一次搬 10 块砖肯定比一次搬 1 块砖的效率要高，反正我每次都搬 10 块（😁）。</p><p>对于红黑树、二叉平衡树这种细高个来说，每次搬的砖少，因为力气不够嘛，那来回跑的次数就越多。</p><p>是这个道理吧，树越高，意味着查找数据时就需要更多的磁盘 IO，因为每一层都可能需要从磁盘加载新的节点。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240322140825.png" alt="用户1260737：二叉树" tabindex="0" loading="lazy"><figcaption>用户1260737：二叉树</figcaption></figure><p>B 树的节点大小通常与页的大小对齐，这样每次从磁盘加载一个节点时，可以正好是一个页的大小。因为 B 树的节点可以有多个子节点，可以填充更多的信息以达到一页的大小。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240322141957.png" alt="用户1260737：B 树" tabindex="0" loading="lazy"><figcaption>用户1260737：B 树</figcaption></figure><p>B 树的一个节点通常包括三个部分：</p><ul><li>键值：即表中的主键</li><li>指针：存储子节点的信息</li><li>数据：表记录中除主键外的数据</li></ul><p>不过，正所谓“祸兮福所倚，福兮祸所伏”，正是因为 B 树的每个节点上都存了数据，就导致每个节点能存储的键值和指针变少了，因为每一页的大小是固定的，对吧？</p><p>于是 B+树就来了，B+树的非叶子节点只存储键值，不存储数据，而叶子节点存储了所有的数据，并且构成了一个有序链表。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240322142950.png" alt="用户1260737：B+树" tabindex="0" loading="lazy"><figcaption>用户1260737：B+树</figcaption></figure><p>这样做的好处是，非叶子节点上由于没有存储数据，就可以存储更多的键值对，树就变得更加矮胖了，于是就更有劲了，每次搬的砖也就更多了（😂）。</p><p>由此一来，查找数据进行的磁盘 IO 就更少了，查询的效率也就更高了。</p><p>再加上叶子节点构成了一个有序链表，范围查询时就可以直接通过叶子节点间的指针顺序访问整个查询范围内的所有记录，而无需对树进行多次遍历。</p><p>注：在 InnoDB 存储引擎中，默认的页大小是 16KB。可以通过 <code>show variables like &#39;innodb_page_size&#39;;</code> 查看。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240322135441.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',25),oe={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},ie={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},re=e("h3",{id:"_34-那一棵-b-树能存储多少条数据呢",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_34-那一棵-b-树能存储多少条数据呢","aria-hidden":"true"},"#"),a(" 34.那一棵 B+树能存储多少条数据呢？")],-1),le={href:"https://juejin.cn/post/6904293886626103309",target:"_blank",rel:"noopener noreferrer"},pe=e("figure",null,[e("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-16f3523d-20b0-4376-908d-ac40b329768f.jpg",alt:"三分恶面渣逆袭：B+树存储数据条数",tabindex:"0",loading:"lazy"}),e("figcaption",null,"三分恶面渣逆袭：B+树存储数据条数")],-1),de=e("p",null,"假如我们的主键 ID 是 bigint 类型，长度为 8 个字节。指针大小在 InnoDB 源码中设置为 6 字节，这样一共 14 字节。所以非叶子节点(一页)可以存储 16384/14=1170 个这样的单元(键值+指针)。",-1),ce=e("p",null,[a("一个指针指向一个存放记录的页，一页可以放 16 条数据，树深度为 2 的时候，可以存放 1170*16="),e("strong",null,"18720"),a(" 条数据。")],-1),ue=e("p",null,[a("同理，树深度为 3 的时候，可以存储的数据为 1170*1170*16="),e("strong",null,"21902400"),a("条记录。")],-1),ge=e("p",null,"理论上，在 InnoDB 存储引擎中，B+树的高度一般为 2-4 层，就可以满足千万级数据的存储。查找数据的时候，一次页的查找代表一次 IO，当我们通过主键索引查询的时候，最多只需要 2-4 次 IO 就可以了。",-1),be={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},he=t('<h3 id="_35-为什么要用-b-树-而不用普通二叉树" tabindex="-1"><a class="header-anchor" href="#_35-为什么要用-b-树-而不用普通二叉树" aria-hidden="true">#</a> 35.为什么要用 B+ 树，而不用普通二叉树？</h3><p>可以从几个维度去看这个问题，查询是否够快，效率是否稳定，存储数据多少，以及查找磁盘次数。</p><p><strong>为什么不用普通二叉树？</strong></p><p>普通二叉树存在退化的情况，如果它退化成链表，相当于全表扫描。平衡二叉树相比于二叉查找树来说，查找效率更稳定，总体的查找速度也更快。</p><p><strong>为什么不用平衡二叉树呢？</strong></p><p>读取数据的时候，是从磁盘读到内存。如果树这种数据结构作为索引，那每查找一次数据就需要从磁盘中读取一个节点，也就是一个磁盘块，但是平衡二叉树可是每个节点只存储一个键值和数据的，如果是 B+ 树，可以存储更多的节点数据，树的高度也会降低，因此读取磁盘的次数就降下来啦，查询效率就快。</p><h3 id="_36-为什么用-b-树而不用-b-树呢" tabindex="-1"><a class="header-anchor" href="#_36-为什么用-b-树而不用-b-树呢" aria-hidden="true">#</a> 36.为什么用 B+ 树而不用 B 树呢？</h3><p>B+相比较 B 树，有这些优势：</p><ul><li>它是 B Tree 的变种，B Tree 能解决的问题，它都能解决。</li></ul><p>B Tree 解决的两大问题：每个节点存储更多关键字；路数更多</p><ul><li>扫库、扫表能力更强</li></ul><p>如果我们要对表进行全表扫描，只需要遍历叶子节点就可以 了，不需要遍历整棵 B+Tree 拿到所有的数据。</p><ul><li>B+Tree 的磁盘读写能力相对于 B Tree 来说更强，IO 次数更少</li></ul><p>根节点和枝节点不保存数据区， 所以一个节点可以保存更多的关键字，一次磁盘加载的关键字更多，IO 次数更少。</p><ul><li>排序能力更强</li></ul><p>因为叶子节点上有下一个数据区的指针，数据形成了链表。</p><ul><li>效率更加稳定</li></ul><p>B+Tree 永远是在叶子节点拿到数据，所以 IO 次数是稳定的。</p><h3 id="_37-hash-索引和-b-树索引区别是什么" tabindex="-1"><a class="header-anchor" href="#_37-hash-索引和-b-树索引区别是什么" aria-hidden="true">#</a> 37.Hash 索引和 B+ 树索引区别是什么？</h3><ul><li>B+ 树可以进行范围查询，Hash 索引不能。</li><li>B+ 树支持联合索引的最左侧原则，Hash 索引不支持。</li><li>B+ 树支持 order by 排序，Hash 索引不支持。</li><li>Hash 索引在等值查询上比 B+ 树效率更高。</li><li>B+ 树使用 like 进行模糊查询的时候，like 后面（比如 % 开头）的话可以起到优化的作用，Hash 索引根本无法进行模糊查询。</li></ul><h3 id="_38-聚簇索引与非聚簇索引的区别" tabindex="-1"><a class="header-anchor" href="#_38-聚簇索引与非聚簇索引的区别" aria-hidden="true">#</a> 38.聚簇索引与非聚簇索引的区别？</h3><p>聚簇索引不是一种新的索引，而是一种<strong>数据存储方式</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-692cced2-615a-4b70-a933-69771d53e809.jpg" alt="三分恶面渣逆袭：聚簇索引和非聚簇索引" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：聚簇索引和非聚簇索引</figcaption></figure><p>在聚簇索引中，表中行的物理顺序与键值的逻辑（索引）顺序相同。换句话说，聚簇索引将数据存储与索引部分结合在了一起。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240323160412.png" alt="磊哥：聚簇索引" tabindex="0" loading="lazy"><figcaption>磊哥：聚簇索引</figcaption></figure><p>在非聚簇索引中，索引结构与数据实际存储分离。非聚簇索引的叶子节点不直接包含数据记录，而是包含了指向数据行的指针。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20240323160450.png" alt="磊哥：非聚簇索引" tabindex="0" loading="lazy"><figcaption>磊哥：非聚簇索引</figcaption></figure><p>在非聚簇索引的叶子节点上存储的并不是真正的行数据，而是主键 ID，所以当我们使用非聚簇索引进行查询时，首先会得到一个主键 ID，然后再使用主键 ID 去聚簇索引上找到真正的行数据，我们把这个过程称之为回表查询。</p><p>MyISAM 采用的是非聚簇索引，InnoDB 采用的是聚簇索引。</p><p>可以这么说：</p><ul><li>聚簇索引直接将数据存储在 B+树的叶子节点中，而非聚簇索引的叶子节点存储的是指向数据行的指针。</li><li>一个表只能有一个聚簇索引，但可以有多个非聚簇索引。</li><li>聚簇索引改善了顺序访问的性能，但更新主键的成本较高；非聚簇索引适合快速插入和更新操作，但检索数据可能需要更多的磁盘 I/O。</li></ul>',31),me={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},fe=t(`<h3 id="_39-回表了解吗" tabindex="-1"><a class="header-anchor" href="#_39-回表了解吗" aria-hidden="true">#</a> 39.回表了解吗？</h3><p>在 InnoDB 存储引擎里，利用辅助索引查询，先通过辅助索引找到主键索引的键值，再通过主键值查出主键索引里面没有符合要求的数据，它比基于主键索引的查询多扫描了一棵索引树，这个过程就叫回表。</p><p>例如:<code>select \\* from user where name = ‘张三’;</code></p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-7d69e289-dc05-47e1-9308-20a8278ebf2e.jpg" alt="InnoDB 回表" tabindex="0" loading="lazy"><figcaption>InnoDB 回表</figcaption></figure><h3 id="_40-覆盖索引了解吗" tabindex="-1"><a class="header-anchor" href="#_40-覆盖索引了解吗" aria-hidden="true">#</a> 40.覆盖索引了解吗？</h3><p>在辅助索引里面，不管是单列索引还是联合索引，如果 select 的数据列只用辅助索引中就能够取得，不用去查主键索引，这时候使用的索引就叫做覆盖索引，避免了回表。</p><p>比如，<code>select name from user where name = ‘张三’;</code></p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-69e33c61-34bc-4f4b-912b-ca7beb9d5c7c.jpg" alt="覆盖索引" tabindex="0" loading="lazy"><figcaption>覆盖索引</figcaption></figure><h3 id="_41-什么是最左前缀原则-最左匹配原则" tabindex="-1"><a class="header-anchor" href="#_41-什么是最左前缀原则-最左匹配原则" aria-hidden="true">#</a> 41.什么是最左前缀原则/最左匹配原则？</h3><p>注意：最左前缀原则、最左匹配原则、最左前缀匹配原则这三个都是一个概念。</p><p><strong>最左匹配原则</strong>：在 InnoDB 的联合索引中，查询的时候只有匹配了前一个/左边的值之后，才能匹配下一个。</p><p>根据最左匹配原则，我们创建了一个组合索引，如 (a1,a2,a3)，相当于创建了（a1）、(a1,a2)和 (a1,a2,a3) 三个索引。</p><p>为什么不从最左开始查，就无法匹配呢？</p><p>比如有一个 user 表，我们给 name 和 age 建立了一个组合索引。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ALTER TABLE user add INDEX comidx_name_phone (name,age);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>组合索引在 B+Tree 中是复合的数据结构，它是按照从左到右的顺序来建立搜索树的 (name 在左边，age 在右边)。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-e348203c-f00a-42a4-a745-b219d98ea435.jpg" alt="组合索引" tabindex="0" loading="lazy"><figcaption>组合索引</figcaption></figure><p>从这张图可以看出来，name 是有序的，age 是无序的。当 name 相等的时候， age 才是有序的。</p><p>这个时候我们使用 <code>where name= ‘张三‘ and age = ‘20 ‘</code>去查询数据的时候， B+Tree 会优先比较 name 来确定下一步应该搜索的方向，往左还是往右。如果 name 相同的时候再比较 age。但是如果查询条件没有 name，就不知道下一步应该查哪个 节点，因为建立搜索树的时候 name 是第一个比较因子，所以就没用上索引。</p><h3 id="_42-什么是索引下推优化" tabindex="-1"><a class="header-anchor" href="#_42-什么是索引下推优化" aria-hidden="true">#</a> 42.什么是索引下推优化？</h3><p>索引条件下推优化<code>（Index Condition Pushdown (ICP) ）</code>是 MySQL5.6 添加的，用于优化数据查询。</p><ul><li>不使用索引条件下推优化时存储引擎通过索引检索到数据，然后返回给 MySQL Server，MySQL Server 进行过滤条件的判断。</li><li>当使用索引条件下推优化时，如果存在某些被索引的列的判断条件时，MySQL Server 将这一部分判断条件<strong>下推</strong>给存储引擎，然后由存储引擎通过判断索引是否符合 MySQL Server 传递的条件，只有当索引符合条件时才会将数据检索出来返回给 MySQL 服务器。</li></ul><p>例如一张表，建了一个联合索引（name, age），查询语句：<code>select * from t_user where name like &#39;张%&#39; and age=10;</code>，由于<code>name</code>使用了范围查询，根据最左匹配原则：</p><p>不使用 ICP，引擎层查找到<code>name like &#39;张%&#39;</code>的数据，再由 Server 层去过滤<code>age=10</code>这个条件，这样一来，就回表了两次，浪费了联合索引的另外一个字段<code>age</code>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-c58f59e0-850b-4dfd-8129-2dfc51cf4768.jpg" alt="没有使用 ICP" tabindex="0" loading="lazy"><figcaption>没有使用 ICP</figcaption></figure><p>但是，使用了索引下推优化，把 where 的条件放到了引擎层执行，直接根据<code>name like &#39;张%&#39; and age=10</code>的条件进行过滤，减少了回表的次数。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-a8525cf3-2d16-49a9-a7da-a19762ed16df.jpg" alt="使用 ICP" tabindex="0" loading="lazy"><figcaption>使用 ICP</figcaption></figure><p>索引条件下推优化可以减少存储引擎查询基础表的次数，也可以减少 MySQL 服务器从存储引擎接收数据的次数。</p>`,28),ke={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},ve={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},ye=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h2><h3 id="_43-mysql-中有哪几种锁-列举一下" tabindex="-1"><a class="header-anchor" href="#_43-mysql-中有哪几种锁-列举一下" aria-hidden="true">#</a> 43.MySQL 中有哪几种锁，列举一下？</h3><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-a07e4525-ccc1-4287-aec5-ebf3f277857c.jpg" alt="MySQL 中的锁" tabindex="0" loading="lazy"><figcaption>MySQL 中的锁</figcaption></figure><p>如果按锁粒度划分，有以下 3 种：</p><ul><li>表锁：开销小，加锁快；锁定力度大，发生锁冲突概率高，并发度最低;不会出现死锁。</li><li>行锁：开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。</li><li>页锁：开销和加锁速度介于表锁和行锁之间；会出现死锁；锁定粒度介于表锁和行锁之间，并发度一般</li></ul><p>如果按照兼容性，有两种，</p><ul><li>共享锁（S Lock）,也叫读锁（read lock），相互不阻塞。</li><li>排他锁（X Lock），也叫写锁（write lock），排它锁是阻塞的，在一定时间内，只有一个请求能执行写入，并阻止其它锁读取正在写入的数据。</li></ul><h3 id="_44-说说-innodb-里的行锁实现" tabindex="-1"><a class="header-anchor" href="#_44-说说-innodb-里的行锁实现" aria-hidden="true">#</a> 44.说说 InnoDB 里的行锁实现?</h3><p>我们拿这么一个用户表来表示行级锁，其中插入了 4 行数据，主键值分别是 1,6,8,12，现在简化它的聚簇索引结构，只保留数据记录。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-013afdbe-889b-4ed0-ae68-c8c9882570d9.jpg" alt="简化的主键索引" tabindex="0" loading="lazy"><figcaption>简化的主键索引</figcaption></figure><p>InnoDB 的行锁的主要实现如下：</p><ul><li><strong>Record Lock 记录锁</strong></li></ul><p>记录锁就是直接锁定某行记录。当我们使用唯一性的索引(包括唯一索引和聚簇索引)进行等值查询且精准匹配到一条记录时，此时就会直接将这条记录锁定。例如<code>select * from t where id =6 for update;</code>就会将<code>id=6</code>的记录锁定。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-8989ac27-e442-4c14-81ad-6bc133d78bfd.jpg" alt="记录锁" tabindex="0" loading="lazy"><figcaption>记录锁</figcaption></figure><ul><li><strong>Gap Lock 间隙锁</strong></li></ul><p>间隙锁(Gap Locks) 的间隙指的是两个记录之间逻辑上尚未填入数据的部分,是一个<strong>左开右开空间</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-d60f3a42-4b0f-4612-b7ad-65191fecb852.jpg" alt="间隙锁" tabindex="0" loading="lazy"><figcaption>间隙锁</figcaption></figure><p>间隙锁就是锁定某些间隙区间的。当我们使用用等值查询或者范围查询，并且没有命中任何一个<code>record</code>，此时就会将对应的间隙区间锁定。例如<code>select * from t where id =3 for update;</code>或者<code>select * from t where id &gt; 1 and id &lt; 6 for update;</code>就会将(1,6)区间锁定。</p><ul><li><strong>Next-key Lock 临键锁</strong></li></ul><p>临键指的是间隙加上它右边的记录组成的<strong>左开右闭区间</strong>。比如上述的(1,6]、(6,8]等。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-ae8a21cc-8b52-467d-9173-4e01b24e04b9.jpg" alt="临键锁" tabindex="0" loading="lazy"><figcaption>临键锁</figcaption></figure><p>临键锁就是记录锁(Record Locks)和间隙锁(Gap Locks)的结合，即除了锁住记录本身，还要再锁住索引之间的间隙。当我们使用范围查询，并且命中了部分<code>record</code>记录，此时锁住的就是临键区间。注意，临键锁锁住的区间会包含最后一个 record 的右边的临键区间。例如<code>select * from t where id &gt; 5 and id &lt;= 7 for update;</code>会锁住(4,7]、(7,+∞)。mysql 默认行锁类型就是<code>临键锁(Next-Key Locks)</code>。当使用唯一性索引，等值查询匹配到一条记录的时候，临键锁(Next-Key Locks)会退化成记录锁；没有匹配到任何记录的时候，退化成间隙锁。</p><blockquote><p><code>间隙锁(Gap Locks)</code>和<code>临键锁(Next-Key Locks)</code>都是用来解决幻读问题的，在<code>已提交读（READ COMMITTED）</code>隔离级别下，<code>间隙锁(Gap Locks)</code>和<code>临键锁(Next-Key Locks)</code>都会失效！</p></blockquote><p>上面是行锁的三种实现算法，除此之外，在行上还存在插入意向锁。</p><ul><li><strong>Insert Intention Lock 插入意向锁</strong></li></ul><p>一个事务在插入一条记录时需要判断一下插入位置是不是被别的事务加了意向锁 ，如果有的话，插入操作需要等待，直到拥有 gap 锁 的那个事务提交。但是事务在等待的时候也需要在内存中生成一个 锁结构 ，表明有事务想在某个 间隙 中插入新记录，但是现在在等待。这种类型的锁命名为 Insert Intention Locks ，也就是插入意向锁 。</p><p>假如我们有个 T1 事务，给(1,6)区间加上了意向锁，现在有个 T2 事务，要插入一个数据，id 为 4，它会获取一个（1,6）区间的插入意向锁，又有有个 T3 事务，想要插入一个数据，id 为 3，它也会获取一个（1,6）区间的插入意向锁，但是，这两个插入意向锁锁不会互斥。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-751425cb-daba-4da1-bab6-f843254cad3d.jpg" alt="插入意向锁" tabindex="0" loading="lazy"><figcaption>插入意向锁</figcaption></figure><h3 id="_45-意向锁是什么知道吗" tabindex="-1"><a class="header-anchor" href="#_45-意向锁是什么知道吗" aria-hidden="true">#</a> 45.意向锁是什么知道吗？</h3><p>意向锁是一个表级锁，不要和插入意向锁搞混。</p><p>意向锁的出现是为了支持 InnoDB 的多粒度锁，它解决的是表锁和行锁共存的问题。</p><p>当我们需要给一个表加表锁的时候，我们需要根据去判断表中有没有数据行被锁定，以确定是否能加成功。</p><p>假如没有意向锁，那么我们就得遍历表中所有数据行来判断有没有行锁；</p><p>有了意向锁这个表级锁之后，则我们直接判断一次就知道表中是否有数据行被锁定了。</p><p>有了意向锁之后，要执行的事务 A 在申请行锁（写锁）之前，数据库会自动先给事务 A 申请表的意向排他锁。当事务 B 去申请表的互斥锁时就会失败，因为表上有意向排他锁之后事务 B 申请表的互斥锁时会被阻塞。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-31f7f49c-1e5a-4d42-b8b3-e022b3ba82ae.jpg" alt="意向锁" tabindex="0" loading="lazy"><figcaption>意向锁</figcaption></figure><h3 id="_46-mysql-的乐观锁和悲观锁了解吗" tabindex="-1"><a class="header-anchor" href="#_46-mysql-的乐观锁和悲观锁了解吗" aria-hidden="true">#</a> 46.MySQL 的乐观锁和悲观锁了解吗？</h3><ul><li><strong>悲观锁</strong>（Pessimistic Concurrency Control）：</li></ul><p>悲观锁认为被它保护的数据是极其不安全的，每时每刻都有可能被改动，一个事务拿到悲观锁后，其他任何事务都不能对该数据进行修改，只能等待锁被释放才可以执行。</p><p>数据库中的行锁，表锁，读锁，写锁均为悲观锁。</p><ul><li><strong>乐观锁（Optimistic Concurrency Control）</strong></li></ul><p>乐观锁认为数据的变动不会太频繁。</p><p>乐观锁通常是通过在表中增加一个版本(version)或时间戳(timestamp)来实现，其中，版本最为常用。</p><p>事务在从数据库中取数据时，会将该数据的版本也取出来(v1)，当事务对数据变动完毕想要将其更新到表中时，会将之前取出的版本 v1 与数据中最新的版本 v2 相对比，如果 v1=v2，那么说明在数据变动期间，没有其他事务对数据进行修改，此时，就允许事务对表中的数据进行修改，并且修改时 version 会加 1，以此来表明数据已被变动。</p><p>如果，v1 不等于 v2，那么说明数据变动期间，数据被其他事务改动了，此时不允许数据更新到表中，一般的处理办法是通知用户让其重新操作。不同于悲观锁，乐观锁通常是由开发者实现的。</p><h3 id="_47-mysql-遇到过死锁问题吗-你是如何解决的" tabindex="-1"><a class="header-anchor" href="#_47-mysql-遇到过死锁问题吗-你是如何解决的" aria-hidden="true">#</a> 47.MySQL 遇到过死锁问题吗，你是如何解决的？</h3><p>排查死锁的一般步骤是这样的：</p><p>（1）查看死锁日志 show engine innodb status;</p><p>（2）找出死锁 sql</p><p>（3）分析 sql 加锁情况</p><p>（4）模拟死锁案发</p><p>（5）分析死锁日志</p><p>（6）分析死锁结果</p><p>当然，这只是一个简单的流程说明，实际上生产中的死锁千奇百怪，排查和解决起来没那么简单。</p>',56),_e={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},xe={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},qe=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务" aria-hidden="true">#</a> 事务</h2><h3 id="_48-mysql-事务的四大特性说一下" tabindex="-1"><a class="header-anchor" href="#_48-mysql-事务的四大特性说一下" aria-hidden="true">#</a> 48.MySQL 事务的四大特性说一下？</h3><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-eaafb8b8-fbe6-42c0-9cc2-f2e04631b56c.jpg" alt="三分恶面渣逆袭：事务四大特性" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：事务四大特性</figcaption></figure><h4 id="原子性" tabindex="-1"><a class="header-anchor" href="#原子性" aria-hidden="true">#</a> 原子性：</h4><p>原子性子性意味着事务中的所有操作要么全部完成，要么全部不完成，它是不可分割的单位。如果事务中的任何一个操作失败了，整个事务都会回滚到事务开始之前的状态，如同这些操作从未被执行过一样。</p><h4 id="一致性" tabindex="-1"><a class="header-anchor" href="#一致性" aria-hidden="true">#</a> 一致性：</h4><p>一致性确保事务从一个一致的状态转换到另一个一致的状态。</p><p>比如在银行转账事务中，无论发生什么，转账前后两个账户的总金额应保持不变。假如 A 账户（100 块）给 B 账户（10 块）转了 10 块钱，不管成功与否，A 和 B 的总金额都是 110 块。</p><h4 id="隔离性" tabindex="-1"><a class="header-anchor" href="#隔离性" aria-hidden="true">#</a> 隔离性：</h4><p>隔离性意味着并发执行的事务是彼此隔离的，一个事务的执行不会被其他事务干扰。就是事务之间是井水不犯河水的。</p><p>隔离性主要是为了解决事务并发执行时可能出现的问题，如脏读、不可重复读、幻读等。</p><p>数据库系统通过事务隔离级别（如读未提交、读已提交、可重复读、串行化）来实现事务的隔离性。</p><h4 id="持久性" tabindex="-1"><a class="header-anchor" href="#持久性" aria-hidden="true">#</a> 持久性：</h4><p>持久性确保事务一旦提交，它对数据库所做的更改就是永久性的，即使发生系统崩溃，数据库也能恢复到最近一次提交的状态。通常，持久性是通过数据库的恢复和日志机制来实现的，确保提交的事务更改不会丢失。</p>',16),we={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},Le=t('<h3 id="_49-那-acid-靠什么保证的呢" tabindex="-1"><a class="header-anchor" href="#_49-那-acid-靠什么保证的呢" aria-hidden="true">#</a> 49.那 ACID 靠什么保证的呢？</h3><p>MySQL 通过事务管理和持久性存储机制来确保 ACID（原子性、一致性、隔离性和持久性）。</p><p>01、原子性（Atomicity），如果事务的所有操作都成功执行，则事务被提交；如果事务中的任何操作失败，所有事务中的操作都会被回滚，使数据库返回到事务开始前的状态。</p><p>undo log 是 InnoDB 存储引擎来确保事务原子性的关键机制，undo log 记录了事务发生之前的数据，如果事务失败，InnoDB 会根据 undo log 回滚数据。</p><p>当事务开始修改数据时，InnoDB 首先会在<code>undo log</code>中记录旧值（即修改前的值）。</p><ul><li>如果事务顺利进行并最终提交，<code>undo log</code>会在某个时间点被清除。</li><li>如果事务中的某个操作失败或者事务被明确地回滚，InnoDB 会使用<code>undo log</code>中的信息来撤销所有更改，确保数据的原子性。</li></ul><p>简而言之，<code>undo log</code>机制为 InnoDB 提供了一种在事务失败或被中断时恢复数据的手段，从而保证了事务的原子性。</p><p>02、一致性（Consistency），保证在事务开始之前和事务成功完成之后，数据库处于一个一致的状态。中间的任何阶段，即使事务失败，也不应该使数据库处于不一致的状态。</p><p>一致性是 ACID 的目的，也就是说，只要保证原子性、隔离性、持久性，自然也就保证了数据的一致性。</p><p>03、隔离性 (Isolation)，MySQL 使用多种隔离级别来控制事务如何与其他并发事务隔离。InnoDB 存储引擎使用 MVCC (多版本并发控制) 机制来处理并发事务，确保每个事务都有自己的数据版本。</p><p>换句话说，事务查看数据时，数据所处的状态要么是另一事务修改它之前的状态，要么是另一事务修改它之后的状态，事务不会查看到中间状态的数据。</p><p>在 MVCC 中，每次更新记录时，都会生成记录的一个新版本，而不是覆盖老版本。每个版本都会有两个额外的属性：一个表示版本的创建时间（或事务 ID），另一个表示版本的过期时间（或下一个版本的事务 ID）。</p><p>当事务尝试读取记录时，它会看到该事务开始时有效的那个版本。</p><p>MVCC 通过提供数据版本来支持事务的隔离性。不同的事务会看到不同版本的数据行，这取决于事务的开始时间和它的隔离级别。</p><p>对于如 &quot;读未提交&quot;（READ UNCOMMITTED）这样的较低隔离级别，事务可能会看到其他未提交事务所做的更改。但在更高的隔离级别，如 &quot;可重复读&quot;（REPEATABLE READ）或 &quot;串行化&quot;（SERIALIZABLE），事务不会看到其他事务所做的更改，直到它们被提交。</p><p>04、持久性 (Durability)，由 MySQL 的存储引擎（如 InnoDB）通过写入磁盘来确保。即使在系统崩溃之后，已提交事务的更改也不会丢失。</p><p>InnoDB 使用“redo log”来记录数据的更改，在系统崩溃后，redo log 可用于恢复数据。</p><p>redo log 是一种物理日志，记录了对数据页的物理更改。当事务进行写操作时，InnoDB 首先会写入 redo log，并不会立即修改数据文件。这种写入方式被称为“write-ahead logging”（先写日志）。</p><p>当 redo log 填满或在某些其他情况下，InnoDB 会异步将这些更改刷新到数据文件中。</p><p>系统崩溃时，由于数据可能还没有被真正写入数据文件，但已经在 redo log 中，因此系统可以在启动时使用这些日志来重新执行或“重做”这些更改，确保数据的持久性。</p><p>即使数据库在事务提交后立即崩溃，由于事务的更改已经记录在 redo log 中，这些更改在数据库恢复时仍然是安全的。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/mysql-20230919103025.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_50-事务的隔离级别有哪些-mysql-的默认隔离级别是什么" tabindex="-1"><a class="header-anchor" href="#_50-事务的隔离级别有哪些-mysql-的默认隔离级别是什么" aria-hidden="true">#</a> 50.事务的隔离级别有哪些？MySQL 的默认隔离级别是什么？</h3><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-99942529-4a91-420b-9ce2-4149e747f64d.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>事务的四个隔离级别</p><ul><li>读未提交（Read Uncommitted）</li><li>读已提交（Read Committed）</li><li>可重复读（Repeatable Read）</li><li>串行化（Serializable）</li></ul><p>MySQL 默认的事务隔离级别是可重复读 (Repeatable Read)。</p><h3 id="_51-什么是幻读-脏读-不可重复读呢" tabindex="-1"><a class="header-anchor" href="#_51-什么是幻读-脏读-不可重复读呢" aria-hidden="true">#</a> 51.什么是幻读，脏读，不可重复读呢？</h3><ul><li>事务 A、B 交替执行，事务 A 读取到事务 B 未提交的数据，这就是<strong>脏读</strong>。</li><li>在一个事务范围内，两个相同的查询，读取同一条记录，却返回了不同的数据，这就是<strong>不可重复读</strong>。</li><li>事务 A 查询一个范围的结果集，另一个并发事务 B 往这个范围中插入 / 删除了数据，并静悄悄地提交，然后事务 A 再次查询相同的范围，两次读取得到的结果集不一样了，这就是<strong>幻读</strong>。</li></ul><p>不同的隔离级别，在并发事务下可能会发生的问题：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>Read Uncommited 读取未提交</td><td>是</td><td>是</td><td>是</td></tr><tr><td>Read Commited 读取已提交</td><td>否</td><td>是</td><td>是</td></tr><tr><td>Repeatable Read 可重复读</td><td>否</td><td>否</td><td>是</td></tr><tr><td>Serialzable 可串行化</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><h3 id="_52-事务的各个隔离级别都是如何实现的" tabindex="-1"><a class="header-anchor" href="#_52-事务的各个隔离级别都是如何实现的" aria-hidden="true">#</a> 52.事务的各个隔离级别都是如何实现的？</h3><p><strong>读未提交</strong></p><p>读未提交，就不用多说了，采取的是读不加锁原理。</p><ul><li>事务读不加锁，不阻塞其他事务的读和写</li><li>事务写阻塞其他事务写，但不阻塞其他事务读；</li></ul><p><strong>读取已提交&amp;可重复读</strong></p><p>读取已提交和可重复读级别利用了<code>ReadView</code>和<code>MVCC</code>，也就是每个事务只能读取它能看到的版本（ReadView）。</p><ul><li>READ COMMITTED：每次读取数据前都生成一个 ReadView</li><li>REPEATABLE READ ：在第一次读取数据时生成一个 ReadView</li></ul><p><strong>串行化</strong></p><p>串行化的实现采用的是读写都加锁的原理。</p><p>串行化的情况下，对于同一行事务，<code>写</code>会加<code>写锁</code>，<code>读</code>会加<code>读锁</code>。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p><h3 id="_53-mvcc-了解吗-怎么实现的" tabindex="-1"><a class="header-anchor" href="#_53-mvcc-了解吗-怎么实现的" aria-hidden="true">#</a> 53.MVCC 了解吗？怎么实现的？</h3><p>MVCC(Multi Version Concurrency Control)，中文名是多版本并发控制，简单来说就是通过维护数据历史版本，从而解决并发访问情况下的读一致性问题。关于它的实现，要抓住几个关键点，<strong>隐式字段、undo 日志、版本链、快照读&amp;当前读、Read View</strong>。</p><p><strong>版本链</strong></p><p>对于 InnoDB 存储引擎，每一行记录都有两个隐藏列<strong>DB_TRX_ID、DB_ROLL_PTR</strong></p><ul><li><code>DB_TRX_ID</code>，事务 ID，每次修改时，都会把该事务 ID 复制给<code>DB_TRX_ID</code>；</li><li><code>DB_ROLL_PTR</code>，回滚指针，指向回滚段的 undo 日志。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-81b091fb-77d9-440e-940e-253b905c0be3.jpg" alt="表隐藏列" tabindex="0" loading="lazy"><figcaption>表隐藏列</figcaption></figure><p>假如有一张<code>user</code>表，表中只有一行记录，当时插入的事务 id 为 80。此时，该条记录的示例图如下：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-80ebc2b3-ae63-417d-9307-f6a7811f7965.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来有两个<code>DB_TRX_ID</code>分别为<code>100</code>、<code>200</code>的事务对这条记录进行<code>update</code>操作，整个过程如下：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-bf4ff00d-01bd-4170-a17b-6919f7873ea4.jpg" alt="update 操作" tabindex="0" loading="lazy"><figcaption>update 操作</figcaption></figure><p>由于每次变动都会先把<code>undo</code>日志记录下来，并用<code>DB_ROLL_PTR</code>指向<code>undo</code>日志地址。因此可以认为，<strong>对该条记录的修改日志串联起来就形成了一个<code>版本链</code>，版本链的头节点就是当前记录最新的值</strong>。如下：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-765b3d83-14eb-4b56-8940-9d60bfaf1737.jpg" alt="MVCC" tabindex="0" loading="lazy"><figcaption>MVCC</figcaption></figure><p><strong>ReadView</strong></p><blockquote><p>对于<code>Read Committed</code>和<code>Repeatable Read</code>隔离级别来说，都需要读取已经提交的事务所修改的记录，也就是说如果版本链中某个版本的修改没有提交，那么该版本的记录时不能被读取的。所以需要确定在<code>Read Committed</code>和<code>Repeatable Read</code>隔离级别下，版本链中哪个版本是能被当前事务读取的。于是就引入了<code>ReadView</code>这个概念来解决这个问题。</p></blockquote><p>Read View 就是事务执行<strong>快照读</strong>时，产生的读视图，相当于某时刻表记录的一个快照，通过这个快照，我们可以获取：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-4451a8c6-8e90-4941-a6be-c09533fa6c03.jpg" alt="事务和 ReadView" tabindex="0" loading="lazy"><figcaption>事务和 ReadView</figcaption></figure><ul><li>m_ids ：表示在生成 ReadView 时当前系统中活跃的读写事务的事务 id 列表。</li><li>min_trx_id ：表示在生成 ReadView 时当前系统中活跃的读写事务中最小的 事务 id ，也就是 m_ids 中的最小值。</li><li>max_trx_id ：表示生成 ReadView 时系统中应该分配给下一个事务的 id 值。</li><li>creator_trx_id ：表示生成该 ReadView 的事务的 事务 id</li></ul><p>有了这个 ReadView ，这样在访问某条记录时，只需要按照下边的步骤判断记录的某个版本是否可见：</p><ul><li>如果被访问版本的 DB_TRX_ID 属性值与 ReadView 中的 creator_trx_id 值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。</li><li>如果被访问版本的 DB_TRX_ID 属性值小于 ReadView 中的 min_trx_id 值，表明生成该版本的事务在当前事务生成 ReadView 前已经提交，所以该版本可以被当前事务访问。</li><li>如果被访问版本的 DB_TRX_ID 属性值大于 ReadView 中的 max_trx_id 值，表明生成该版本的事务在当前事务生成 ReadView 后才开启，所以该版本不可以被当前事务访问。</li><li>如果被访问版本的 DB_TRX_ID 属性值在 ReadView 的 min_trx_id 和 max_trx_id 之间，那就需要判断一下 trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。</li></ul><p>如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。</p><p>在 MySQL 中， READ COMMITTED 和 REPEATABLE READ 隔离级别的的一个非常大的区别就是它们生成 ReadView 的时机不同。</p><p>READ COMMITTED 是<strong>每次读取数据前都生成一个 ReadView</strong>，这样就能保证自己每次都能读到其它事务提交的数据；REPEATABLE READ 是在<strong>第一次读取数据时生成一个 ReadView</strong>，这样就能保证后续读取的结果完全一致。</p>',63),je={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},Ie={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},Ee=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="高可用-性能" tabindex="-1"><a class="header-anchor" href="#高可用-性能" aria-hidden="true">#</a> 高可用/性能</h2><h3 id="_54-数据库读写分离了解吗" tabindex="-1"><a class="header-anchor" href="#_54-数据库读写分离了解吗" aria-hidden="true">#</a> 54.数据库读写分离了解吗？</h3><p>读写分离的基本原理是将数据库读写操作分散到不同的节点上，下面是基本架构图：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-31df767c-db05-4de4-a05b-a45bcf76c1bf.jpg" alt="读写分离" tabindex="0" loading="lazy"><figcaption>读写分离</figcaption></figure><p>读写分离的基本实现是:</p><ul><li>数据库服务器搭建主从集群，一主一从、一主多从都可以。</li><li>数据库主机负责读写操作，从机只负责读操作。</li><li>数据库主机通过复制将数据同步到从机，每台数据库服务器都存储了所有的业务数据。</li><li>业务服务器将写操作发给数据库主机，将读操作发给数据库从机。</li></ul><h3 id="_55-那读写分离的分配怎么实现呢" tabindex="-1"><a class="header-anchor" href="#_55-那读写分离的分配怎么实现呢" aria-hidden="true">#</a> 55.那读写分离的分配怎么实现呢？</h3><p>将读写操作区分开来，然后访问不同的数据库服务器，一般有两种方式：程序代码封装和中间件封装。</p><ol><li>程序代码封装</li></ol><p>程序代码封装指在代码中抽象一个数据访问层（所以有的文章也称这种方式为 &quot;中间层封装&quot; ） ，实现读写操作分离和数据库服务器连接的管理。例如，基于 Hibernate 进行简单封装，就可以实现读写分离：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-771eb01f-3f1a-4437-8e1b-affe4de36ec3.jpg" alt="业务代码封装" tabindex="0" loading="lazy"><figcaption>业务代码封装</figcaption></figure><p>目前开源的实现方案中，淘宝的 TDDL （Taobao Distributed Data Layer, 外号：头都大了）是比较有名的。</p><ol start="2"><li>中间件封装</li></ol><p>中间件封装指的是独立一套系统出来，实现读写操作分离和数据库服务器连接的管理。中间件对业务服务器提供 SQL 兼容的协议，业务服务器无须自己进行读写分离。</p><p>对于业务服务器来说，访问中间件和访问数据库没有区别，事实上在业务服务器看来，中间件就是一个数据库服务器。</p><p>其基本架构是：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-f2313613-25bd-4065-8f63-969a4b5757a7.jpg" alt="数据库中间件" tabindex="0" loading="lazy"><figcaption>数据库中间件</figcaption></figure><h3 id="_56-主从复制原理了解吗" tabindex="-1"><a class="header-anchor" href="#_56-主从复制原理了解吗" aria-hidden="true">#</a> 56.主从复制原理了解吗？</h3><ul><li>master 数据写入，更新 binlog</li><li>master 创建一个 dump 线程向 slave 推送 binlog</li><li>slave 连接到 master 的时候，会创建一个 IO 线程接收 binlog，并记录到 relay log 中继日志中</li><li>slave 再开启一个 sql 线程读取 relay log 事件并在 slave 执行，完成同步</li><li>slave 记录自己的 binglog</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-1bfbfcb5-2392-4f98-be1b-a66204da09e5.jpg" alt="主从复制" tabindex="0" loading="lazy"><figcaption>主从复制</figcaption></figure><h3 id="_57-主从同步延迟怎么处理" tabindex="-1"><a class="header-anchor" href="#_57-主从同步延迟怎么处理" aria-hidden="true">#</a> 57.主从同步延迟怎么处理？</h3><p><strong>主从同步延迟的原因</strong></p><p>一个服务器开放Ｎ个链接给客户端来连接的，这样有会有大并发的更新操作, 但是从服务器的里面读取 binlog 的线程仅有一个，当某个 SQL 在从服务器上执行的时间稍长 或者由于某个 SQL 要进行锁表就会导致，主服务器的 SQL 大量积压，未被同步到从服务器里。这就导致了主从不一致， 也就是主从延迟。</p><p><strong>主从同步延迟的解决办法</strong></p><p>解决主从复制延迟有几种常见的方法:</p><ol><li>写操作后的读操作指定发给数据库主服务器</li></ol><p>例如，注册账号完成后，登录时读取账号的读操作也发给数据库主服务器。这种方式和业务强绑定，对业务的侵入和影响较大，如果哪个新来的程序员不知道这样写代码，就会导致一个 bug。</p><ol start="2"><li>读从机失败后再读一次主机</li></ol><p>这就是通常所说的 &quot;二次读取&quot; ，二次读取和业务无绑定，只需要对底层数据库访问的 API 进行封装即可，实现代价较小，不足之处在于如果有很多二次读取，将大大增加主机的读操作压力。例如，黑客暴力破解账号，会导致大量的二次读取操作，主机可能顶不住读操作的压力从而崩溃。</p><ol start="3"><li>关键业务读写操作全部指向主机，非关键业务采用读写分离</li></ol><p>例如，对于一个用户管理系统来说，注册 + 登录的业务读写操作全部访问主机，用户的介绍、爰好、等级等业务，可以采用读写分离，因为即使用户改了自己的自我介绍，在查询时却看到了自我介绍还是旧的，业务影响与不能登录相比就小很多，还可以忍受。</p><h3 id="_58-你们一般是怎么分库的呢" tabindex="-1"><a class="header-anchor" href="#_58-你们一般是怎么分库的呢" aria-hidden="true">#</a> 58.你们一般是怎么分库的呢？</h3><ul><li>垂直分库：以表为依据，按照业务归属不同，将不同的表拆分到不同的库中。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-2a43af18-617b-4502-b66a-894c2ff4c6c3.jpg" alt="垂直分库" tabindex="0" loading="lazy"><figcaption>垂直分库</figcaption></figure><ul><li>水平分库：以字段为依据，按照一定策略（hash、range 等），将一个库中的数据拆分到多个库中。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-debe0fb1-d7f7-4ef2-8c99-13c9377138b6.jpg" alt="水平分库" tabindex="0" loading="lazy"><figcaption>水平分库</figcaption></figure><h3 id="_59-那你们是怎么分表的" tabindex="-1"><a class="header-anchor" href="#_59-那你们是怎么分表的" aria-hidden="true">#</a> 59.那你们是怎么分表的？</h3><ul><li>水平分表：以字段为依据，按照一定策略（hash、range 等），将一个表中的数据拆分到多个表中。</li><li>垂直分表：以字段为依据，按照字段的活跃性，将表中字段拆到不同的表（主表和扩展表）中。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-7cba6ce0-c8bb-4f51-9c3b-e5a44e724c79.jpg" alt="表拆分" tabindex="0" loading="lazy"><figcaption>表拆分</figcaption></figure><h3 id="_60-水平分表有哪几种路由方式" tabindex="-1"><a class="header-anchor" href="#_60-水平分表有哪几种路由方式" aria-hidden="true">#</a> 60.水平分表有哪几种路由方式？</h3><p>什么是路由呢？就是数据应该分到哪一张表。</p><p>水平分表主要有三种路由方式：</p><ul><li><strong>范围路由</strong>：选取有序的数据列 （例如，整形、时间戳等） 作为路由的条件，不同分段分散到不同的数据库表中。</li></ul><p>我们可以观察一些支付系统，发现只能查一年范围内的支付记录，这个可能就是支付公司按照时间进行了分表。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-b3882ca3-1d04-44e2-9015-7e6c867255a0.jpg" alt="范围路由" tabindex="0" loading="lazy"><figcaption>范围路由</figcaption></figure><p>范围路由设计的复杂点主要体现在分段大小的选取上，分段太小会导致切分后子表数量过多，增加维护复杂度；分段太大可能会导致单表依然存在性能问题，一般建议分段大小在 100 万至 2000 万之间，具体需要根据业务选取合适的分段大小。</p><p>范围路由的优点是可以随着数据的增加平滑地扩充新的表。例如，现在的用户是 100 万，如果增加到 1000 万，只需要增加新的表就可以了，原有的数据不需要动。范围路由的一个比较隐含的缺点是分布不均匀，假如按照 1000 万来进行分表，有可能某个分段实际存储的数据量只有 1000 条，而另外一个分段实际存储的数据量有 900 万条。</p><ul><li><strong>Hash 路由</strong>：选取某个列 （或者某几个列组合也可以） 的值进行 Hash 运算，然后根据 Hash 结果分散到不同的数据库表中。</li></ul><p>同样以订单 id 为例，假如我们一开始就规划了 4 个数据库表，路由算法可以简单地用 id % 4 的值来表示数据所属的数据库表编号，id 为 12 的订单放到编号为 50 的子表中，id 为 13 的订单放到编号为 61 的字表中。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-e01e7757-c337-48c8-95db-2f7cfd2bc036.jpg" alt="Hash 路由" tabindex="0" loading="lazy"><figcaption>Hash 路由</figcaption></figure><p>Hash 路由设计的复杂点主要体现在初始表数量的选取上，表数量太多维护比较麻烦，表数量太少又可能导致单表性能存在问题。而用了 Hash 路由后，增加子表数量是非常麻烦的，所有数据都要重分布。Hash 路由的优缺点和范围路由基本相反，Hash 路由的优点是表分布比较均匀，缺点是扩充新的表很麻烦，所有数据都要重分布。</p><ul><li><strong>配置路由</strong>：配置路由就是路由表，用一张独立的表来记录路由信息。同样以订单 id 为例，我们新增一张 order_router 表，这个表包含 orderjd 和 tablejd 两列 , 根据 orderjd 就可以查询对应的 table_id。</li></ul><p>配置路由设计简单，使用起来非常灵活，尤其是在扩充表的时候，只需要迁移指定的数据，然后修改路由表就可以了。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-fcd34332-d38d-455a-875d-d4afd37cac72.jpg" alt="配置路由" tabindex="0" loading="lazy"><figcaption>配置路由</figcaption></figure><p>配置路由的缺点就是必须多查询一次，会影响整体性能；而且路由表本身如果太大（例如，几亿条数据） ，性能同样可能成为瓶颈，如果我们再次将路由表分库分表，则又面临一个死循环式的路由算法选择问题。</p><h3 id="_61-不停机扩容怎么实现" tabindex="-1"><a class="header-anchor" href="#_61-不停机扩容怎么实现" aria-hidden="true">#</a> 61.不停机扩容怎么实现？</h3><p>实际上，不停机扩容，实操起来是个非常麻烦而且很有风险的操作，当然，面试回答起来就简单很多。</p><ul><li><strong>第一阶段：在线双写，查询走老库</strong></li></ul><ol><li>建立好新的库表结构，数据写入久库的同时，也写入拆分的新库</li><li>数据迁移，使用数据迁移程序，将旧库中的历史数据迁移到新库</li><li>使用定时任务，新旧库的数据对比，把差异补齐</li></ol><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-2d4d94c9-e816-47fc-93dd-a835b1318099.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>第二阶段：在线双写，查询走新库</strong></li></ul><ol><li>完成了历史数据的同步和校验</li><li>把对数据的读切换到新库</li></ol><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-5cf01486-72c1-4eab-9f6e-a19c31569f46.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>第三阶段：旧库下线</strong></li></ul><ol><li>旧库不再写入新的数据</li><li>经过一段时间，确定旧库没有请求之后，就可以下线老库</li></ol><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/mysql-a122d6d5-fff2-4ccd-8ddb-a9282eb2e2da.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_62-常用的分库分表中间件有哪些" tabindex="-1"><a class="header-anchor" href="#_62-常用的分库分表中间件有哪些" aria-hidden="true">#</a> 62.常用的分库分表中间件有哪些？</h3><ul><li>sharding-jdbc</li><li>Mycat</li></ul><h3 id="_63-那你觉得分库分表会带来什么问题呢" tabindex="-1"><a class="header-anchor" href="#_63-那你觉得分库分表会带来什么问题呢" aria-hidden="true">#</a> 63.那你觉得分库分表会带来什么问题呢？</h3><p>从分库的角度来讲：</p><ul><li><strong>事务的问题</strong></li></ul><p>使用关系型数据库，有很大一点在于它保证事务完整性。</p><p>而分库之后单机事务就用不上了，必须使用分布式事务来解决。</p><ul><li><strong>跨库 JOIN 问题</strong></li></ul><p>在一个库中的时候我们还可以利用 JOIN 来连表查询，而跨库了之后就无法使用 JOIN 了。</p><p>此时的解决方案就是<strong>在业务代码中进行关联</strong>，也就是先把一个表的数据查出来，然后通过得到的结果再去查另一张表，然后利用代码来关联得到最终的结果。</p><p>这种方式实现起来稍微比较复杂，不过也是可以接受的。</p><p>还有可以<strong>适当的冗余一些字段</strong>。比如以前的表就存储一个关联 ID，但是业务时常要求返回对应的 Name 或者其他字段。这时候就可以把这些字段冗余到当前表中，来去除需要关联的操作。</p><p>还有一种方式就是<strong>数据异构</strong>，通过 binlog 同步等方式，把需要跨库 join 的数据异构到 ES 等存储结构中，通过 ES 进行查询。</p><p>从分表的角度来看：</p><ul><li><strong>跨节点的 count,order by,group by 以及聚合函数问题</strong></li></ul><p>只能由业务代码来实现或者用中间件将各表中的数据汇总、排序、分页然后返回。</p><ul><li><strong>数据迁移，容量规划，扩容等问题</strong></li></ul><p>数据的迁移，容量如何规划，未来是否可能再次需要扩容，等等，都是需要考虑的问题。</p><ul><li><strong>ID 问题</strong></li></ul><p>数据库表被切分后，不能再依赖数据库自身的主键生成机制，所以需要一些手段来保证全局主键唯一。</p><ol><li>还是自增，只不过自增步长设置一下。比如现在有三张表，步长设置为 3，三张表 ID 初始值分别是 1、2、3。这样第一张表的 ID 增长是 1、4、7。第二张表是 2、5、8。第三张表是 3、6、9，这样就不会重复了。</li><li>UUID，这种最简单，但是不连续的主键插入会导致严重的页分裂，性能比较差。</li><li>分布式 ID，比较出名的就是 Twitter 开源的 sonwflake 雪花算法</li></ol>',89),Me={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},Se={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},Be=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="运维" tabindex="-1"><a class="header-anchor" href="#运维" aria-hidden="true">#</a> 运维</h2><h3 id="_64-百万级别以上的数据如何删除" tabindex="-1"><a class="header-anchor" href="#_64-百万级别以上的数据如何删除" aria-hidden="true">#</a> 64.百万级别以上的数据如何删除？</h3><p>关于索引：由于索引需要额外的维护成本，因为索引文件是单独存在的文件,所以当我们对数据的增加,修改,删除,都会产生额外的对索引文件的操作,这些操作需要消耗额外的 IO,会降低增/改/删的执行效率。</p><p>所以，在我们删除数据库百万级别数据的时候，查询 MySQL 官方手册得知删除数据的速度和创建的索引数量是成正比的。</p><ol><li>所以我们想要删除百万数据的时候可以先删除索引</li><li>然后删除其中无用数据</li><li>删除完成后重新创建索引创建索引也非常快</li></ol><h3 id="_65-百万千万级大表如何添加字段" tabindex="-1"><a class="header-anchor" href="#_65-百万千万级大表如何添加字段" aria-hidden="true">#</a> 65.百万千万级大表如何添加字段？</h3><p>当线上的数据库数据量到达几百万、上千万的时候，加一个字段就没那么简单，因为可能会长时间锁表。</p><p>大表添加字段，通常有这些做法：</p><ul><li>通过中间表转换过去</li></ul><p>创建一个临时的新表，把旧表的结构完全复制过去，添加字段，再把旧表数据复制过去，删除旧表，新表命名为旧表的名称，这种方式可能回丢掉一些数据。</p><ul><li>用 pt-online-schema-change</li></ul><p><code>pt-online-schema-change</code>是 percona 公司开发的一个工具，它可以在线修改表结构，它的原理也是通过中间表。</p><ul><li>先在从库添加 再进行主从切换</li></ul><p>如果一张表数据量大且是热表（读写特别频繁），则可以考虑先在从库添加，再进行主从切换，切换后再将其他几个节点上添加字段。</p><h3 id="_66-mysql-数据库-cpu-飙升的话-要怎么处理呢" tabindex="-1"><a class="header-anchor" href="#_66-mysql-数据库-cpu-飙升的话-要怎么处理呢" aria-hidden="true">#</a> 66.MySQL 数据库 cpu 飙升的话，要怎么处理呢？</h3><p>排查过程：</p><p>（1）使用 top 命令观察，确定是 mysqld 导致还是其他原因。</p><p>（2）如果是 mysqld 导致的，show processlist，查看 session 情况，确定是不是有消耗资源的 sql 在运行。</p><p>（3）找出消耗高的 sql，看看执行计划是否准确， 索引是否缺失，数据量是否太大。</p><p>处理：</p><p>（1）kill 掉这些线程 (同时观察 cpu 使用率是否下降)，</p><p>（2）进行相应的调整 (比如说加索引、改 sql、改内存参数)</p><p>（3）重新跑这些 SQL。</p><p>其他情况：</p><p>也有可能是每个 sql 消耗资源并不多，但是突然之间，有大量的 session 连进来导致 cpu 飙升，这种情况就需要跟应用一起来分析为何连接数会激增，再做出相应的调整，比如说限制连接数等</p>',27),Ae={href:"https://mp.weixin.qq.com/s/JFjFs_7xduCmHOegbJ-Gbg",target:"_blank",rel:"noopener noreferrer"},Te={href:"https://mp.weixin.qq.com/s/zSTyZ-8CFalwAYSB0PN6wA",target:"_blank",rel:"noopener noreferrer"},Re=e("hr",null,null,-1),De=e("p",null,[e("em",null,"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟"),a("。")],-1),Ne=e("p",null,[e("strong",null,"系列内容"),a("：")],-1),Oe={href:"https://javabetter.cn/sidebar/sanfene/javase.html",target:"_blank",rel:"noopener noreferrer"},Qe={href:"https://javabetter.cn/sidebar/sanfene/javathread.html",target:"_blank",rel:"noopener noreferrer"},Ce={href:"https://javabetter.cn/sidebar/sanfene/collection.html",target:"_blank",rel:"noopener noreferrer"},ze={href:"https://javabetter.cn/sidebar/sanfene/jvm.html",target:"_blank",rel:"noopener noreferrer"},Je={href:"https://javabetter.cn/sidebar/sanfene/spring.html",target:"_blank",rel:"noopener noreferrer"},Ve={href:"https://javabetter.cn/sidebar/sanfene/redis.html",target:"_blank",rel:"noopener noreferrer"},Pe={href:"https://javabetter.cn/sidebar/sanfene/mybatis.html",target:"_blank",rel:"noopener noreferrer"},He={href:"https://javabetter.cn/sidebar/sanfene/mysql.html",target:"_blank",rel:"noopener noreferrer"},Ue={href:"https://javabetter.cn/sidebar/sanfene/os.html",target:"_blank",rel:"noopener noreferrer"},Fe={href:"https://javabetter.cn/sidebar/sanfene/network.html",target:"_blank",rel:"noopener noreferrer"},Ge={href:"https://javabetter.cn/sidebar/sanfene/rocketmq.html",target:"_blank",rel:"noopener noreferrer"},Ye={href:"https://javabetter.cn/sidebar/sanfene/fenbushi.html",target:"_blank",rel:"noopener noreferrer"},Xe={href:"https://javabetter.cn/sidebar/sanfene/weifuwu.html",target:"_blank",rel:"noopener noreferrer"},Ke={href:"https://javabetter.cn/sidebar/sanfene/shejimoshi.html",target:"_blank",rel:"noopener noreferrer"},We=e("hr",null,null,-1),Ze={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},$e={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},ea=e("p",null,[a("微信搜 "),e("strong",null,"沉默王二"),a(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),e("strong",null,"222"),a(" 即可免费领取。")],-1),aa=e("figure",null,[e("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),e("figcaption")],-1);function na(sa,ta){const n=i("ExternalLinkIcon");return r(),l("div",null,[e("p",null,[a("1.8 万字 69 张手绘图，详解 68 道 MySQL 面试高频题（让天下没有难背的八股），面渣背会这些 MySQL 八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳"),e("a",d,[a("转载链接"),s(n)]),a("，作者：三分恶，戳"),e("a",c,[a("原文链接"),s(n)]),a("。")]),u,e("p",null,[a("我们拿"),e("a",g,[a("技术派实战项目"),s(n)]),a("为例。")]),b,e("blockquote",null,[e("ol",null,[e("li",null,[e("a",h,[a("Java 面试指南（付费）"),s(n)]),a("收录的腾讯 Java 后端实习一面原题：请说说 MySQL 的内联、左联、右联的区别。")])])]),m,e("blockquote",null,[e("ol",null,[e("li",null,[e("a",f,[a("Java 面试指南（付费）"),s(n)]),a("收录的用友金融一面原题：介绍一下 MySQL 的常用命令")])])]),k,v,e("p",null,[a("推荐阅读："),e("a",y,[a("MySQL bin 目录下的一些可执行文件"),s(n)])]),_,e("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),e("a",x,[a("二哥的 Java 进阶之路"),s(n)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",q,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),s(n)])]),w,e("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),e("a",L,[a("二哥的 Java 进阶之路"),s(n)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",j,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),s(n)])]),I,e("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),e("a",E,[a("二哥的 Java 进阶之路"),s(n)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",M,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),s(n)])]),S,e("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),e("a",B,[a("二哥的 Java 进阶之路"),s(n)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",A,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),s(n)])]),T,e("p",null,[a("推荐阅读："),e("a",R,[a("松哥：再聊 MySQL 聚簇索引"),s(n)])]),D,e("ul",null,[e("li",null,[e("a",N,[a("GitHub：B 树和 B+树详解"),s(n)])]),e("li",null,[e("a",O,[a("思否：面试官问你 B 树和 B+树，就把这篇文章丢给他"),s(n)])]),e("li",null,[e("a",Q,[a("极客时间：为什么用 B+树来做索引？"),s(n)])]),e("li",null,[e("a",C,[a("一颗剽悍的种子：用 16 张图就给你讲明白 MySQL 为什么要用 B+树做索引"),s(n)])])]),z,e("p",null,[a("Hash 索引在原理上和 Java 中的 "),e("a",J,[a("HashMap"),s(n)]),a(" 类似，当发生哈希冲突的时候也是通过拉链法来解决。")]),V,e("ul",null,[e("li",null,[e("a",P,[a("磊哥：聚簇索引和非聚簇索引有什么区别？"),s(n)])]),e("li",null,[e("a",H,[a("浅谈聚簇索引与非聚簇索引"),s(n)])]),e("li",null,[e("a",U,[a("聚簇索引、非聚簇索引、联合索引、唯一索引"),s(n)])])]),e("blockquote",null,[e("ol",null,[e("li",null,[e("a",F,[a("Java 面试指南（付费）"),s(n)]),a("收录的科大讯飞非凡计划研发类面经原题：聊聊 MySQL 的索引")])])]),G,e("blockquote",null,[e("ol",null,[e("li",null,[e("a",Y,[a("Java 面试指南（付费）"),s(n)]),a("收录的用友金融一面原题：索引的作用，加索引需要注意什么")]),e("li",null,[e("a",X,[a("Java 面试指南（付费）"),s(n)]),a("收录的京东同学 10 后端实习一面的原题：查询和更新都频繁的字段是否适合创建索引，为什么")]),e("li",null,[e("a",K,[a("Java 面试指南（付费）"),s(n)]),a("收录的小米春招同学 K 一面面试原题：索引怎么设计才是最好的")])])]),W,e("blockquote",null,[e("ol",null,[e("li",null,[e("a",Z,[a("Java 面试指南（付费）"),s(n)]),a("收录的字节跳动商业化一面的原题：(A,B,C) 联合索引 "),$,a(" 会走索引吗？")]),e("li",null,[e("a",ee,[a("Java 面试指南（付费）"),s(n)]),a("收录的京东同学 10 后端实习一面的原题：联合索引 abc，a=1,c=1/b=1,c=1/a=1,c=1,b=1 走不走索引")])])]),ae,e("ol",null,[e("li",null,[a("推荐阅读："),e("a",ne,[a("终于把 B 树搞明白了"),s(n)])]),e("li",null,[a("推荐阅读："),e("a",se,[a("一篇文章讲透 MySQL 为什么要用 B+树实现索引"),s(n)])])]),te,e("blockquote",null,[e("ol",null,[e("li",null,[e("a",oe,[a("Java 面试指南（付费）"),s(n)]),a("收录的字节跳动商业化一面的原题：说说 B+树，为什么 3 层容纳 2000W 条，为什么 2000w 条数据查的快")]),e("li",null,[e("a",ie,[a("Java 面试指南（付费）"),s(n)]),a("收录的国企面试原题：说说 MySQL 的底层数据结构，B 树和 B+树的区别")])])]),re,e("p",null,[a("推荐阅读："),e("a",le,[a("清幽之地：InnoDB 一棵 B+树可以存放多少行数据？"),s(n)])]),pe,de,ce,ue,ge,e("blockquote",null,[e("ol",null,[e("li",null,[e("a",be,[a("Java 面试指南（付费）"),s(n)]),a("收录的字节跳动商业化一面的原题：说说 B+树，为什么 3 层容纳 2000W 条，为什么 2000w 条数据查的快")])])]),he,e("blockquote",null,[e("ol",null,[e("li",null,[e("a",me,[a("Java 面试指南（付费）"),s(n)]),a("收录的小米春招同学 K 一面面试原题：mysql：聚簇索引和非聚簇索引区别")])])]),fe,e("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),e("a",ke,[a("二哥的 Java 进阶之路"),s(n)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",ve,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),s(n)])]),ye,e("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),e("a",_e,[a("二哥的 Java 进阶之路"),s(n)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",xe,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),s(n)])]),qe,e("blockquote",null,[e("ol",null,[e("li",null,[e("a",we,[a("Java 面试指南（付费）"),s(n)]),a("收录的京东同学 10 后端实习一面的原题：事务的四个特性，怎么理解事务一致性")])])]),Le,e("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),e("a",je,[a("二哥的 Java 进阶之路"),s(n)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",Ie,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),s(n)])]),Ee,e("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),e("a",Me,[a("二哥的 Java 进阶之路"),s(n)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",Se,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),s(n)])]),Be,e("blockquote",null,[e("p",null,[a("图文详解 68 道 MySQL 面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳"),e("a",Ae,[a("转载链接"),s(n)]),a("，作者：三分恶，戳"),e("a",Te,[a("原文链接"),s(n)]),a("。")])]),Re,De,Ne,e("ul",null,[e("li",null,[e("a",Oe,[a("面渣逆袭 Java SE 篇 👍"),s(n)])]),e("li",null,[e("a",Qe,[a("面渣逆袭 Java 集合框架篇 👍"),s(n)])]),e("li",null,[e("a",Ce,[a("面渣逆袭 Java 并发编程篇 👍"),s(n)])]),e("li",null,[e("a",ze,[a("面渣逆袭 JVM 篇 👍"),s(n)])]),e("li",null,[e("a",Je,[a("面渣逆袭 Spring 篇 👍"),s(n)])]),e("li",null,[e("a",Ve,[a("面渣逆袭 Redis 篇 👍"),s(n)])]),e("li",null,[e("a",Pe,[a("面渣逆袭 MyBatis 篇 👍"),s(n)])]),e("li",null,[e("a",He,[a("面渣逆袭 MySQL 篇 👍"),s(n)])]),e("li",null,[e("a",Ue,[a("面渣逆袭操作系统篇 👍"),s(n)])]),e("li",null,[e("a",Fe,[a("面渣逆袭计算机网络篇 👍"),s(n)])]),e("li",null,[e("a",Ge,[a("面渣逆袭 RocketMQ 篇 👍"),s(n)])]),e("li",null,[e("a",Ye,[a("面渣逆袭分布式篇 👍"),s(n)])]),e("li",null,[e("a",Xe,[a("面渣逆袭微服务篇 👍"),s(n)])]),e("li",null,[e("a",Ke,[a("面渣逆袭设计模式篇 👍"),s(n)])])]),We,e("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),e("a",Ze,[a("二哥的 Java 进阶之路"),s(n)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),e("a",$e,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),s(n)])]),ea,aa])}const ra=o(p,[["render",na],["__file","mysql.html.vue"]]);export{ra as default};
