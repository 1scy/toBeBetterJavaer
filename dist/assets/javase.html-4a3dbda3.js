import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,d as a,b as e,e as t}from"./app-8dc884c6.js";const l={},r={href:"https://mp.weixin.qq.com/s/t7EYyF0VGEg1rAZut9dwSw",target:"_blank",rel:"noopener noreferrer"},u={href:"https://mp.weixin.qq.com/s/M-6RSRcRd3X93cR7VXpanw",target:"_blank",rel:"noopener noreferrer"},d=t('<h2 id="java-概述" tabindex="-1"><a class="header-anchor" href="#java-概述" aria-hidden="true">#</a> Java 概述</h2><h3 id="_1-什么是-java" tabindex="-1"><a class="header-anchor" href="#_1-什么是-java" aria-hidden="true">#</a> 1.什么是 Java？</h3><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-1.png" alt="三分恶面渣逆袭：下辈子还学Java" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：下辈子还学Java</figcaption></figure><blockquote><p>PS：碎怂 Java，有啥好介绍的。哦，面试啊。</p></blockquote><p>Java 是一门面向对象的编程语言，不仅吸收了 C++语言的各种优点，还摒弃了 C++里难以理解的多继承、指针等概念，因此 Java 语言具有功能强大和简单易用两个特征。Java 语言作为静态面向对象编程语言的优秀代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p><h3 id="_2-java-语言有哪些特点" tabindex="-1"><a class="header-anchor" href="#_2-java-语言有哪些特点" aria-hidden="true">#</a> 2.Java 语言有哪些特点？</h3><p>Java 语言有很多优秀（可吹）的特点，以下几个是比较突出的：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-2.png" alt="Java语言特点" tabindex="0" loading="lazy"><figcaption>Java语言特点</figcaption></figure><ul><li>面向对象（封装，继承，多态）；</li><li>平台无关性，平台无关性的具体表现在于，Java 是“一次编写，到处运行（Write Once，Run any Where）”的语言，因此采用 Java 语言编写的程序具有很好的可移植性，而保证这一点的正是 Java 的虚拟机机制。在引入虚拟机之后，Java 语言在不同的平台上运行不需要重新编译。</li><li>支持多线程。C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持；</li><li>编译与解释并存；</li></ul><h3 id="_3-jvm、jdk-和-jre-有什么区别" tabindex="-1"><a class="header-anchor" href="#_3-jvm、jdk-和-jre-有什么区别" aria-hidden="true">#</a> 3.JVM、JDK 和 JRE 有什么区别？</h3><p><strong>JVM</strong>：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。</p><p><strong>JRE</strong>： Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。</p><p><strong>JDK</strong>: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p><p>简单来说，JDK 包含 JRE，JRE 包含 JVM。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-3.png" alt="JDK、JRE、JVM关系" tabindex="0" loading="lazy"><figcaption>JDK、JRE、JVM关系</figcaption></figure><h3 id="_4-说说什么是跨平台性-原理是什么" tabindex="-1"><a class="header-anchor" href="#_4-说说什么是跨平台性-原理是什么" aria-hidden="true">#</a> 4.说说什么是跨平台性？原理是什么</h3><p>所谓跨平台性，是指 Java 语言编写的程序，一次编译后，可以在多个系统平台上运行。</p><p>实现原理：Java 程序是通过 Java 虚拟机在系统平台上运行的，只要该系统可以安装相应的 Java 虚拟机，该系统就可以运行 java 程序。</p><h3 id="_5-什么是字节码-采用字节码的好处是什么" tabindex="-1"><a class="header-anchor" href="#_5-什么是字节码-采用字节码的好处是什么" aria-hidden="true">#</a> 5.什么是字节码？采用字节码的好处是什么?</h3><p>所谓的字节码，就是 Java 程序经过编译之类产生的.class 文件，字节码能够被虚拟机识别，从而实现 Java 程序的跨平台性。</p><p><strong>Java</strong> 程序从源代码到运行主要有三步：</p><ul><li><strong>编译</strong>：将我们的代码（.java）编译成虚拟机可以识别理解的字节码(.class)</li><li><strong>解释</strong>：虚拟机执行 Java 字节码，将字节码翻译成机器能识别的机器码</li><li><strong>执行</strong>：对应的机器执行二进制机器码</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-4.png" alt="Java程序执行过程" tabindex="0" loading="lazy"><figcaption>Java程序执行过程</figcaption></figure><p>只需要把 Java 程序编译成 Java 虚拟机能识别的 Java 字节码，不同的平台安装对应的 Java 虚拟机，这样就可以可以实现 Java 语言的平台无关性。</p><h3 id="_6-为什么说-java-语言-编译与解释并存" tabindex="-1"><a class="header-anchor" href="#_6-为什么说-java-语言-编译与解释并存" aria-hidden="true">#</a> 6.为什么说 Java 语言“编译与解释并存”？</h3><p>高级编程语言按照程序的执行方式分为<strong>编译型</strong>和<strong>解释型</strong>两种。</p><p>简单来说，编译型语言是指编译器针对特定的操作系统将源代码一次性翻译成可被该平台执行的机器码；解释型语言是指解释器对源程序逐行解释成特定平台的机器码并立即执行。</p><p>比如，你想读一本外国的小说，你可以找一个翻译人员帮助你翻译，有两种选择方式，你可以先等翻译人员将全本的小说（也就是源码）都翻译成汉语，再去阅读，也可以让翻译人员翻译一段，你在旁边阅读一段，慢慢把书读完。</p><p>Java 语言既具有编译型语言的特征，也具有解释型语言的特征，因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（<code>\\*.class</code> 文件），这种字节码必须再经过 JVM，解释成操作系统能识别的机器码，在由操作系统执行。因此，我们可以认为 Java 语言<strong>编译</strong>与<strong>解释</strong>并存。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-5.png" alt="编译与解释" tabindex="0" loading="lazy"><figcaption>编译与解释</figcaption></figure>',30),k={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},v={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},b=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2><h3 id="_7-java-有哪些数据类型" tabindex="-1"><a class="header-anchor" href="#_7-java-有哪些数据类型" aria-hidden="true">#</a> 7.Java 有哪些数据类型？</h3>',4),m={href:"https://javabetter.cn/basic-grammar/basic-data-type.html",target:"_blank",rel:"noopener noreferrer"},g=t('<p>Java 的数据类型分两种：<strong>基本数据类型</strong>和<strong>引用数据类型</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/core-grammar/nine-01.png" alt="二哥的 Java 进阶之路：Java数据类型" tabindex="0" loading="lazy"><figcaption>二哥的 Java 进阶之路：Java数据类型</figcaption></figure><h4 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型：</h4><ul><li>数值型 <ul><li>整数类型（byte、short、int、long）</li><li>浮点类型（float、double）</li></ul></li><li>字符型（char）</li><li>布尔型（boolean）</li></ul><p>Java 基本数据类型范围和默认值：</p><table><thead><tr><th>数据类型</th><th>默认值</th><th>大小</th></tr></thead><tbody><tr><td>boolean</td><td>false</td><td>1 比特</td></tr><tr><td>char</td><td>&#39;\\u0000&#39;</td><td>2 字节</td></tr><tr><td>byte</td><td>0</td><td>1 字节</td></tr><tr><td>short</td><td>0</td><td>2 字节</td></tr><tr><td>int</td><td>0</td><td>4 字节</td></tr><tr><td>long</td><td>0L</td><td>8 字节</td></tr><tr><td>float</td><td>0.0f</td><td>4 字节</td></tr><tr><td>double</td><td>0.0</td><td>8 字节</td></tr></tbody></table><h4 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型：</h4>',7),h={href:"https://javabetter.cn/oo/object-class.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://javabetter.cn/oo/interface.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://javabetter.cn/array/array.html",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"[]",-1),_={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},w=n("h3",{id:"_23-float-是怎么表示小数的",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_23-float-是怎么表示小数的","aria-hidden":"true"},"#"),a(" 23.float 是怎么表示小数的？")],-1),x={href:"http://kaito-kidd.com/2018/08/08/computer-system-float-point/",target:"_blank",rel:"noopener noreferrer"},q=t(`<p><code>float</code>类型的小数在计算机中是通过 IEEE 754 标准的单精度浮点数格式来表示的。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>V = (-1)^S * M * R^E
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>S：符号位，0 代表正数，1 代表负数；</li><li>M：尾数部分，用于表示数值的精度；比如说 <code>1.25 * 2^2</code>；1.25 就是尾数；</li><li>R：基数，十进制中的基数是 10，二进制中的基数是 2；</li><li>E：指数部分，例如 10^-1 中的 -1 就是指数。</li></ul><p>这种表示方法可以将非常大或非常小的数值用有限的位数表示出来，但这也意味着可能会有精度上的损失。</p><p>单精度浮点数占用 4 字节（32 位），这 32 位被分为三个部分：符号位、指数部分和尾数部分。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/javase-20240321112428.png" alt="kaito：浮点数" tabindex="0" loading="lazy"><figcaption>kaito：浮点数</figcaption></figure><ol><li><strong>符号位（Sign bit）</strong>：1 位</li><li><strong>指数部分（Exponent）</strong>：10 位</li><li><strong>尾数部分（Mantissa，或 Fraction）</strong>：21 位</li></ol><p>按照这个规则，将十进制数 25.125 转换为浮点数，转换过程是这样的：</p><ol><li>整数部分：25 转换为二进制是 11001；</li><li>小数部分：0.125 转换为二进制是 0.001；</li><li>用二进制科学计数法表示：(25.125 = 1.001001 \\times 2^4)；</li></ol><p>符号位 S 是 0，表示正数；指数部分 E 是 4，转换为二进制是 100；尾数部分 M 是 1.001001。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/javase-20240321113232.png" alt="kaito：25.125" tabindex="0" loading="lazy"><figcaption>kaito：25.125</figcaption></figure><p>使用浮点数时需要注意，由于精度的限制，进行数学运算时可能会遇到舍入误差，特别是连续运算累积误差可能会变得显著。</p><p>对于需要高精度计算的场景（如金融计算），可能需要考虑使用<code>BigDecimal</code>类来避免这种误差。</p>`,13),J={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},S=t(`<h3 id="_8-自动类型转换、强制类型转换-看看这几行代码" tabindex="-1"><a class="header-anchor" href="#_8-自动类型转换、强制类型转换-看看这几行代码" aria-hidden="true">#</a> 8.自动类型转换、强制类型转换？看看这几行代码？</h3><p>Java 所有的数值型变量可以相互转换，当把一个表数范围小的数值或变量直接赋给另一个表数范围大的变量时，可以进行自动类型转换；反之，需要强制转换。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-7.png" alt="Java自动类型转换方向" tabindex="0" loading="lazy"><figcaption>Java自动类型转换方向</figcaption></figure><p>这就好像，小杯里的水倒进大杯没问题，但大杯的水倒进小杯就不行了，可能会溢出。</p><blockquote><p><code>float f=3.4</code>，对吗？</p></blockquote><p>不正确。3.4 是双精度数，将双精度型（double）赋值给浮点型（float）属于下转型（down-casting，也称为窄化）会造成精度损失，因此需要强制类型转换<code>float f =(float)3.4;</code>或者写成<code>float f =3.4F</code></p><blockquote><p><code>short s1 = 1; s1 = s1 + 1；</code>对吗？<code>short s1 = 1; s1 += 1;</code>对吗？</p></blockquote><p>对于 short s1 = 1; s1 = s1 + 1;编译出错，由于 1 是 int 类型，因此 s1+1 运算结果也是 int 型，需要强制转换类型才能赋值给 short 型。</p><p>而 short s1 = 1; s1 += 1;可以正确编译，因为 s1+= 1;相当于 s1 = (short(s1 + 1);其中有隐含的强制类型转换。</p><h3 id="_9-什么是自动拆箱-封箱" tabindex="-1"><a class="header-anchor" href="#_9-什么是自动拆箱-封箱" aria-hidden="true">#</a> 9.什么是自动拆箱/封箱？</h3><ul><li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li><li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li></ul><p>Java 可以自动对基本数据类型和它们的包装类进行装箱和拆箱。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-8.png" alt="装箱和拆箱" tabindex="0" loading="lazy"><figcaption>装箱和拆箱</figcaption></figure><p>举例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">//装箱</span>
<span class="token keyword">int</span> n <span class="token operator">=</span> i<span class="token punctuation">;</span>   <span class="token comment">//拆箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-和-有什么区别" tabindex="-1"><a class="header-anchor" href="#_10-和-有什么区别" aria-hidden="true">#</a> 10.&amp;和&amp;&amp;有什么区别？</h3><p>&amp;运算符有两种用法：<code>短路与</code>、<code>逻辑与</code>。</p><p>&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是 true 整个表达式的值才是 true。</p><p>&amp;&amp;之所以称为短路运算是因为，如果&amp;&amp;左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。很多时候我们可能都需要用&amp;&amp;而不是&amp;。</p><p>例如在验证用户登录时判定用户名不是 null 而且不是空字符串，应当写为<code>username != null &amp;&amp;!username.equals(&quot;&quot;)</code>，二者的顺序不能交换，更不能用&amp;运算符，因为第一个条件如果不成立，根本不能进行字符串的 equals 比较，否则会产生 NullPointerException 异常。</p><p><strong>注意</strong>：逻辑或运算符（|）和短路或运算符（||）的差别也是如此。</p><h3 id="_11-switch-是否能作用在-byte-long-string-上" tabindex="-1"><a class="header-anchor" href="#_11-switch-是否能作用在-byte-long-string-上" aria-hidden="true">#</a> 11.switch 是否能作用在 byte/long/String 上？</h3><p>Java5 以前 switch(expr)中，expr 只能是 byte、short、char、int。</p><p>从 Java 5 开始，Java 中引入了枚举类型， expr 也可以是 enum 类型。</p><p>从 Java 7 开始，expr 还可以是字符串(String)，但是长整型(long)在目前所有的版本中都是不可以的。</p><h3 id="_12-break-continue-return-的区别及作用" tabindex="-1"><a class="header-anchor" href="#_12-break-continue-return-的区别及作用" aria-hidden="true">#</a> 12.break ,continue ,return 的区别及作用？</h3><ul><li>break 跳出整个循环，不再执行循环(<strong>结束当前的循环体</strong>)</li><li>continue 跳出本次循环，继续执行下次循环(<strong>结束正在执行的循环 进入下一个循环条件</strong>)</li><li>return 程序返回，不再执行下面的代码(<strong>结束当前的方法 直接返回</strong>)</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-9.png" alt="break 、continue 、return" tabindex="0" loading="lazy"><figcaption>break 、continue 、return</figcaption></figure><h3 id="_13-用最有效率的方法计算-2-乘以-8" tabindex="-1"><a class="header-anchor" href="#_13-用最有效率的方法计算-2-乘以-8" aria-hidden="true">#</a> 13.用最有效率的方法计算 2 乘以 8？</h3><p>2 &lt;&lt; 3。<strong>位运算</strong>，数字的二进制位左移三位相当于乘以 2 的三次方。</p><h3 id="_14-说说自增自减运算-看下这几个代码运行结果" tabindex="-1"><a class="header-anchor" href="#_14-说说自增自减运算-看下这几个代码运行结果" aria-hidden="true">#</a> 14.说说自增自减运算？看下这几个代码运行结果？</h3><p>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（--）。</p><p>++和--运算符可以放在变量之前，也可以放在变量之后。</p><p>当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。</p><p>例如，当 <code>b = ++a</code> 时，先自增（自己增加 1），再赋值（赋值给 b）；当 <code>b = a++</code> 时，先赋值(赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a 值。</p><p>用一句口诀就是：“符号在前就先加/减，符号在后就后加/减”。</p><blockquote><p>看一下这段代码运行结果？</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案是 1。有点离谱对不对。</p><p>对于 JVM 而言，它对自增运算的处理，是会先定义一个临时变量来接收 i 的值，然后进行自增运算，最后又将临时变量赋给了值为 2 的 i，所以最后的结果为 1。</p><p>相当于这样的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span>；
<span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>
i<span class="token operator">++</span>；
i <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这段代码会输出什么？</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    count <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;count = &quot;</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案是 0。</p><p>和上面的题目一样的道理，同样是用了临时变量，count 实际是等于临时变量的值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">autoAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> temp <span class="token operator">=</span> count<span class="token punctuation">;</span>
    count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：笔试面试可能会碰到的奇葩题，开发这么写，见一次吊一次。</p>`,48),I={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},O={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},B=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h2><h3 id="_15-面向对象和面向过程的区别" tabindex="-1"><a class="header-anchor" href="#_15-面向对象和面向过程的区别" aria-hidden="true">#</a> 15.⾯向对象和⾯向过程的区别?</h3><ul><li><strong>⾯向过程</strong> ：面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候再一个一个的一次调用就可以。</li><li><strong>⾯向对象</strong> ：面向对象，把构成问题的事务分解成各个对象，而建立对象的目的也不是为了完成一个个步骤，而是为了描述某个事件在解决整个问题的过程所发生的行为。 目的是为了写出通用的代码，加强代码的重用，屏蔽差异性。</li></ul><p>用一个比喻：面向过程是编年体；面向对象是纪传体。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-10.png" alt="面向对象和面向过程的区别" tabindex="0" loading="lazy"><figcaption>面向对象和面向过程的区别</figcaption></figure><h3 id="_16-面向对象编程有哪些特性" tabindex="-1"><a class="header-anchor" href="#_16-面向对象编程有哪些特性" aria-hidden="true">#</a> 16.面向对象编程有哪些特性？</h3>',8),z={href:"https://javabetter.cn/oo/encapsulation-inheritance-polymorphism.html",target:"_blank",rel:"noopener noreferrer"},C=t(`<p>面向对象编程有三大特性：封装、继承、多态。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/javase-20240330115129.png" alt="二哥的 Java 进阶之路" tabindex="0" loading="lazy"><figcaption>二哥的 Java 进阶之路</figcaption></figure><h4 id="封装是什么" tabindex="-1"><a class="header-anchor" href="#封装是什么" aria-hidden="true">#</a> 封装是什么？</h4><p>封装是指将数据（属性，或者叫字段）和操作数据的方法（行为）捆绑在一起，形成一个独立的对象（类的实例）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Nvshen</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看得出，女神类对外没有提供 age 的 getter 方法，因为女神的年龄要保密。</p><p>所以，封装是把一个对象的属性私有化，同时提供一些可以被外界访问的方法。</p><h4 id="继承是什么" tabindex="-1"><a class="header-anchor" href="#继承是什么" aria-hidden="true">#</a> 继承是什么？</h4><p>继承允许一个类（子类）继承现有类（父类或者基类）的属性和方法。以提高代码的复用性，建立类之间的层次关系。</p><p>同时，子类还可以重写或者扩展从父类继承来的属性和方法，从而实现多态。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;吃饭&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> school<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;学习&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Student 类继承了 Person 类的属性（name、age）和方法（eat），同时还有自己的属性（school）和方法（study）。</p><h4 id="什么是多态" tabindex="-1"><a class="header-anchor" href="#什么是多态" aria-hidden="true">#</a> 什么是多态？</h4>`,13),E={href:"https://javabetter.cn/oo/encapsulation-inheritance-polymorphism.html",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>多态允许不同类的对象对同一消息做出响应，但表现出不同的行为（即方法的多样性）。</p><p>在我的印象里，西游记里的那段孙悟空和二郎神的精彩对战就能很好的解释“多态”这个词：一个孙悟空，能七十二变；一个二郎神，也能七十二变；他们都可以变成不同的形态，只需要喊一声“变”。</p><p>多态其实是一种能力——同一个行为具有不同的表现形式；换句话说就是，执行一段代码，Java 在运行时能根据对象类型的不同产生不同的结果。</p><p>和孙悟空和二郎神都只需要喊一声“变”，然后就变了，并且每次变得还不一样；一个道理。</p><p>多态的前置条件有三个：</p><ul><li>子类继承父类</li><li>子类重写父类的方法</li><li>父类引用指向子类的对象</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//子类继承父类</span>
<span class="token keyword">class</span> <span class="token class-name">Wangxiaoer</span> <span class="token keyword">extends</span> <span class="token class-name">Wanger</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 子类重写父类方法</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;记住仇恨，表明我们要奋发图强的心智&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父类引用指向子类对象</span>
        <span class="token class-name">Wanger</span> wanger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wangxiaoer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wanger<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Wanger</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;勿忘国耻&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_17-多态解决了什么问题-补充" tabindex="-1"><a class="header-anchor" href="#_17-多态解决了什么问题-补充" aria-hidden="true">#</a> 17.多态解决了什么问题？（补充）</h3><blockquote><p>2024 年 03 月 26 日增补</p></blockquote><p>多态的目的是为了提高代码的灵活性和可扩展性，使得代码更容易维护和扩展。比如说动态绑定，允许在程序在运行时再确定调用的是子类还是父类的方法。</p><p>现在有一个父类 Wanger，一个子类 Wangxiaoer，都有一个 write 方法。引用 wanger 的类型是父类的 Wanger，那在执行 <code>wanger.write()</code> 时，究竟该调用父类 Wanger 的 <code>write()</code> 方法，还是子类 Wangxiaoer 的 <code>write()</code> 方法呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//子类继承父类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wangxiaoer</span> <span class="token keyword">extends</span> <span class="token class-name">Wanger</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 子类覆盖父类方法</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;记住仇恨，表明我们要奋发图强的心智&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 父类引用指向子类对象</span>
        <span class="token class-name">Wanger</span><span class="token punctuation">[</span><span class="token punctuation">]</span> wangers <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token class-name">Wanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Wangxiaoer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Wanger</span> wanger <span class="token operator">:</span> wangers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 对象是王二的时候输出：勿忘国耻</span>
            <span class="token comment">// 对象是王小二的时候输出：记住仇恨，表明我们要奋发图强的心智</span>
            wanger<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Wanger</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;勿忘国耻&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>答案是在运行时根据对象的类型进行后期绑定，编译器在编译阶段并不知道对象的类型，但是 Java 的方法调用机制能找到正确的方法体，然后执行，得到正确的结果。</p><figure><img src="http://cdn.tobebetterjavaer.com/tobebetterjavaer/images/oo/extends-bigsai-2bf1876f-0c1c-4e83-8721-e6f48d6451c0.png" alt="bigsai：封装继承多态" tabindex="0" loading="lazy"><figcaption>bigsai：封装继承多态</figcaption></figure>`,14),D={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},A={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},L=n("h3",{id:"_18-重载和重写的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_18-重载和重写的区别","aria-hidden":"true"},"#"),a(" 18.重载和重写的区别？")],-1),M={href:"https://javabetter.cn/basic-extra-meal/override-overload.html",target:"_blank",rel:"noopener noreferrer"},V=t(`<p>如果一个类有多个名字相同但参数个数不同的方法，我们通常称这些方法为方法重载（overload）。如果方法的功能是一样的，但参数不同，使用相同的名字可以提高程序的可读性。</p><p>如果子类具有和父类一样的方法（参数相同、返回类型相同、方法名相同，但方法体可能不同），我们称之为方法重写（override）。方法重写用于提供父类已经声明的方法的特殊实现，是实现多态的基础条件。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/core-points/21-01.png" alt="二哥的 Java 进阶之路" tabindex="0" loading="lazy"><figcaption>二哥的 Java 进阶之路</figcaption></figure><ul><li>方法重载发生在同一个类中，同名的方法如果有不同的参数（参数类型不同、参数个数不同或者二者都不同）。</li><li>方法重写发生在子类与父类之间，要求子类与父类具有相同的返回类型，方法名和参数列表，并且不能比父类的方法声明更多的异常，遵守里氏代换原则。</li></ul><h4 id="什么是里氏代换原则" tabindex="-1"><a class="header-anchor" href="#什么是里氏代换原则" aria-hidden="true">#</a> 什么是里氏代换原则？</h4><p>里氏代换原则也被称为李氏替换原则（Liskov Substitution Principle, LSP），其规定，任何父类可以出现的地方，子类也一定可以出现。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/javase-20240321103119.png" alt="里氏替换原则由芭芭拉·利斯科夫提出，照片摄于2010年" tabindex="0" loading="lazy"><figcaption>里氏替换原则由芭芭拉·利斯科夫提出，照片摄于2010年</figcaption></figure><p>LSP 是继承复用的基石，只有当子类可以替换掉父类，软件的单位功能不受到影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。</p><p>这意味着子类在扩展父类的功能时，不应改变父类原有的行为。例如，如果有一个方法接受一个父类对象作为参数，那么传入该方法的任何子类对象也都应该能使得方法正常工作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;鸟正在飞&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token keyword">extends</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;鸭子正在飞&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Ostrich</span> <span class="token keyword">extends</span> <span class="token class-name">Bird</span> <span class="token punctuation">{</span>
    <span class="token comment">// Ostrich违反了LSP，因为鸵鸟不会飞，但却继承了会飞的鸟类</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;鸵鸟不会飞&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，Ostrich（鸵鸟）类违反了 LSP 原则，因为它改变了父类 Bird 的行为（即飞行）。设计时应该更加谨慎地使用继承关系，确保遵守 LSP 原则。</p><p>除了李氏替换原则外，还有其他几个重要的面向对象设计原则，它们共同构成了 SOLID 原则，分别是：</p><p>①、单一职责原则（Single Responsibility Principle, SRP），指一个类应该只有一个引起它变化的原因，即一个类只负责一项职责。这样做的目的是使类更加清晰，更容易理解和维护。</p><p>②、开闭原则（Open-Closed Principle, OCP），指软件实体（类、模块、方法等）应该对扩展开放，对修改关闭。这意味着设计时应该易于扩展，添加新功能时，尽量不修改现有代码，而是通过添加新代码来实现。</p><p>③、接口隔离原则（Interface Segregation Principle, ISP），指客户端不应该依赖它不需要的接口。这意味着设计接口时应该尽量精简，不应该设计臃肿庞大的接口。</p><p>④、依赖倒置原则（Dependency Inversion Principle, DIP），指高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。这意味着设计时应该尽量依赖接口或抽象类，而不是实现类。</p>`,16),R={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},N={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},W=t(`<h3 id="_19-访问修饰符-public、private、protected、以及不写-默认-时的区别" tabindex="-1"><a class="header-anchor" href="#_19-访问修饰符-public、private、protected、以及不写-默认-时的区别" aria-hidden="true">#</a> 19.访问修饰符 public、private、protected、以及不写（默认）时的区别？</h3><p>Java 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ul><li><strong>default</strong> （即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可以修饰在类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。可以修饰类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。可以修饰变量、方法。<strong>注意：不能修饰类（外部类）</strong>。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-12.png" alt="访问修饰符和可见性" tabindex="0" loading="lazy"><figcaption>访问修饰符和可见性</figcaption></figure><h3 id="_20-this-关键字有什么作用" tabindex="-1"><a class="header-anchor" href="#_20-this-关键字有什么作用" aria-hidden="true">#</a> 20.this 关键字有什么作用？</h3><p>this 是自身的一个对象，代表对象本身，可以理解为：<strong>指向对象本身的一个指针</strong>。</p><p>this 的用法在 Java 中大体可以分为 3 种：</p><ol><li><p>普通的直接引用，this 相当于是指向当前对象本身</p></li><li><p>形参与成员变量名字重名，用 this 来区分：</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>引用本类的构造函数</li></ol><h3 id="_21-抽象类-abstract-class-和接口-interface-有什么区别" tabindex="-1"><a class="header-anchor" href="#_21-抽象类-abstract-class-和接口-interface-有什么区别" aria-hidden="true">#</a> 21.抽象类(abstract class)和接口(interface)有什么区别？</h3><ol><li><p>接⼝的⽅法默认是 public ，所有⽅法在接⼝中不能有实现（Java 8 开始接⼝⽅法可以有默认实现），⽽抽象类可以有⾮抽象的⽅法。</p></li><li><p>接⼝中除了 static 、 final 变量，不能有其他变量，⽽抽象类中则不⼀定。</p></li><li><p>⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝。</p></li><li><p>接⼝⽅法默认修饰符是 public ，抽象⽅法可以有 public 、 protected 和 default 这些修饰符（抽象⽅法就是为了被重写所以不能使⽤ private 关键字修饰！）。</p></li><li><p>从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏为的规范。</p></li></ol><blockquote><ol><li><p>在 JDK8 中，接⼝也可以定义静态⽅法，可以直接⽤接⼝名调⽤。实现类和实现是不可以调⽤的。如果同时实现两个接⼝，接⼝中定义了⼀样的默认⽅法，则必须重写，不然会报错。</p></li><li><p>jdk9 的接⼝被允许定义私有⽅法 。</p></li></ol></blockquote><p>总结⼀下 jdk7~jdk9 Java 中接⼝的变化：</p><ol><li><p>在 jdk 7 或更早版本中，接⼝⾥⾯只能有常量变量和抽象⽅法。这些接⼝⽅法必须由选择实现接⼝的类实现。</p></li><li><p>jdk 8 的时候接⼝可以有默认⽅法和静态⽅法功能。</p></li><li><p>jdk 9 在接⼝中引⼊了私有⽅法和私有静态⽅法。</p></li></ol><h3 id="_22-成员变量与局部变量的区别有哪些" tabindex="-1"><a class="header-anchor" href="#_22-成员变量与局部变量的区别有哪些" aria-hidden="true">#</a> 22.成员变量与局部变量的区别有哪些？</h3><ol><li><p><strong>从语法形式上看</strong>：成员变量是属于类的，⽽局部变量是在⽅法中定义的变量或是⽅法的参数；成员变量可以被 public , private , static 等修饰符所修饰，⽽局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</p></li><li><p><strong>从变量在内存中的存储⽅式来看</strong>：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。对象存于堆内存，如果局部变量类型为基本数据类型，那么存储在栈内存，如果为引⽤数据类型，那存放的是指向堆内存对象的引⽤或者是指向常量池中的地址。</p></li><li><p><strong>从变量在内存中的⽣存时间上看</strong>：成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。</p></li><li><p><strong>成员变量如果没有被赋初值</strong>：则会⾃动以类型的默认值⽽赋值（⼀种情况例外:被 final 修饰的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。</p></li></ol><h3 id="_23-静态变量和实例变量的区别-静态方法、实例方法呢" tabindex="-1"><a class="header-anchor" href="#_23-静态变量和实例变量的区别-静态方法、实例方法呢" aria-hidden="true">#</a> 23.静态变量和实例变量的区别？静态方法、实例方法呢？</h3><blockquote><p>静态变量和实例变量的区别？</p></blockquote><p><strong>静态变量:</strong> 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个副本。</p><p><strong>实例变量:</strong> 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p><blockquote><p>静态⽅法和实例⽅法有何不同?</p></blockquote><p>类似地。</p><p><strong>静态方法</strong>：static 修饰的方法，也被称为类方法。在外部调⽤静态⽅法时，可以使⽤&quot;<strong>类名.⽅法名</strong>&quot;的⽅式，也可以使⽤&quot;<strong>对象名.⽅法名</strong>&quot;的⽅式。静态方法里不能访问类的非静态成员变量和方法。</p><p><strong>实例⽅法</strong>：依存于类的实例，需要使用&quot;<strong>对象名.⽅法名</strong>&quot;的⽅式调用；可以访问类的所有成员变量和方法。</p><h3 id="_24-final-关键字有什么作用" tabindex="-1"><a class="header-anchor" href="#_24-final-关键字有什么作用" aria-hidden="true">#</a> 24.final 关键字有什么作用？</h3><p>final 表示不可变的意思，可用于修饰类、属性和方法：</p><ul><li><p>被 final 修饰的类不可以被继承</p></li><li><p>被 final 修饰的方法不可以被重写</p></li><li><p>被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。</p><p>例如：</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//abcd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一张图说明：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-13.png" alt="final修饰变量" tabindex="0" loading="lazy"><figcaption>final修饰变量</figcaption></figure><h3 id="_25-final、finally、finalize-的区别" tabindex="-1"><a class="header-anchor" href="#_25-final、finally、finalize-的区别" aria-hidden="true">#</a> 25.final、finally、finalize 的区别？</h3>`,32),F={href:"https://javabetter.cn/oo/final.html",target:"_blank",rel:"noopener noreferrer"},K=n("p",null,"②、finally 是 Java 中异常处理的一部分，用来创建 try 块后面的 finally 块。无论 try 块中的代码是否抛出异常，finally 块中的代码总是会被执行。通常，finally 块被用来释放资源，如关闭文件、数据库连接等。",-1),T={href:"https://javabetter.cn/oo/object-class.html#_05%E3%80%81%E5%85%B3%E4%BA%8E-object-%E7%B1%BB",target:"_blank",rel:"noopener noreferrer"},G=n("p",null,"这个方法在垃圾回收器准备释放对象占用的内存之前被自动调用。我们不能显式地调用 finalize 方法，因为它总是由垃圾回收器在适当的时间自动调用。",-1),H=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/stutymore/javase-20240407165712.png",alt:"二哥的 Java 进阶之路",tabindex:"0",loading:"lazy"}),n("figcaption",null,"二哥的 Java 进阶之路")],-1),U={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},X=t(`<h3 id="_26-和-equals-的区别" tabindex="-1"><a class="header-anchor" href="#_26-和-equals-的区别" aria-hidden="true">#</a> 26.==和 equals 的区别？</h3><p><strong>==</strong> : 它的作⽤是判断两个对象的地址是不是相等。即，判断两个对象是不是同⼀个对象(基本数据类型 <strong>==</strong> 比较的是值，引⽤数据类型 <strong>==</strong> 比较的是内存地址)。</p><p><strong>equals()</strong> : 它的作⽤也是判断两个对象是否相等。但是这个“相等”一般也分两种情况：</p><ul><li><p>默认情况：类没有覆盖 equals() ⽅法。则通过 equals() 比较该类的两个对象时，等价于通过“ <strong>==</strong> ”比较这两个对象，还是相当于比较内存地址。</p></li><li><p>自定义情况：类覆盖了 equals() ⽅法。我们平时覆盖的 equals()方法一般是比较两个对象的内容是否相同，自定义了一个相等的标准，也就是两个对象的值是否相等。</p></li></ul><p>举个例⼦，Person，我们认为两个人的编号和姓名相同，就是一个人：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> no<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span> person<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>no<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_27-hashcode-与-equals" tabindex="-1"><a class="header-anchor" href="#_27-hashcode-与-equals" aria-hidden="true">#</a> 27.hashCode 与 equals?</h3><p>这道题也是面试常问得——“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode ⽅法？”</p><h4 id="什么是-hashcode-方法" tabindex="-1"><a class="header-anchor" href="#什么是-hashcode-方法" aria-hidden="true">#</a> 什么是 hashCode 方法？</h4>`,9),Q=n("code",null,"hashCode()",-1),Z={href:"https://javabetter.cn/oo/object-class.html",target:"_blank",rel:"noopener noreferrer"},Y=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="为什么要有-hashcode-方法" tabindex="-1"><a class="header-anchor" href="#为什么要有-hashcode-方法" aria-hidden="true">#</a> 为什么要有 hashCode 方法？</h4><p>hashCode 方法主要用来获取对象的哈希码，哈希码是由对象的内存地址或者对象的属性计算出来的，它是⼀个 int 类型的整数，通常是不会重复的，因此可以用来作为键值对的建，以提高查询效率。</p>`,3),$={href:"https://javabetter.cn/collection/hashmap.html#_01%E3%80%81hash%E6%96%B9%E6%B3%95%E7%9A%84%E5%8E%9F%E7%90%86",target:"_blank",rel:"noopener noreferrer"},nn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="为什么重写-quals-时必须重写-hashcode-方法" tabindex="-1"><a class="header-anchor" href="#为什么重写-quals-时必须重写-hashcode-方法" aria-hidden="true">#</a> 为什么重写 quals 时必须重写 hashCode ⽅法？</h4><p>维护 <code>equals()</code>和 <code>hashCode()</code>之间的一致性是至关重要的，因为基于哈希的集合类（如 HashSet、HashMap、Hashtable 等）依赖于这一点来正确存储和检索对象。</p><p>具体地说，这些集合通过对象的哈希码将其存储在不同的“桶”中（底层数据结构是数组，哈希码用来确定下标），当查找对象时，它们使用哈希码确定在哪个桶中搜索，然后通过 <code>equals()</code>方法在桶中找到正确的对象。</p><p>如果重写了 <code>equals()</code>方法而没有重写 <code>hashCode()</code>方法，那么被认为相等的对象可能会有不同的哈希码，从而导致无法在集合中正确处理这些对象。</p><h4 id="为什么两个对象有相同的-hashcode-值-它们也不一定相等" tabindex="-1"><a class="header-anchor" href="#为什么两个对象有相同的-hashcode-值-它们也不一定相等" aria-hidden="true">#</a> 为什么两个对象有相同的 hashcode 值，它们也不⼀定相等？</h4><p>这主要是由于哈希码（hashCode）的本质和目的所决定的。</p><p>哈希码是通过哈希函数将对象中映射成一个整数值，其主要目的是在哈希表中快速定位对象的存储位置。</p><p>由于哈希函数将一个较大的输入域映射到一个较小的输出域，不同的输入值（即不同的对象）可能会产生相同的输出值（即相同的哈希码）。</p><p>这种情况被称为哈希冲突。当两个不相等的对象发生哈希冲突时，它们会有相同的 hashCode。</p><p>为了解决哈希冲突的问题，哈希表在处理键时，不仅会比较键对象的哈希码，还会使用 equals 方法来检查键对象是否真正相等。如果两个对象的哈希码相同，但通过 equals 方法比较结果为 false，那么这两个对象就不被视为相等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    e <span class="token operator">=</span> p<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),an={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},sn=t('<h3 id="_28-java-是值传递-还是引用传递" tabindex="-1"><a class="header-anchor" href="#_28-java-是值传递-还是引用传递" aria-hidden="true">#</a> 28.Java 是值传递，还是引用传递？</h3><p>Java 是值传递，不是引用传递。</p><p>当一个对象被作为参数传递到方法中时，参数的值就是该对象的引用。引用的值是对象在堆中的地址。</p><p>对象是存储在堆中的，所以传递对象的时候，可以理解为把变量存储的对象地址给传递过去。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-14.png" alt="三分恶面渣逆袭：Java引用数据值传递示意图" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：Java引用数据值传递示意图</figcaption></figure><h4 id="引用类型的变量有什么特点" tabindex="-1"><a class="header-anchor" href="#引用类型的变量有什么特点" aria-hidden="true">#</a> 引用类型的变量有什么特点？</h4><p>引用类型的变量存储的是对象的地址，而不是对象本身。因此，引用类型的变量在传递时，传递的是对象的地址，也就是说，传递的是引用的值。</p>',7),en={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},tn=t('<h3 id="_29-深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#_29-深拷贝和浅拷贝" aria-hidden="true">#</a> 29.深拷贝和浅拷贝?</h3><ul><li><strong>浅拷贝</strong>：仅拷贝被拷贝对象的成员变量的值，也就是基本数据类型变量的值，和引用数据类型变量的地址值，而对于引用类型变量指向的堆中的对象不会拷贝。</li><li><strong>深拷贝</strong>：完全拷贝一个对象，拷贝被拷贝对象的成员变量的值，堆中的对象也会拷贝一份。</li></ul><p>例如现在有一个 order 对象，里面有一个 products 列表，它的浅拷贝和深拷贝的示意图：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-15.png" alt="浅拷贝和深拷贝示意图" tabindex="0" loading="lazy"><figcaption>浅拷贝和深拷贝示意图</figcaption></figure><p>因此深拷贝是安全的，浅拷贝的话如果有引用类型，那么拷贝后对象，引用类型变量修改，会影响原对象。</p><blockquote><p>浅拷贝如何实现呢？</p></blockquote><p>Object 类提供的 clone()方法可以非常简单地实现对象的浅拷贝。</p><blockquote><p>深拷贝如何实现呢？</p></blockquote><ul><li>重写克隆方法：重写克隆方法，引用类型变量单独克隆，这里可能会涉及多层递归。</li><li>序列化：可以先将原对象序列化，再反序列化成拷贝对象。</li></ul><h3 id="_30-java-创建对象有哪几种方式" tabindex="-1"><a class="header-anchor" href="#_30-java-创建对象有哪几种方式" aria-hidden="true">#</a> 30.Java 创建对象有哪几种方式？</h3><p>Java 中有以下四种创建对象的方式:</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-16.png" alt="Java创建对象的四种方式" tabindex="0" loading="lazy"><figcaption>Java创建对象的四种方式</figcaption></figure><ul><li>new 创建新对象</li><li>通过反射机制</li><li>采用 clone 机制</li><li>通过序列化机制</li></ul><p>前两者都需要显式地调用构造方法。对于 clone 机制,需要注意浅拷贝和深拷贝的区别，对于序列化机制需要明确其实现原理，在 Java 中序列化可以通过实现 Externalizable 或者 Serializable 来实现。</p>',14),pn={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},on={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},cn=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h2><h3 id="_31-string-是-java-基本数据类型吗-可以被继承吗" tabindex="-1"><a class="header-anchor" href="#_31-string-是-java-基本数据类型吗-可以被继承吗" aria-hidden="true">#</a> 31.String 是 Java 基本数据类型吗？可以被继承吗？</h3><blockquote><p>String 是 Java 基本数据类型吗？</p></blockquote><p>不是。Java 中的基本数据类型只有 8 个：byte、short、int、long、float、double、char、boolean；除了基本类型（primitive type），剩下的都是引用类型（reference type）。</p><p>String 是一个比较特殊的引用数据类型。</p><blockquote><p>String 类可以继承吗？</p></blockquote><p>不行。String 类使用 final 修饰，是所谓的不可变类，无法被继承。</p><h3 id="_32-string-和-stringbuilder、stringbuffer-的区别" tabindex="-1"><a class="header-anchor" href="#_32-string-和-stringbuilder、stringbuffer-的区别" aria-hidden="true">#</a> 32.String 和 StringBuilder、StringBuffer 的区别？</h3>',10),ln={href:"https://javabetter.cn/string/builder-buffer.html",target:"_blank",rel:"noopener noreferrer"},rn=n("p",null,[n("code",null,"String"),a("、"),n("code",null,"StringBuilder"),a("和"),n("code",null,"StringBuffer"),a("在 Java 中都是用于处理字符串的，它们之间的区别是，String 是不可变的，平常开发用得最多，当遇到大量字符串连接时，就用 StringBuilder，它不会生成很多新的对象，StringBuffer 和 StringBuilder 类似，但每个方法上都加了 synchronized 关键字，所以是线程安全的。")],-1),un=n("h4",{id:"string-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#string-1","aria-hidden":"true"},"#"),a(" String")],-1),dn=n("code",null,"String",-1),kn={href:"https://javabetter.cn/string/immutable.html",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"String",-1),bn=n("li",null,[a("每次对"),n("code",null,"String"),a("对象进行修改操作（如拼接、替换等）实际上都会生成一个新的"),n("code",null,"String"),a("对象，而不是修改原有对象。这可能会导致内存和性能开销，尤其是在大量字符串操作的情况下。")],-1),mn=t('<h4 id="stringbuilder" tabindex="-1"><a class="header-anchor" href="#stringbuilder" aria-hidden="true">#</a> StringBuilder</h4><ul><li><code>StringBuilder</code>提供了一系列的方法来进行字符串的增删改查操作，这些操作都是直接在原有字符串对象的底层数组上进行的，而不是生成新的 String 对象。</li><li><code>StringBuilder</code>不是线程安全的。这意味着在没有外部同步的情况下，它不适用于多线程环境。</li><li>相比于<code>String</code>，在进行频繁的字符串修改操作时，<code>StringBuilder</code>能提供更好的性能。 Java 中的字符串连<code>+</code>操作其实就是通过<code>StringBuilder</code>实现的。</li></ul><h4 id="stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuffer" aria-hidden="true">#</a> StringBuffer</h4><p><code>StringBuffer</code>和<code>StringBuilder</code>类似，但<code>StringBuffer</code>是线程安全的，方法前面都加了<code>synchronized</code>关键字。</p><h4 id="使用场景总结" tabindex="-1"><a class="header-anchor" href="#使用场景总结" aria-hidden="true">#</a> 使用场景总结</h4><ul><li><strong>String</strong>：适用于字符串内容不经常改变的场景。在使用字符串常量或进行少量的字符串操作时使用。</li><li><strong>StringBuilder</strong>：适用于单线程环境下需要频繁修改字符串内容的场景，比如在循环中拼接或修改字符串。</li><li><strong>StringBuffer</strong>：适用于多线程环境下需要频繁修改字符串内容的场景，保证了字符串操作的线程安全。</li></ul>',6),gn={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},fn=t('<h3 id="_33-string-str1-new-string-abc-和-string-str2-abc-和-区别" tabindex="-1"><a class="header-anchor" href="#_33-string-str1-new-string-abc-和-string-str2-abc-和-区别" aria-hidden="true">#</a> 33.String str1 = new String(&quot;abc&quot;)和 String str2 = &quot;abc&quot; 和 区别？</h3><p>两个语句都会去字符串常量池中检查是否已经存在 “abc”，如果有则直接使用，如果没有则会在常量池中创建 “abc” 对象。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-17.png" alt="堆与常量池中的String" tabindex="0" loading="lazy"><figcaption>堆与常量池中的String</figcaption></figure><p>但是不同的是，String str1 = new String(&quot;abc&quot;) 还会通过 new String() 在堆里创建一个 &quot;abc&quot; 字符串对象实例。所以后者可以理解为被前者包含。</p><blockquote><p>String s = new String(&quot;abc&quot;)创建了几个对象？</p></blockquote><p>很明显，一个或两个。如果字符串常量池已经有“abc”，则是一个；否则，两个。</p><p>当字符创常量池没有 “abc”，此时会创建如下两个对象：</p><ul><li>一个是字符串字面量 &quot;abc&quot; 所对应的、字符串常量池中的实例</li><li>另一个是通过 new String() 创建并初始化的，内容与&quot;abc&quot;相同的实例，在堆中。</li></ul><h3 id="_34-string-是不可变类吗-字符串拼接是如何实现的" tabindex="-1"><a class="header-anchor" href="#_34-string-是不可变类吗-字符串拼接是如何实现的" aria-hidden="true">#</a> 34.String 是不可变类吗？字符串拼接是如何实现的？</h3>',9),yn={href:"https://javabetter.cn/string/immutable.html",target:"_blank",rel:"noopener noreferrer"},jn={href:"https://javabetter.cn/string/join.html",target:"_blank",rel:"noopener noreferrer"},_n=t(`<p>String 是不可变的，这意味着一旦一个 String 对象被创建，其存储的文本内容就不能被改变。这是因为：</p><p>①、不可变性使得 String 对象在使用中更加安全。因为字符串经常用作参数传递给其他 Java 方法，例如网络连接、打开文件等。</p><p>如果 String 是可变的，这些方法调用的参数值就可能在不知不觉中被改变，从而导致网络连接被篡改、文件被莫名其妙地修改等问题。</p><p>②、不可变的对象因为状态不会改变，所以更容易进行缓存和重用。字符串常量池的出现正是基于这个原因。</p><p>当代码中出现相同的字符串字面量时，JVM 会确保所有的引用都指向常量池中的同一个对象，从而节约内存。</p><p>③、因为 String 的内容不会改变，所以它的哈希值也就固定不变。这使得 String 对象特别适合作为 HashMap 或 HashSet 等集合的键，因为计算哈希值只需要进行一次，提高了哈希表操作的效率。</p><p>因为 String 是不可变的，因此通过“<strong>+</strong>”操作符进行的字符串拼接，会生成新的字符串对象。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;hello &quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;world!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> ab <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>a 和 b 是通过双引号定义的，所以会在字符串常量池中，而 ab 是通过“+”操作符拼接的，所以会在堆中生成一个新的对象。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-18.png" alt="三分恶面渣逆袭：jdk1.8之前的字符串拼接" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：jdk1.8之前的字符串拼接</figcaption></figure><p><strong>Java 8 时</strong>，JDK 对“+”号的字符串拼接进行了优化，Java 会在编译期基于 StringBuilder 的 append 方法进行拼接。</p><p>下面是通过 <code>javap -verbose</code> 命令反编译后的字节码，能清楚的看到 StringBuilder 的创建和 append 方法的调用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span>
     <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String hello</span>
     <span class="token number">2</span><span class="token operator">:</span> astore_1
     <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String world!</span>
     <span class="token number">5</span><span class="token operator">:</span> astore_2
     <span class="token number">6</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">4</span>                  <span class="token comment">// class java/lang/StringBuilder</span>
     <span class="token number">9</span><span class="token operator">:</span> dup
    <span class="token number">10</span><span class="token operator">:</span> invokespecial #<span class="token number">5</span>                  <span class="token comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span>
    <span class="token number">13</span><span class="token operator">:</span> aload_1
    <span class="token number">14</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
    <span class="token number">17</span><span class="token operator">:</span> aload_2
    <span class="token number">18</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span>
    <span class="token number">21</span><span class="token operator">:</span> invokevirtual #<span class="token number">7</span>                  <span class="token comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span>
    <span class="token number">24</span><span class="token operator">:</span> astore_3
    <span class="token number">25</span><span class="token operator">:</span> <span class="token keyword">return</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，上面的代码相当于：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">&quot;hello &quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">&quot;world!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> ab <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，如果笼统地讲，通过加号拼接字符串时会创建多个 String 对象是不准确的。因为加号拼接在编译期还会创建一个 StringBuilder 对象，最终调用 <code>toString()</code> 方法的时候再返回一个新的 String 对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Create a copy, don&#39;t share the array</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),wn={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},xn=t(`<h3 id="_35-intern-方法有什么作用" tabindex="-1"><a class="header-anchor" href="#_35-intern-方法有什么作用" aria-hidden="true">#</a> 35.intern 方法有什么作用？</h3><p>JDK 源码里已经对这个方法进行了说明：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>     <span class="token operator">*</span> <span class="token generics"><span class="token punctuation">&lt;</span>p<span class="token punctuation">&gt;</span></span>
     <span class="token operator">*</span> <span class="token class-name">When</span> the intern method is invoked<span class="token punctuation">,</span> <span class="token keyword">if</span> the pool already contains a
     <span class="token operator">*</span> string equal <span class="token keyword">to</span> <span class="token keyword">this</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@code</span> <span class="token class-name">String</span><span class="token punctuation">}</span> object as determined by
     <span class="token operator">*</span> the <span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> #<span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">}</span> method<span class="token punctuation">,</span> then the string from the pool is
     <span class="token operator">*</span> <span class="token class-name"><span class="token namespace">returned<span class="token punctuation">.</span></span> Otherwise</span><span class="token punctuation">,</span> <span class="token keyword">this</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@code</span> <span class="token class-name">String</span><span class="token punctuation">}</span> object is added <span class="token keyword">to</span> <span class="token namespace">the</span>
     <span class="token operator">*</span> pool and a reference <span class="token keyword">to</span> <span class="token keyword">this</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@code</span> <span class="token class-name">String</span><span class="token punctuation">}</span> object is returned<span class="token punctuation">.</span>
     <span class="token operator">*</span> <span class="token generics"><span class="token punctuation">&lt;</span>p<span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思也很好懂：</p><ul><li>如果当前字符串内容存在于字符串常量池（即 equals()方法为 true，也就是内容一样），直接返回字符串常量池中的字符串</li><li>否则，将此 String 对象添加到池中，并返回 String 对象的引用</li></ul>`,5),qn={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},Jn={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},Sn=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="integer" tabindex="-1"><a class="header-anchor" href="#integer" aria-hidden="true">#</a> Integer</h2><h3 id="_36-integer-a-127-integer-b-127-integer-c-128-integer-d-128-相等吗" tabindex="-1"><a class="header-anchor" href="#_36-integer-a-127-integer-b-127-integer-c-128-integer-d-128-相等吗" aria-hidden="true">#</a> 36.Integer a= 127，Integer b = 127；Integer c= 128，Integer d = 128；相等吗?</h3>',4),In={href:"https://javabetter.cn/basic-extra-meal/int-cache.html",target:"_blank",rel:"noopener noreferrer"},On={href:"https://javabetter.cn/basic-extra-meal/box.html",target:"_blank",rel:"noopener noreferrer"},Bn=t(`<p>a 和 b 相等，c 和 d 不相等。</p><p>这个问题涉及到 Java 的自动装箱机制以及<code>Integer</code>类的缓存机制。</p><p>对于第一对：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>a</code>和<code>b</code>是相等的。这是因为 Java 在自动装箱过程中，会使用<code>Integer.valueOf()</code>方法来创建<code>Integer</code>对象。</p><p><code>Integer.valueOf()</code>方法会针对数值在-128 到 127 之间的<code>Integer</code>对象使用缓存。因此，<code>a</code>和<code>b</code>实际上引用了常量池中相同的<code>Integer</code>对象。</p><p>对于第二对：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>c</code>和<code>d</code>不相等。这是因为 128 超出了<code>Integer</code>缓存的范围(-128 到 127)。</p><p>因此，自动装箱过程会为<code>c</code>和<code>d</code>创建两个不同的<code>Integer</code>对象，它们有不同的引用地址。</p><p>可以通过<code>==</code>运算符来检查它们是否相等：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>要比较<code>Integer</code>对象的数值是否相等，应该使用<code>equals</code>方法，而不是<code>==</code>运算符：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>equals</code>方法时，<code>c</code>和<code>d</code>的比较结果为<code>true</code>，因为<code>equals</code>比较的是对象的数值，而不是引用地址。</p><h4 id="什么是-integer-缓存" tabindex="-1"><a class="header-anchor" href="#什么是-integer-缓存" aria-hidden="true">#</a> 什么是 Integer 缓存？</h4><p>根据实践发现，大部分的数据操作都集中在值比较小的范围，因此 Integer 搞了个缓存池，默认范围是 -128 到 127。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/javase-20240323080956.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当我们使用自动装箱来创建这个范围内的 Integer 对象时，Java 会直接从缓存中返回一个已存在的对象，而不是每次都创建一个新的对象。这意味着，对于这个值范围内的所有 Integer 对象，它们实际上是引用相同的对象实例。</p><p>Integer 缓存的主要目的是优化性能和内存使用。对于小整数的频繁操作，使用缓存可以显著减少对象创建的数量。</p><p>可以在运行的时候添加 <code>-Djava.lang.Integer.IntegerCache.high=1000</code> 来调整缓存池的最大值。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/javase-20240323082802.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>引用是 Integer 类型，= 右侧是 int 基本类型时，会进行自动装箱，调用的其实是 <code>Integer.valueOf()</code>方法，它会调用 IntegerCache。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>high<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>cache<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token class-name">IntegerCache</span><span class="token punctuation">.</span>low<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IntegerCache 是一个静态内部类，在静态代码块中会初始化好缓存的值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>
    ……
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token comment">//创建Integer对象存储</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>
            cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ……
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="new-integer-10-new-integer-10-相等吗" tabindex="-1"><a class="header-anchor" href="#new-integer-10-new-integer-10-相等吗" aria-hidden="true">#</a> new Integer(10) == new Integer(10) 相等吗</h4><p>在 Java 中，使用<code>new Integer(10) == new Integer(10)</code>进行比较时，结果是 false。</p><p>这是因为 new 关键字会在堆（Heap）上为每个 Integer 对象分配新的内存空间，所以这里创建了两个不同的 Integer 对象，它们有不同的内存地址。</p><p>当使用==运算符比较这两个对象时，实际上比较的是它们的内存地址，而不是它们的值，因此即使两个对象代表相同的数值（10），结果也是 false。</p>`,30),zn={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},Cn=t(`<h3 id="_37-string-怎么转成-integer-的-原理" tabindex="-1"><a class="header-anchor" href="#_37-string-怎么转成-integer-的-原理" aria-hidden="true">#</a> 37.String 怎么转成 Integer 的？原理？</h3><p>PS:这道题印象中在一些面经中出场过几次。</p><p>String 转成 Integer，主要有两个方法：</p><ul><li>Integer.parseInt(String s)</li><li>Integer.valueOf(String s)</li></ul><p>不管哪一种，最终还是会调用 Integer 类内中的<code>parseInt(String s, int radix)</code>方法。</p><p>抛去一些边界之类的看看核心代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> radix<span class="token punctuation">)</span>
                <span class="token keyword">throws</span> <span class="token class-name">NumberFormatException</span>
    <span class="token punctuation">{</span>

        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//是否是负数</span>
        <span class="token keyword">boolean</span> negative <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token comment">//char字符数组下标和长度</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ……
        <span class="token keyword">int</span> digit<span class="token punctuation">;</span>
        <span class="token comment">//判断字符长度是否大于0，否则抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ……
            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Accumulating negatively avoids surprises near MAX_VALUE</span>
                <span class="token comment">//返回指定基数中字符表示的数值。（此处是十进制数值）</span>
                digit <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">digit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span>radix<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//进制位乘以数值</span>
                result <span class="token operator">*=</span> radix<span class="token punctuation">;</span>
                result <span class="token operator">-=</span> digit<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//根据上面得到的是否负数，返回相应的值</span>
        <span class="token keyword">return</span> negative <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token operator">-</span>result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>去掉枝枝蔓蔓（当然这些枝枝蔓蔓可以去看看，源码 cover 了很多情况），其实剩下的就是一个简单的字符串遍历计算，不过计算方式有点反常规，是用负的值累减。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-20.png" alt="parseInt示意图" tabindex="0" loading="lazy"><figcaption>parseInt示意图</figcaption></figure>`,9),En={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},Pn={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},Dn=t('<p>微信搜 <strong>沉默王二</strong> 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 <strong>222</strong> 即可免费领取。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h2><h3 id="_38-object-类的常见方法" tabindex="-1"><a class="header-anchor" href="#_38-object-类的常见方法" aria-hidden="true">#</a> 38.Object 类的常见方法？</h3><p>在 Java 中，经常提到一个词“万物皆对象”，其中的“万物”指的是 Java 中的所有类，而这些类都是 Object 类的子类。</p><p>Object 主要提供了 11 个方法，大致可以分为六类：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-21.png" alt="三分恶面渣逆袭：Object类的方法" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：Object类的方法</figcaption></figure><h4 id="对象比较" tabindex="-1"><a class="header-anchor" href="#对象比较" aria-hidden="true">#</a> 对象比较：</h4>',8),An=n("code",null,"public native int hashCode()",-1),Ln={href:"https://javabetter.cn/oo/native-method.html",target:"_blank",rel:"noopener noreferrer"},Mn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),Vn={href:"https://javabetter.cn/common-tool/Objects.html#%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84hashcode",target:"_blank",rel:"noopener noreferrer"},Rn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>②、<code>public boolean equals(Object obj)</code>：用于比较 2 个对象的内存地址是否相等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Nn={href:"https://javabetter.cn/string/string-source.html",target:"_blank",rel:"noopener noreferrer"},Wn=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person1</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token comment">// 省略 gettter 和 setter 方法</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Person1</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person1</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="对象拷贝" tabindex="-1"><a class="header-anchor" href="#对象拷贝" aria-hidden="true">#</a> 对象拷贝：</h4>`,2),Fn=n("code",null,"protected native Object clone() throws CloneNotSupportedException",-1),Kn={href:"https://javabetter.cn/basic-extra-meal/deep-copy.html",target:"_blank",rel:"noopener noreferrer"},Tn=t(`<p>Object 本身没有实现 Cloneable 接口，所以在不重写 clone 方法的情况下直接直接调用该方法会发生 CloneNotSupportedException 异常。</p><h4 id="对象转字符串" tabindex="-1"><a class="header-anchor" href="#对象转字符串" aria-hidden="true">#</a> 对象转字符串：</h4><p><code>public String toString()</code>：返回对象的字符串表示。默认实现返回类名@哈希码的十六进制表示，但通常会被重写以返回更有意义的信息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如说一个 Person 类，我们可以重写 toString 方法，返回一个有意义的字符串：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;Person{&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
            <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span>
            <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然了，这项工作也可以直接交给 IDE，比如 IntelliJ IDEA，直接右键选择 Generate，然后选择 toString 方法，就会自动生成一个 toString 方法。</p>`,7),Gn={href:"https://javabetter.cn/springboot/lombok.html",target:"_blank",rel:"noopener noreferrer"},Hn=t(`<p>数组也是一个对象，所以通常我们打印数组的时候，会看到诸如 <code>[I@1b6d3586</code> 这样的字符串，这个就是 int 数组的哈希码。</p><h4 id="多线程调度" tabindex="-1"><a class="header-anchor" href="#多线程调度" aria-hidden="true">#</a> 多线程调度：</h4><p>每个对象都可以调用 Object 的 wait/notify 方法来实现等待/通知机制。我们来写一个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaitNotifyDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程1：我要等待&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    lock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程1：我被唤醒了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程2：我要唤醒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                lock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程2：我已经唤醒了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释一下：</p><ul><li>线程 1 先执行，它调用了 <code>lock.wait()</code> 方法，然后进入了等待状态。</li><li>线程 2 后执行，它调用了 <code>lock.notify()</code> 方法，然后线程 1 被唤醒了。</li></ul><p>①、<code>public final void wait() throws InterruptedException</code>：调用该方法会导致当前线程等待，直到另一个线程调用此对象的<code>notify()</code>方法或<code>notifyAll()</code>方法。</p><p>②、<code>public final native void notify()</code>：唤醒在此对象监视器上等待的单个线程。如果有多个线程等待，选择一个线程被唤醒。</p><p>③、<code>public final native void notifyAll()</code>：唤醒在此对象监视器上等待的所有线程。</p><p>④、<code>public final native void wait(long timeout) throws InterruptedException</code>：等待 timeout 毫秒，如果在 timeout 毫秒内没有被唤醒，会自动唤醒。</p><p>⑥、<code>public final void wait(long timeout, int nanos) throws InterruptedException</code>：更加精确了，等待 timeout 毫秒和 nanos 纳秒，如果在 timeout 毫秒和 nanos 纳秒内没有被唤醒，会自动唤醒。</p><h4 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射：</h4>`,12),Un={href:"https://javabetter.cn/basic-extra-meal/fanshe.html",target:"_blank",rel:"noopener noreferrer"},Xn=t(`<p><code>public final native Class&lt;?&gt; getClass()</code>：用于获取对象的类信息，如类名。比如说：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetClassDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.itwanger.Person
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收：</h4><p><code>protected void finalize() throws Throwable</code>：当垃圾回收器决定回收对象占用的内存时调用此方法。用于清理资源，但 Java 不推荐使用，因为它不可预测且容易导致问题，Java 9 开始已被弃用。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/javase-20240313085055.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,7),Qn={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},Zn=n("h2",{id:"异常处理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#异常处理","aria-hidden":"true"},"#"),a(" 异常处理")],-1),Yn=n("h3",{id:"_39-java-中异常处理体系",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_39-java-中异常处理体系","aria-hidden":"true"},"#"),a(" 39.Java 中异常处理体系?")],-1),$n={href:"https://javabetter.cn/exception/gailan.html",target:"_blank",rel:"noopener noreferrer"},na=t('<figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-22.png" alt="三分恶面渣逆袭：Java异常体系" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：Java异常体系</figcaption></figure><p><code>Throwable</code> 是 Java 语言中所有错误和异常的基类。它有两个主要的子类：Error 和 Exception，这两个类分别代表了 Java 异常处理体系中的两个分支。</p><p>Error 类代表那些严重的错误，这类错误通常是程序无法处理的。比如，OutOfMemoryError 表示内存不足，StackOverflowError 表示栈溢出。这些错误通常与 JVM 的运行状态有关，一旦发生，应用程序通常无法恢复。</p><p>Exception 类代表程序可以处理的异常。它分为两大类：编译时异常（Checked Exception）和运行时异常（Runtime Exception）。</p><p>①、编译时异常（Checked Exception）：这类异常在编译时必须被显式处理（捕获或声明抛出）。</p><p>如果方法可能抛出某种编译时异常，但没有捕获它（try-catch）或没有在方法声明中用 throws 子句声明它，那么编译将不会通过。例如：IOException、SQLException 等。</p><p>②、运行时异常（Runtime Exception）：这类异常在运行时抛出，它们都是 RuntimeException 的子类。对于运行时异常，Java 编译器不要求必须处理它们（即不需要捕获也不需要声明抛出）。</p><p>运行时异常通常是由程序逻辑错误导致的，如 NullPointerException、IndexOutOfBoundsException 等。</p>',8),aa={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},sa={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},ea={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},ta=t(`<h3 id="_40-异常的处理方式" tabindex="-1"><a class="header-anchor" href="#_40-异常的处理方式" aria-hidden="true">#</a> 40.异常的处理方式？</h3><p>针对异常的处理主要有两种方式：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-23.png" alt="异常处理" tabindex="0" loading="lazy"><figcaption>异常处理</figcaption></figure><ul><li><strong>遇到异常不进行具体处理，而是继续抛给调用者 （throw，throws）</strong></li></ul><p>抛出异常有三种形式，一是 throw,一个 throws，还有一种系统自动抛异常。</p><p>throws 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。</p><ul><li><strong>try catch 捕获异常</strong></li></ul><p>在 catch 语句块中补货发生的异常，并进行处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>       <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//包含可能会出现异常的代码以及声明异常的方法</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//捕获异常并进行处理</span>
        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                                                       <span class="token punctuation">}</span>
            <span class="token comment">//可选，必执行的代码</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>try-catch 捕获异常的时候还可以选择加上 finally 语句块，finally 语句块不管程序是否正常执行，最终它都会必然执行。</p><h3 id="_41-三道经典异常处理代码题" tabindex="-1"><a class="header-anchor" href="#_41-三道经典异常处理代码题" aria-hidden="true">#</a> 41.三道经典异常处理代码题</h3><h4 id="题目-1" tabindex="-1"><a class="header-anchor" href="#题目-1" aria-hidden="true">#</a> 题目 1</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>test()</code>方法中，首先有一个<code>try</code>块，接着是一个<code>catch</code>块（用于捕获异常），最后是一个<code>finally</code>块（无论是否捕获到异常，<code>finally</code>块总会执行）。</p><p>①、<code>try</code>块中包含一条<code>return 1;</code>语句。正常情况下，如果<code>try</code>块中的代码能够顺利执行，那么方法将返回数字<code>1</code>。在这个例子中，<code>try</code>块中没有任何可能抛出异常的操作，因此它会正常执行完毕，并准备返回<code>1</code>。</p><p>②、由于<code>try</code>块中没有异常发生，所以<code>catch</code>块中的代码不会执行。</p><p>③、无论前面的代码是否发生异常，<code>finally</code>块总是会执行。在这个例子中，<code>finally</code>块包含一条<code>System.out.print(&quot;3&quot;);</code>语句，意味着在方法结束前，会在控制台打印出<code>3</code>。</p><p>当执行<code>main</code>方法时，控制台的输出将会是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>31
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是因为<code>finally</code>块确保了它包含的<code>System.out.print(&quot;3&quot;);</code>会执行并打印<code>3</code>，随后<code>test()</code>方法返回<code>try</code>块中的值<code>1</code>，最终结果就是<code>31</code>。</p><h4 id="题目-2" tabindex="-1"><a class="header-anchor" href="#题目-2" aria-hidden="true">#</a> 题目 2</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：3。</p><p>try 返回前先执行 finally，结果 finally 里不按套路出牌，直接 return 了，自然也就走不到 try 里面的 return 了。</p><p>注意：finally 里面使用 return 仅存在于面试题中，实际开发这么写要挨吊的（😂）。</p><h4 id="题目-3" tabindex="-1"><a class="header-anchor" href="#题目-3" aria-hidden="true">#</a> 题目 3</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果：2。</p><p>大家可能会以为结果应该是 3，因为在 return 前会执行 finally，而 i 在 finally 中被修改为 3 了，那最终返回 i 不是应该为 3 吗？</p><p>但其实，在执行 finally 之前，JVM 会先将 i 的结果暂存起来，然后 finally 执行完毕后，会返回之前暂存的结果，而不是返回 i，所以即使 i 已经被修改为 3，最终返回的还是之前暂存起来的结果 2。</p>`,30),pa={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},oa=t('<h2 id="i-o" tabindex="-1"><a class="header-anchor" href="#i-o" aria-hidden="true">#</a> I/O</h2><h3 id="_42-java-中-io-流分为几种" tabindex="-1"><a class="header-anchor" href="#_42-java-中-io-流分为几种" aria-hidden="true">#</a> 42.Java 中 IO 流分为几种?</h3><p>流按照不同的特点，有很多种划分方式。</p><ul><li>按照流的流向分，可以分为<strong>输入流</strong>和<strong>输出流</strong>；</li><li>按照操作单元划分，可以划分为<strong>字节流</strong>和<strong>字符流</strong>；</li><li>按照流的角色划分为<strong>节点流</strong>和<strong>处理流</strong></li></ul><p>Java Io 流共涉及 40 多个类，看上去杂乱，其实都存在一定的关联， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li><strong>InputStream</strong>/<strong>Reader</strong>: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li><strong>OutputStream</strong>/<strong>Writer</strong>: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-24.jpeg" alt="IO-操作方式分类-图片来源参考[2]" tabindex="0" loading="lazy"><figcaption>IO-操作方式分类-图片来源参考[2]</figcaption></figure><blockquote><p>IO 流用到了什么设计模式？</p></blockquote><p>其实，Java 的 IO 流体系还用到了一个设计模式——<strong>装饰器模式</strong>。</p><p>InputStream 相关的部分类图如下，篇幅有限，装饰器模式就不展开说了。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-25.png" alt="Java IO流用到装饰器模式" tabindex="0" loading="lazy"><figcaption>Java IO流用到装饰器模式</figcaption></figure><h3 id="_43-既然有了字节流-为什么还要有字符流" tabindex="-1"><a class="header-anchor" href="#_43-既然有了字节流-为什么还要有字符流" aria-hidden="true">#</a> 43.既然有了字节流,为什么还要有字符流?</h3><p>其实字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还比较耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。</p><p>所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p><h4 id="文本存储是字节流还是字符流-视频文件呢" tabindex="-1"><a class="header-anchor" href="#文本存储是字节流还是字符流-视频文件呢" aria-hidden="true">#</a> 文本存储是字节流还是字符流，视频文件呢？</h4><p>在计算机中，文本和视频都是按照字节存储的，只是如果是文本文件的话，我们可以通过字符流的形式去读取，这样更方面的我们进行直接处理。</p><p>比如说我们需要在一个大文本文件中查找某个字符串，可以直接通过字符流来读取判断。</p><p>处理视频文件时，通常使用字节流（如 Java 中的<code>FileInputStream</code>、<code>FileOutputStream</code>）来读取或写入数据，并且会尽量使用缓冲流（如<code>BufferedInputStream</code>、<code>BufferedOutputStream</code>）来提高读写效率。</p>',18),ca={href:"https://javabetter.cn/zhishixingqiu/paicoding.html",target:"_blank",rel:"noopener noreferrer"},ia=n("p",null,"因此，无论是文本文件还是视频文件，它们在物理存储层面都是以字节流的形式存在。区别在于，我们如何通过 Java 代码来解释和处理这些字节流：作为编码后的字符还是作为二进制数据。",-1),la={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},ra=n("h3",{id:"_44-bio、nio、aio-之间的区别",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_44-bio、nio、aio-之间的区别","aria-hidden":"true"},"#"),a(" 44.BIO、NIO、AIO 之间的区别？")],-1),ua={href:"https://javabetter.cn/nio/nio-better-io.html",target:"_blank",rel:"noopener noreferrer"},da=t(`<p>BIO（Blocking I/O）：采用阻塞式 I/O 模型，线程在执行 I/O 操作时被阻塞，无法处理其他任务，适用于连接数较少的场景。</p><p>NIO（New I/O 或 Non-blocking I/O）：采用非阻塞 I/O 模型，线程在等待 I/O 时可执行其他任务，通过 Selector 监控多个 Channel 上的事件，适用于连接数多但连接时间短的场景。</p><p>AIO（Asynchronous I/O）：使用异步 I/O 模型，线程发起 I/O 请求后立即返回，当 I/O 操作完成时通过回调函数通知线程，适用于连接数多且连接时间长的场景。</p><figure><img src="https://cdn.tobebetterjavaer.com/stutymore/javase-20240404103618.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="简单说一下-bio" tabindex="-1"><a class="header-anchor" href="#简单说一下-bio" aria-hidden="true">#</a> 简单说一下 BIO？</h4><p>BIO，也就是传统的 IO，基于字节流或字符流（如 FileInputStream、BufferedReader 等）进行文件读写，基于 Socket 和 ServerSocket 进行网络通信。</p><p>对于每个连接，都需要创建一个独立的线程来处理读写操作。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-27.png" alt="三分恶面渣逆袭：BIO" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：BIO</figcaption></figure><h4 id="简单说下-nio" tabindex="-1"><a class="header-anchor" href="#简单说下-nio" aria-hidden="true">#</a> 简单说下 NIO？</h4><p>NIO，JDK 1.4 时引入，放在 java.nio 包下，提供了 Channel、Buffer、Selector 等新的抽象，基于 RandomAccessFile、FileChannel、ByteBuffer 进行文件读写，基于 SocketChannel 和 ServerSocketChannel 进行网络通信。</p><p>实际上，“旧”的 I/O 包已经使用 NIO 重新实现过，所以在进行文件读写时，NIO 并无法体现出比 BIO 更可靠的性能。</p><p>NIO 的魅力主要体现在网络编程中，服务器可以用一个线程处理多个客户端连接，通过 Selector 监听多个 Channel 来实现多路复用，极大地提高了网络编程的性能。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-28.png" alt="三分恶面渣逆袭：NIO" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：NIO</figcaption></figure><p>缓冲区 Buffer 也能极大提升一次 IO 操作的效率。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-29.png" alt="三分恶面渣逆袭：NIO完整示意图" tabindex="0" loading="lazy"><figcaption>三分恶面渣逆袭：NIO完整示意图</figcaption></figure><h4 id="简单说下-aio" tabindex="-1"><a class="header-anchor" href="#简单说下-aio" aria-hidden="true">#</a> 简单说下 AIO？</h4><p>AIO 是 Java 7 引入的，放在 java.nio.channels 包下，提供了 AsynchronousFileChannel、AsynchronousSocketChannel 等异步 Channel。</p><p>它引入了异步通道的概念，使得 I/O 操作可以异步进行。这意味着线程发起一个读写操作后不必等待其完成，可以立即进行其他任务，并且当读写操作真正完成时，线程会被异步地通知。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AsynchronousFileChannel</span> fileChannel <span class="token operator">=</span> <span class="token class-name">AsynchronousFileChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;test.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardOpenOption</span><span class="token punctuation">.</span><span class="token constant">READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> fileChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// do something</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),ka={href:"https://javabetter.cn/zhishixingqiu/mianshi.html",target:"_blank",rel:"noopener noreferrer"},va=t(`<h2 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h2><h3 id="_45-什么是序列化-什么是反序列化" tabindex="-1"><a class="header-anchor" href="#_45-什么是序列化-什么是反序列化" aria-hidden="true">#</a> 45.什么是序列化？什么是反序列化？</h3><p>什么是序列化，序列化就是<strong>把 Java 对象转为二进制流</strong>，方便存储和传输。</p><p>所以<strong>反序列化就是把二进制流恢复成对象</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-30.png" alt="序列化和反序列化" tabindex="0" loading="lazy"><figcaption>序列化和反序列化</figcaption></figure><p>类比我们生活中一些大件物品的运输，运输的时候把它拆了打包，用的时候再拆包组装。</p><blockquote><p>Serializable 接口有什么用？</p></blockquote><p>这个接口只是一个标记，没有具体的作用，但是如果不实现这个接口，在有些序列化场景会报错，所以一般建议，创建的 JavaBean 类都实现 Serializable。</p><blockquote><p>serialVersionUID 又有什么用？</p></blockquote><p>serialVersionUID 就是起验证作用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们经常会看到这样的代码，这个 ID 其实就是用来验证序列化的对象和反序列化对应的对象 ID 是否一致。</p><p>这个 ID 的数字其实不重要，无论是 1L 还是 IDE 自动生成的，只要序列化时候对象的 serialVersionUID 和反序列化时候对象的 serialVersionUID 一致的话就行。</p><p>如果没有显示指定 serialVersionUID ，则编译器会根据类的相关信息自动生成一个，可以认为是一个指纹。</p><p>所以如果你没有定义一个 serialVersionUID， 结果序列化一个对象之后，在反序列化之前把对象的类的结构改了，比如增加了一个成员变量，则此时的反序列化会失败。</p><p>因为类的结构变了，所以 serialVersionUID 就不一致。</p><blockquote><p>Java 序列化不包含静态变量？</p></blockquote><p>序列化的时候是不包含静态变量的。</p><blockquote><p>如果有些变量不想序列化，怎么办？</p></blockquote><p>对于不想进行序列化的变量，使用<code>transient</code>关键字修饰。</p><p><code>transient</code> 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被持久化和恢复。<code>transient</code> 只能修饰变量，不能修饰类和方法。</p><h3 id="_46-说说有几种序列化方式" tabindex="-1"><a class="header-anchor" href="#_46-说说有几种序列化方式" aria-hidden="true">#</a> 46.说说有几种序列化方式？</h3><p>Java 序列化方式有很多，常见的有三种：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-31.png" alt="Java常见序列化方式" tabindex="0" loading="lazy"><figcaption>Java常见序列化方式</figcaption></figure><ul><li>Java 对象序列化 ：Java 原生序列化方法即通过 Java 原生流(InputStream 和 OutputStream 之间的转化)的方式进行转化，一般是对象输出流 <code>ObjectOutputStream</code>和对象输入流<code>ObjectInputStream</code>。</li><li>Json 序列化：这个可能是我们最常用的序列化方式，Json 序列化的选择很多，一般会使用 jackson 包，通过 ObjectMapper 类来进行一些操作，比如将对象转化为 byte 数组或者将 json 串转化为对象。</li><li>ProtoBuff 序列化：ProtocolBuffer 是一种轻便高效的结构化数据存储格式，ProtoBuff 序列化对象可以很大程度上将其压缩，可以大大减少数据传输大小，提高系统性能。</li></ul><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><h3 id="_47-java-泛型了解么-什么是类型擦除-介绍一下常用的通配符" tabindex="-1"><a class="header-anchor" href="#_47-java-泛型了解么-什么是类型擦除-介绍一下常用的通配符" aria-hidden="true">#</a> 47.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？</h3><blockquote><p>什么是泛型？</p></blockquote><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//这里直接添加会报错</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">List</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Method</span> add <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//但是通过反射添加，是可以的</span>
add<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">&quot;kl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型一般有三种使用方式:<strong>泛型类</strong>、<strong>泛型接口</strong>、<strong>泛型方法</strong>。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-32.png" alt="泛型类、泛型接口、泛型方法" tabindex="0" loading="lazy"><figcaption>泛型类、泛型接口、泛型方法</figcaption></figure><p><strong>1.泛型类</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型</span>
<span class="token comment">//在实例化泛型类时，必须指定T的具体类型</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">T</span> key<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Generic</span><span class="token punctuation">(</span><span class="token class-name">T</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何实例化泛型类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> genericInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generic</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2.泛型接口</strong> ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现泛型接口，指定类型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">GeneratorImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>3.泛型方法</strong> ：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span> <span class="token class-name">E</span> <span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span> <span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inputArray <span class="token punctuation">)</span>
   <span class="token punctuation">{</span>
         <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token class-name">E</span> element <span class="token operator">:</span> inputArray <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;%s &quot;</span><span class="token punctuation">,</span> element <span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建不同类型数组： Integer, Double 和 Character</span>
<span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;World&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">printArray</span><span class="token punctuation">(</span> intArray  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printArray</span><span class="token punctuation">(</span> stringArray  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>泛型常用的通配符有哪些？</p></blockquote><p><strong>常用的通配符为： T，E，K，V，？</strong></p><ul><li>？ 表示不确定的 java 类型</li><li>T (type) 表示具体的一个 java 类型</li><li>K V (key value) 分别代表 java 键值中的 Key Value</li><li>E (element) 代表 Element</li></ul><blockquote><p>什么是泛型擦除？</p></blockquote><p>所谓的泛型擦除，官方名叫“类型擦除”。</p><p>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的类型信息都会被擦掉。</p><p>也就是说，在运行的时候是没有泛型的。</p><p>例如这段代码，往一群猫里放条狗：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span> cats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Cat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">LinkedList</span> list <span class="token operator">=</span> cats<span class="token punctuation">;</span>  <span class="token comment">// 注意我在这里把范型去掉了，但是list和cats是同一个链表！</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 完全没问题！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 Java 的范型只存在于源码里，编译的时候给你静态地检查一下范型类型是否正确，而到了运行时就不检查了。上面这段代码在 JRE（Java<strong>运行</strong>环境）看来和下面这段没区别：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LinkedList</span> cats <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注意：没有范型！</span>
<span class="token class-name">LinkedList</span> list <span class="token operator">=</span> cats<span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么要类型擦除呢？</p><p>主要是为了向下兼容，因为 JDK5 之前是没有泛型的，为了让 JVM 保持向下兼容，就出了类型擦除这个策略。</p><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h2><h3 id="_48-说一下你对注解的理解" tabindex="-1"><a class="header-anchor" href="#_48-说一下你对注解的理解" aria-hidden="true">#</a> 48.说一下你对注解的理解？</h3><p><strong>Java 注解本质上是一个标记</strong>，可以理解成生活中的一个人的一些小装扮，比如戴什么什么帽子，戴什么眼镜。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-33.png" alt="Java注解和帽子" tabindex="0" loading="lazy"><figcaption>Java注解和帽子</figcaption></figure><p>注解可以标记在类上、方法上、属性上等，标记自身也可以设置一些值，比如帽子颜色是绿色。</p><p>有了标记之后，我们就可以在编译或者运行阶段去识别这些标记，然后搞一些事情，这就是注解的用处。</p><p>例如我们常见的 AOP，使用注解作为切点就是运行期注解的应用；比如 lombok，就是注解在编译期的运行。</p><p>注解生命周期有三大类，分别是：</p><ul><li>RetentionPolicy.SOURCE：给编译器用的，不会写入 class 文件</li><li>RetentionPolicy.CLASS：会写入 class 文件，在类加载阶段丢弃，也就是运行的时候就没这个信息了</li><li>RetentionPolicy.RUNTIME：会写入 class 文件，永久保存，可以通过反射获取注解信息</li></ul><p>所以我上文写的是解析的时候，没写具体是解析啥，因为不同的生命周期的解析动作是不同的。</p><p>像常见的：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-34.png" alt="Override注解" tabindex="0" loading="lazy"><figcaption>Override注解</figcaption></figure><p>就是给编译器用的，编译器编译的时候检查没问题就 over 了，class 文件里面不会有 Override 这个标记。</p><p>再比如 Spring 常见的 Autowired ，就是 RUNTIME 的，所以<strong>在运行的时候可以通过反射得到注解的信息</strong>，还能拿到标记的值 required 。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-35.png" alt="Autowired注解" tabindex="0" loading="lazy"><figcaption>Autowired注解</figcaption></figure><h2 id="反射-1" tabindex="-1"><a class="header-anchor" href="#反射-1" aria-hidden="true">#</a> 反射</h2><h3 id="_49-什么是反射-应用-原理" tabindex="-1"><a class="header-anchor" href="#_49-什么是反射-应用-原理" aria-hidden="true">#</a> 49.什么是反射？应用？原理？</h3><blockquote><p>什么是反射？</p></blockquote><p>我们通常都是利用<code>new</code>方式来创建对象实例，这可以说就是一种“正射”，这种方式在编译时候就确定了类型信息。</p><p>而如果，我们想在时候动态地获取类信息、创建类实例、调用类方法这时候就要用到<strong>反射</strong>。</p><p>通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。</p><p>反射最核心的四个类：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-36.png" alt="Java反射相关类" tabindex="0" loading="lazy"><figcaption>Java反射相关类</figcaption></figure><blockquote><p>反射的应用场景？</p></blockquote><p>一般我们平时都是在在写业务代码，很少会接触到直接使用反射机制的场景。</p><p>但是，这并不代表反射没有用。相反，正是因为反射，你才能这么轻松地使用各种框架。像 Spring/Spring Boot、MyBatis 等等框架中都大量使用了反射机制。</p><p>像 Spring 里的很多 <strong>注解</strong> ，它真正的功能实现就是利用反射。</p><p>就像为什么我们使用 Spring 的时候 ，一个<code>@Component</code>注解就声明了一个类为 Spring Bean 呢？为什么通过一个 <code>@Value</code>注解就读取到配置文件中的值呢？究竟是怎么起作用的呢？</p><p>这些都是因为我们可以基于反射操作类，然后获取到类/属性/方法/方法的参数上的注解，注解这里就有两个作用，一是标记，我们对注解标记的类/属性/方法进行对应的处理；二是注解本身有一些信息，可以参与到处理的逻辑中。</p><blockquote><p>反射的原理？</p></blockquote><p>我们都知道 Java 程序的执行分为编译和运行两步，编译之后会生成字节码(.class)文件，JVM 进行类加载的时候，会加载字节码文件，将类型相关的所有信息加载进方法区，反射就是去获取这些信息，然后进行各种操作。</p><h2 id="jdk1-8-新特性" tabindex="-1"><a class="header-anchor" href="#jdk1-8-新特性" aria-hidden="true">#</a> JDK1.8 新特性</h2><p>JDK 已经出到 17 了，但是你迭代你的版本，我用我的 8。JDK1.8 的一些新特性，当然现在也不新了，其实在工作中已经很常用了。</p><h3 id="_50-jdk1-8-都有哪些新特性" tabindex="-1"><a class="header-anchor" href="#_50-jdk1-8-都有哪些新特性" aria-hidden="true">#</a> 50.JDK1.8 都有哪些新特性？</h3><p>JDK1.8 有不少新特性，我们经常接触到的新特性如下：</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-37.png" alt="JDK1.8主要新特性" tabindex="0" loading="lazy"><figcaption>JDK1.8主要新特性</figcaption></figure><ul><li><p>接口默认方法：Java 8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字修饰即可</p></li><li><p>Lambda 表达式和函数式接口：Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中），使用 Lambda 表达式使代码更加简洁，但是也不要滥用，否则会有可读性等问题，《Effective Java》作者 Josh Bloch 建议使用 Lambda 表达式最好不要超过 3 行。</p></li><li><p>Stream API：用函数式编程方式在集合类上进行复杂操作的工具，配合 Lambda 表达式可以方便的对集合进行处理。</p><p>Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。</p><p>简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p></li><li><p>日期时间 API：Java 8 引入了新的日期时间 API 改进了日期时间的管理。</p></li><li><p>Optional 类：用来解决空指针异常的问题。很久以前 Google Guava 项目引入了 Optional 作为解决空指针异常的一种方式，不赞成代码被 null 检查的代码污染，期望程序员写整洁的代码。受 Google Guava 的鼓励，Optional 现在是 Java 8 库的一部分。</p></li></ul><h3 id="_51-lambda-表达式了解多少" tabindex="-1"><a class="header-anchor" href="#_51-lambda-表达式了解多少" aria-hidden="true">#</a> 51.Lambda 表达式了解多少？</h3><p>Lambda 表达式本质上是一段匿名内部类，也可以是一段可以传递的代码。</p><p>比如我们以前使用 Runnable 创建并运行线程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Thread is running before Java8!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是通过内部类的方式来重写 run 方法，使用 Lambda 表达式，还可以更加简洁：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Thread is running since Java8!&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然不是每个接口都可以缩写成 Lambda 表达式。只有那些函数式接口（Functional Interface）才能缩写成 Lambda 表示式。</p><p>所谓函数式接口（Functional Interface）就是只包含一个抽象方法的声明。针对该接口类型的所有 Lambda 表达式都会与这个抽象方法匹配。</p><blockquote><p>Java8 有哪些内置函数式接口？</p></blockquote><p>JDK 1.8 API 包含了很多内置的函数式接口。其中就包括我们在老版本中经常见到的 <strong>Comparator</strong> 和 <strong>Runnable</strong>，Java 8 为他们都添加了 @FunctionalInterface 注解，以用来支持 Lambda 表达式。</p><p>除了这两个之外，还有 Callable、Predicate、Function、Supplier、Consumer 等等。</p><h3 id="_52-optional-了解吗" tabindex="-1"><a class="header-anchor" href="#_52-optional-了解吗" aria-hidden="true">#</a> 52.Optional 了解吗？</h3><p><code>Optional</code>是用于防范<code>NullPointerException</code>。</p><p>可以将 <code>Optional</code> 看做是包装对象（可能是 <code>null</code>, 也有可能非 <code>null</code>）的容器。当我们定义了 一个方法，这个方法返回的对象可能是空，也有可能非空的时候，我们就可以考虑用 <code>Optional</code> 来包装它，这也是在 Java 8 被推荐使用的做法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> optional <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;bam&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

optional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// true</span>
optional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// &quot;bam&quot;</span>
optional<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;fallback&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// &quot;bam&quot;</span>

optional<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &quot;b&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_53-stream-流用过吗" tabindex="-1"><a class="header-anchor" href="#_53-stream-流用过吗" aria-hidden="true">#</a> 53.Stream 流用过吗？</h3><p><code>Stream</code> 流，简单来说，使用 <code>java.util.Stream</code> 对一个包含一个或多个元素的集合做各种操作。这些操作可能是 <em>中间操作</em> 亦或是 <em>终端操作</em>。 终端操作会返回一个结果，而中间操作会返回一个 <code>Stream</code> 流。</p><p>Stream 流一般用于集合，我们对一个集合做几个常见操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringCollection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ddd2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;aaa1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ccc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;bbb2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringCollection<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;ddd1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Filter 过滤</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stringCollection
    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &quot;aaa2&quot;, &quot;aaa1&quot;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Sorted 排序</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stringCollection
    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &quot;aaa1&quot;, &quot;aaa2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Map 转换</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>stringCollection
    <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> b<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// &quot;DDD2&quot;, &quot;DDD1&quot;, &quot;CCC&quot;, &quot;BBB3&quot;, &quot;BBB2&quot;, &quot;AAA2&quot;, &quot;AAA1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Match 匹配</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 验证 list 中 string 是否有以 a 开头的, 匹配到第一个，即返回 true</span>
<span class="token keyword">boolean</span> anyStartsWithA <span class="token operator">=</span>
    stringCollection
        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>anyStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span>

<span class="token comment">// 验证 list 中 string 是否都是以 a 开头的</span>
<span class="token keyword">boolean</span> allStartsWithA <span class="token operator">=</span>
    stringCollection
        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allStartsWithA<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span>

<span class="token comment">// 验证 list 中 string 是否都不是以 z 开头的,</span>
<span class="token keyword">boolean</span> noneStartsWithZ <span class="token operator">=</span>
    stringCollection
        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>noneStartsWithZ<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Count 计数</strong></li></ul><p><code>count</code> 是一个终端操作，它能够统计 <code>stream</code> 流中的元素总数，返回值是 <code>long</code> 类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 先对 list 中字符串开头为 b 进行过滤，让后统计数量</span>
<span class="token keyword">long</span> startsWithB <span class="token operator">=</span>
    stringCollection
        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>startsWithB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Reduce</strong></li></ul><p><code>Reduce</code> 中文翻译为：<em>减少、缩小</em>。通过入参的 <code>Function</code>，我们能够将 <code>list</code> 归约成一个值。它的返回类型是 <code>Optional</code> 类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> reduced <span class="token operator">=</span>
    stringCollection
        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> s1 <span class="token operator">+</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>

reduced<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是常见的几种流式操作，还有其它的一些流式操作，可以帮助我们更便捷地处理集合数据。</p><figure><img src="https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/sidebar/sanfene/javase-38.png" alt="Java Stream流" tabindex="0" loading="lazy"><figcaption>Java Stream流</figcaption></figure>`,129),ba={href:"https://mp.weixin.qq.com/s/t7EYyF0VGEg1rAZut9dwSw",target:"_blank",rel:"noopener noreferrer"},ma={href:"https://mp.weixin.qq.com/s/M-6RSRcRd3X93cR7VXpanw",target:"_blank",rel:"noopener noreferrer"},ga=n("hr",null,null,-1),ha=n("p",null,[n("em",null,"没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟"),a("。")],-1),fa=n("p",null,[n("strong",null,"系列内容"),a("：")],-1),ya={href:"https://javabetter.cn/sidebar/sanfene/javase.html",target:"_blank",rel:"noopener noreferrer"},ja={href:"https://javabetter.cn/sidebar/sanfene/javathread.html",target:"_blank",rel:"noopener noreferrer"},_a={href:"https://javabetter.cn/sidebar/sanfene/collection.html",target:"_blank",rel:"noopener noreferrer"},wa={href:"https://javabetter.cn/sidebar/sanfene/jvm.html",target:"_blank",rel:"noopener noreferrer"},xa={href:"https://javabetter.cn/sidebar/sanfene/spring.html",target:"_blank",rel:"noopener noreferrer"},qa={href:"https://javabetter.cn/sidebar/sanfene/redis.html",target:"_blank",rel:"noopener noreferrer"},Ja={href:"https://javabetter.cn/sidebar/sanfene/mybatis.html",target:"_blank",rel:"noopener noreferrer"},Sa={href:"https://javabetter.cn/sidebar/sanfene/mysql.html",target:"_blank",rel:"noopener noreferrer"},Ia={href:"https://javabetter.cn/sidebar/sanfene/os.html",target:"_blank",rel:"noopener noreferrer"},Oa={href:"https://javabetter.cn/sidebar/sanfene/network.html",target:"_blank",rel:"noopener noreferrer"},Ba={href:"https://javabetter.cn/sidebar/sanfene/rocketmq.html",target:"_blank",rel:"noopener noreferrer"},za={href:"https://javabetter.cn/sidebar/sanfene/fenbushi.html",target:"_blank",rel:"noopener noreferrer"},Ca={href:"https://javabetter.cn/sidebar/sanfene/weifuwu.html",target:"_blank",rel:"noopener noreferrer"},Ea={href:"https://javabetter.cn/sidebar/sanfene/shejimoshi.html",target:"_blank",rel:"noopener noreferrer"},Pa={href:"https://javabetter.cn/sidebar/sanfene/linux.html",target:"_blank",rel:"noopener noreferrer"},Da=n("hr",null,null,-1),Aa={href:"https://github.com/itwanger/toBeBetterJavaer",target:"_blank",rel:"noopener noreferrer"},La={href:"https://javabetter.cn/overview/",target:"_blank",rel:"noopener noreferrer"},Ma=n("p",null,[a("微信搜 "),n("strong",null,"沉默王二"),a(" 或扫描下方二维码关注二哥的原创公众号沉默王二，回复 "),n("strong",null,"222"),a(" 即可免费领取。")],-1),Va=n("figure",null,[n("img",{src:"https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/gongzhonghao.png",alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1);function Ra(Na,Wa){const s=o("ExternalLinkIcon");return c(),i("div",null,[n("p",null,[a("1.3 万字 44 张手绘图，详解 54 道 Java 基础面试高频题（让天下没有难背的八股），面渣背会这些八股文，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳"),n("a",r,[a("转载链接"),e(s)]),a("，作者：三分恶，戳"),n("a",u,[a("原文链接"),e(s)]),a("。")]),d,n("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),n("a",k,[a("二哥的 Java 进阶之路"),e(s)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",v,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),e(s)])]),b,n("blockquote",null,[n("p",null,[a("推荐阅读："),n("a",m,[a("Java 的数据类型"),e(s)])])]),g,n("ul",null,[n("li",null,[n("a",h,[a("类"),e(s)]),a("（class）")]),n("li",null,[n("a",f,[a("接口"),e(s)]),a("（interface）")]),n("li",null,[n("a",y,[a("数组"),e(s)]),a("（"),j,a("）")])]),n("blockquote",null,[n("ol",null,[n("li",null,[n("a",_,[a("Java 面试指南（付费）"),e(s)]),a("收录的用友金融一面原题：Java 有哪些基本数据类型？")])])]),w,n("p",null,[a("推荐阅读："),n("a",x,[a("计算机系统基础（四）浮点数"),e(s)])]),q,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",J,[a("Java 面试指南（付费）"),e(s)]),a("收录的帆软同学 3 Java 后端一面的原题：float 是怎么表示小数的")])])]),S,n("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),n("a",I,[a("二哥的 Java 进阶之路"),e(s)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",O,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),e(s)])]),B,n("p",null,[a("推荐阅读："),n("a",z,[a("深入理解 Java 三大特性"),e(s)])]),C,n("p",null,[a("推荐阅读："),n("a",E,[a("深入理解 Java 三大特性：封装、继承和多态"),e(s)])]),P,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",D,[a("Java 面试指南（付费）"),e(s)]),a("收录的华为面经同学 8 技术二面面试原题：多态的目的，解决了什么问题？")]),n("li",null,[n("a",A,[a("Java 面试指南（付费）"),e(s)]),a("收录的美团面经同学 16 暑期实习一面面试原题：请说说多态、重载和重写")])])]),L,n("p",null,[a("推荐阅读："),n("a",M,[a("方法重写 Override 和方法重载 Overload 有什么区别？"),e(s)])]),V,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",R,[a("Java 面试指南（付费）"),e(s)]),a("收录的帆软同学 3 Java 后端一面的原题：设计方法，李氏原则，还了解哪些设计原则")]),n("li",null,[n("a",N,[a("Java 面试指南（付费）"),e(s)]),a("收录的美团面经同学 16 暑期实习一面面试原题：请说说多态、重载和重写")])])]),W,n("p",null,[a("①、"),n("a",F,[a("final 是一个修饰符"),e(s)]),a("，可以修饰类、方法和变量。当 final 修饰一个类时，表明这个类不能被继承；当 final 修饰一个方法时，表明这个方法不能被重写；当 final 修饰一个变量时，表明这个变量是个常量，一旦赋值后，就不能再被修改了。")]),K,n("p",null,[a("③、finalize 是"),n("a",T,[a("Object 类"),e(s)]),a("的一个方法，用于在垃圾回收器将对象从内存中清除出去之前做一些必要的清理工作。")]),G,H,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",U,[a("Java 面试指南（付费）"),e(s)]),a("收录的字节跳动面经同学 1 Java 后端技术一面面试原题：final、finally、finalize 的区别？")])])]),X,n("p",null,[Q,a(" 方法的作⽤是获取哈希码，它会返回⼀个 int 整数，定义在 "),n("a",Z,[a("Object 类"),e(s)]),a("中， 是一个本地⽅法。")]),Y,n("p",null,[a("例如 "),n("a",$,[a("HashMap"),e(s)]),a(" 中的 key 就是通过 hashCode 来实现的，通过调用 hashCode 方法获取键的哈希码，并将其与右移 16 位的哈希码进行异或运算。")]),nn,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",an,[a("Java 面试指南（付费）"),e(s)]),a("收录的京东同学 10 后端实习一面的原题：hashcode 和 equals 方法只重写一个行不行，只重写 equals 没重写 hashcode，map put 的时候会发生什么")])])]),sn,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",en,[a("Java 面试指南（付费）"),e(s)]),a("收录的华为 OD 面经同学 1 一面面试原题：引用类型的变量有什么特点")])])]),tn,n("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),n("a",pn,[a("二哥的 Java 进阶之路"),e(s)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",on,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),e(s)])]),cn,n("p",null,[a("推荐阅读："),n("a",ln,[a("StringBuffer 和 StringBuilder 两兄弟"),e(s)])]),rn,un,n("ul",null,[n("li",null,[dn,a("类的对象是"),n("a",kn,[a("不可变的"),e(s)]),a("。也就是说，一旦一个"),vn,a("对象被创建，它所包含的字符串内容是不可改变的。")]),bn]),mn,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",gn,[a("Java 面试指南（付费）"),e(s)]),a("收录的用友金融一面原题：String StringBuffer StringBuilder 有什么区别？")]),n("li",null,[n("a",hn,[a("Java 面试指南（付费）"),e(s)]),a("收录的国企面试原题：String,StringBuffer,StringBuilder 的区别")])])]),fn,n("ol",null,[n("li",null,[a("推荐阅读："),n("a",yn,[a("为什么 Java 字符串 String 是不可变的？"),e(s)])]),n("li",null,[a("推荐阅读："),n("a",jn,[a("最优雅的 Java 字符串 String 拼接"),e(s)])])]),_n,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",wn,[a("Java 面试指南（付费）"),e(s)]),a("收录的小米春招同学 K 一面面试原题：String 是可变的吗，为什么要设计为不可变")])])]),xn,n("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),n("a",qn,[a("二哥的 Java 进阶之路"),e(s)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",Jn,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),e(s)])]),Sn,n("ol",null,[n("li",null,[a("推荐阅读："),n("a",In,[a("IntegerCache"),e(s)])]),n("li",null,[a("推荐阅读："),n("a",On,[a("深入浅出 Java 拆箱与装箱"),e(s)])])]),Bn,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",zn,[a("Java 面试指南（付费）"),e(s)]),a("收录的小米春招同学 K 一面面试原题：new Integer(10) == new Integer(10) 相等吗 常量池")])])]),Cn,n("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),n("a",En,[a("二哥的 Java 进阶之路"),e(s)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",Pn,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),e(s)])]),Dn,n("p",null,[a("①、"),An,a(" ："),n("a",Ln,[a("native 方法"),e(s)]),a("，用于返回对象的哈希码。")]),Mn,n("p",null,[a("按照约定，相等的对象必须具有相等的哈希码。如果重写了 equals 方法，就应该重写 hashCode 方法。可以使用 "),n("a",Vn,[a("Objects.hash()"),e(s)]),a(" 方法来生成哈希码。")]),Rn,n("p",null,[a("如果比较的是两个对象的值是否相等，就要重写该方法，比如 "),n("a",Nn,[a("String 类"),e(s)]),a("、Integer 类等都重写了该方法。举个例子，假如有一个 Person 类，我们认为只要年龄和名字相同，就是同一个人，那么就可以这样重写 equals 方法：")]),Wn,n("p",null,[Fn,a("：naitive 方法，返回此对象的一个副本。默认实现只做"),n("a",Kn,[a("浅拷贝"),e(s)]),a("，且类必须实现 Cloneable 接口。")]),Tn,n("p",null,[a("也可以交给 "),n("a",Gn,[a("Lombok"),e(s)]),a("，使用 @Data 注解，它会自动生成 toString 方法。")]),Hn,n("p",null,[a("推荐阅读："),n("a",Un,[a("二哥的 Java 进阶之路：掌握 Java 反射"),e(s)])]),Xn,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",Qn,[a("Java 面试指南（付费）"),e(s)]),a("收录的用友金融一面原题：Object 有哪些常用的方法？")])])]),Zn,Yn,n("p",null,[a("推荐阅读："),n("a",$n,[a("一文彻底搞懂 Java 异常处理"),e(s)])]),na,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",aa,[a("Java 面试指南（付费）"),e(s)]),a("收录的京东同学 10 后端实习一面的原题：Java 编译时异常和运行时异常的区别")]),n("li",null,[n("a",sa,[a("Java 面试指南（付费）"),e(s)]),a("收录的字节跳动面经同学 1 Java 后端技术一面面试原题：异常有哪些分类？")]),n("li",null,[n("a",ea,[a("Java 面试指南（付费）"),e(s)]),a("收录的字节跳动面经同学 1 Java 后端技术一面面试原题：Error 和 Exception都是谁的子类？")])])]),ta,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",pa,[a("Java 面试指南（付费）"),e(s)]),a("收录的京东同学 10 后端实习一面的原题：return 先执行还是 finally 先执行")])])]),oa,n("p",null,[a("在"),n("a",ca,[a("技术派实战项目"),e(s)]),a("项目中，对于文本，比如说文章和教程内容，是直接存储在数据库中的，而对于视频和图片等大文件，是存储在 OSS 中的。")]),ia,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",la,[a("Java 面试指南（付费）"),e(s)]),a("收录的国企面试原题：文本存储是字节流还是字符流，视频文件呢？")])])]),ra,n("p",null,[a("推荐阅读："),n("a",ua,[a("Java NIO 比传统 IO 强在哪里？"),e(s)])]),da,n("blockquote",null,[n("ol",null,[n("li",null,[n("a",ka,[a("Java 面试指南（付费）"),e(s)]),a("收录的比亚迪面经同学 3 Java 技术一面面试原题：BIO NIO 的区别")])])]),va,n("blockquote",null,[n("p",null,[a("图文详解 54 道 Java 基础面试高频题，这次吊打面试官，我觉得稳了（手动 dog）。整理：沉默王二，戳"),n("a",ba,[a("转载链接"),e(s)]),a("，作者：三分恶，戳"),n("a",ma,[a("原文链接"),e(s)]),a("。")])]),ga,ha,fa,n("ul",null,[n("li",null,[n("a",ya,[a("面渣逆袭 Java SE 篇 👍"),e(s)])]),n("li",null,[n("a",ja,[a("面渣逆袭 Java 集合框架篇 👍"),e(s)])]),n("li",null,[n("a",_a,[a("面渣逆袭 Java 并发编程篇 👍"),e(s)])]),n("li",null,[n("a",wa,[a("面渣逆袭 JVM 篇 👍"),e(s)])]),n("li",null,[n("a",xa,[a("面渣逆袭 Spring 篇 👍"),e(s)])]),n("li",null,[n("a",qa,[a("面渣逆袭 Redis 篇 👍"),e(s)])]),n("li",null,[n("a",Ja,[a("面渣逆袭 MyBatis 篇 👍"),e(s)])]),n("li",null,[n("a",Sa,[a("面渣逆袭 MySQL 篇 👍"),e(s)])]),n("li",null,[n("a",Ia,[a("面渣逆袭操作系统篇 👍"),e(s)])]),n("li",null,[n("a",Oa,[a("面渣逆袭计算机网络篇 👍"),e(s)])]),n("li",null,[n("a",Ba,[a("面渣逆袭 RocketMQ 篇 👍"),e(s)])]),n("li",null,[n("a",za,[a("面渣逆袭分布式篇 👍"),e(s)])]),n("li",null,[n("a",Ca,[a("面渣逆袭微服务篇 👍"),e(s)])]),n("li",null,[n("a",Ea,[a("面渣逆袭设计模式篇 👍"),e(s)])]),n("li",null,[n("a",Pa,[a("面渣逆袭Linux篇 👍"),e(s)])])]),Da,n("p",null,[a("GitHub 上标星 10000+ 的开源知识库《"),n("a",Aa,[a("二哥的 Java 进阶之路"),e(s)]),a("》第一版 PDF 终于来了！包括 Java 基础语法、数组&字符串、OOP、集合框架、Java IO、异常处理、Java 新特性、网络编程、NIO、并发编程、JVM 等等，共计 32 万余字，500+张手绘图，可以说是通俗易懂、风趣幽默……详情戳："),n("a",La,[a("太赞了，GitHub 上标星 10000+ 的 Java 教程"),e(s)])]),Ma,Va])}const Ta=p(l,[["render",Ra],["__file","javase.html.vue"]]);export{Ta as default};
